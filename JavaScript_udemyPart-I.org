#+TITLE: Udemy JavaScript Part I
#+AUTHOR: Karthik
#+SETUPFILE:css/emacs-org.setup
 # +OPTIONS: num:nil
# Below line disable Super/Subscription 
# +OPTIONS: ^:nil

[  [[./index.html][Home]] ]  $&ensp;$  | $&ensp;$ $&ensp;$ [text] $&ensp;$  $&ensp;$ | $&ensp;$ $&ensp;$ [link] $&ensp;$ $&ensp;$ | $&ensp;$ $&ensp;$ [title] $&ensp;$ $&ensp;$ | $&ensp;$ $&ensp;$ [icon] $&ensp;$ $&ensp;$ | $&ensp;$ $&ensp;$ [target]  $&ensp;$ $&ensp;$ | $&ensp;$ $&ensp;$ [expanded]  $&ensp;$ $&ensp;$
-----

resource : https://www.udemy.com/course/the-complete-javascript-course

* Cirriculumn
- [[1. JavaScript Fundamentals Part 1]
- [[2. JavaScript Fundamentals Part 2]
- [[3. How to Navigate This Course]
- [[4. Developer Skills & Editor Setup]
- [[5. HTML & CSS Crash Course]
- [[6. JavaScript in the Browser - DOM and Events Fundamentals]
- [[7. How JavaScript Works Behind the Scenes]
- [[8. Data Structures, Modern Operators and Strings]
- [[9. A Closer Look at Functions]
- Working With Arrays
- Numbers, Dates, Intl and Timers
- Advanced DOM and Events
- Object-Oriented Programming (O0P) With JavaScript
- Mapty App: OOP, Geolocation, External Libraries, and More!
- Asynchronous JavaScript: Promises, Async/Await, and AJAX
- Modern JavaScript Development: Modules, Tooling, and Functional
- Forkify App - Building a Modern Application
- Setting Up Git and Deployment

* What you'll learn
- Become an advanced, confident, and modern JavaScript developer from
  scratch
- Build 6 beautiful real-world projects for your portfolio (not boring
  toy apps)
- Become job-ready by understanding how JavaScript really works behind
  the scenes
- How to think and work like a developer: problem-solving, researching,
  workflows
- JavaScript fundamentals: variables, if/else, operators, boolean logic,
  functions, arrays, objects, loops, strings, etc.
- Modern ES6+ from the beginning: arrow functions, destructuring, spread
  operator, optional chaining (ES2020), etc.
- Modern OOP: Classes, constructors, prototypal inheritance,
  encapsulation, etc.
- Complex concepts like the 'this' keyword, higher-order functions,
  closures, etc.
- Asynchronous JavaScript: Event loop, promises, async/await, AJAX calls
  and APIs
- How to architect your code using flowcharts and common patterns
- Modern tools for 2022 and beyond: NPM, Parcel, Babel and ES6 modules
- Practice your skills with 50+ challenges and assignments (solutions
  included)
- Get fast and friendly support in the Q&A area
- Course pathways: design your unique learning path according to your
  goals!

* Resources
- https://codingheroes.io/resources/

npm install live-server -g
* 07 How JavaScript Works Behind the Scenes
** An High-Level Overview of JavaScript
*** What is Javascript?
    :PROPERTIES:
    :CUSTOM_ID: what-is-javascript
    :END:

Javascript Is a High-Level, Object-Oriented, Multi-Paradigm Programming Language.

Javascript Is a
- *High-Level*
- /Prototype-Based/
- *Object-Oriented*
- Multi-Paradigm Interpreted or Just-in-Time Compiled Dynamic
- Single-Threaded Garbage-Collected Programming Language With
- First-Class unctions and a
- Non-Blocking Event Loop Concurrency Model
**** High-level

Garbage-collected
Interpreted or just-in-time compiled
Multi-paradigm
Prototype-based object-oriented
First-class functions
*** Dynamic
**** Single-threaded & Non-blocking event loop




** The JavaScript Engine and Runtime
*** What is Javascript Engine
- So a JavaScript engine is simply a computer program that executes JavaScript code.
- Now every browser has its own JavaScript engine but probably the most well known engine is Google's V-Eight.
- So any JavaScript engine always contains a call stack and a heap. The call stack is where our code is actually executed using something called execution contexts.

Then the heap is an unstructured memory pool which stores all the objects that our application needs.

### Compilation vs Interpretation

*** Just in Time Compilation of Javascript
*** Runtime in Browser




*** Runtime in NodeJs
** Execution Contexts and The Call Stack
*** What is an Execution Context?
But now what exactly is an execution context? \\
Well, an execution context is an abstract concept. \\
But I define it basically as an environment in which a piece of JavaScript is executed. \\
It's like a box that stores all the necessary information for some code to be executed. \\
Such as local variables or arguments passed into a function. So, JavaScript code always runs inside an execution context. \\
Now, in any JavaScript project, no matter how large it is, there is only ever one global execution context. \\
It's always there as the default context, and it's where top-level code will execute.

*** Execution Context in Detail
Because remember each function gets its own execution context as soon as the function is called. \\
So basically all the variables that are somehow  declared inside a function, will end up in its variable environment.\\

However, a function can also access variables outside of the function and this works because of something called the *scope chain*.

Scope chain basically consists of references to variables that are located outside of the current function.\\
And to keep track of the *scope chain*, it is stored in each *execution context*.

*Execution contexts* belonging to *arrow functions*, do not get their own arguments keyword, nor do they get the this keyword, okay? \\
So, basically *arrow functions don't have the arguments object and the this* keyword. \\
Instead, they can use the arguments object, and the this keyword from their closest regular function parent.

*** The Call Stack
JavaScript has only *one thread of execution*. And so it can only do one thing at a time.//

So like to use the analogy of the call stack being like a map for the JavaScript engine. \\
Because the call stack ensures that the order of execution never gets lost.

Scope and The Scope Chain
### Scope Concepts
- *Scoping*: How our program's variables are organized and accessed. \\
  "Where do variables live?" or "Where can we access a certain variable, and where not?",
- *Lexical scoping*: Scoping is controlled by placement of functions and blocks in the code;
- *Scope*: Space or environment in which a certain variable is declared (variable environment in case of functions). \\
  There is global scope, function scope, and block scope;
- *Scope of a variable*: Region of our code where a certain variable can be accessed.

*** The 3 types of Scopes
*** Scope Chain vs. The Call Stack
*** Summary
- Scoping asks the question "Where do variables live?" or "Where can we
  access a certain variable, and where not?";
- There are 3 types of scope in JavaScript: the global scope, scopes
  defined by functions, and scopes defined by blocks;
- Only let and const variables are block-scoped. Variables declared with
  var end up in the closest function scope;
- In JavaScript, we have lexical scoping, so the rules of where we can
  access variables are based on exactly where in the code functions and
  blocks are written;
- Every scope always has access to all the variables from all its outer
  scopes. This is the scope chain!
- When a variable is not in the current scope, the engine looks up in
  the scope chain until it finds the variable it's looking for. This is
  called variable lookup;
- The scope chain is a one-way street: a scope will never, ever have
  access to the variables of an inner scope;
- The scope chain in a certain scope is equal to adding together all the
  variable environments of the all parent scopes;
- The scope chain has nothing to do with the order in which functions
  were called. It does not affect the scope chain at all!

** Scoping in Practice
#+BEGIN_SRC js
    function calcAge(birthYear) {
      const age = 2037 - birthYear;

      function printAge() {
        let output = `${firstName}, you are ${age}, born in ${birthYear}`;
        console.log(output); // output: firstName = Jonas → coming from global scope.

        // Block Scope
        if (birthYear >= 1981 && birthYear <= 1996) {
          var millenial = true;
          // Creating NEW variable with same name as outer scope's variable
          const firstName = 'Steven'; // firstName already declared in Global Scope

          // Reasssigning outer scope's variable
          output = 'NEW OUTPUT!'; 

          const str = `Oh, and you're a millenial, ${firstName}`; // output: Steven - This happens because Javascript tries to look the variable name in the current scope.
          console.log(str); // output: Oh, and you're a millenial, xoraus

          function add(a, b) { 
            return a + b; // The scope of this add function is only where it is defined
          }
        }
        console.log(str); // output: // str is not defined
        console.log(millenial); //output: true
        console.log(add(2, 3)); // output: add is not defined. (in strict mode)
        console.log(output); //output: NEW OUTPUT
      }
      printAge();

      return age;
    }

    const firstName = 'xoraus';
    calcAge(1997);  // output: xoraus you are 50, born in 1997
    console.log(age); // output: age is not defined 
    printAge(); // output: printAge is not defined
#+END_SRC

- const and let variables are block scoped.
- so variables declared with the var keyword are function scoped. So
  they simply ignore the block, because they are not block scoped at
  all. They're just function scoped.
- that the scope of a variable is the entire region of the code in which
  the variable is accessible.
- Functions are block scoped in *Strict Mode*
- So the scope chain isn't necessary at all, if the variable that we're
  looking for is already in the current scope.

** Variable Environment: Hoisting and The TDZ
- So we learned that an execution context always contains three parts.
  A variable environment, the scope chain in the in current context, and the this keyword.
- So in JavaScript we have a mechanism called hoisting. And hoisting basically make some types of variables accessible, or let's
say usable in the code before they are actually declared in the code. Now, many people simply define hoisting by saying that variables are magically lifted off moved to the top of their scope for example, to the top of a function. And that is actually what hoisting looks like on the surface.
- Instead, behind the scenes the code is basically scanned for variable declarations before it is executed. So this happens during the
so-called creation phase of the execution context that we talked about before. Then for each variable that is found is in the code, a new
property is created in a variable environment object. And that's how hoisting really works. Now, hoisting does not work the same for all variable types.
- This means that a function expression or arrow function created with var is hoisted to /undefined/. But if created with
*let* or *const*, it's not usable before it's declared in a code because
of the Temporal Dead Zone so again, just like normal variables. And is
this is actually the reason that we cannot use function expressions
before we write them in the code, unlike function declarations.


- So to recap, basically each and every let and const variable get their
  own Temporal Dead Zone that starts at the beginning of the scope until
  the line where it is defined. And the variable is only safe to use
  after the TDZ, so the Temporal Dead Zone.
- Alright, now what is actually the need for JavaScript to have a
  Temporal Dead Zone? Well, the main reason that the TDZ was introduced
  in ES6 is that the behavior I described before makes it way easier to
  avoid and catch errors. Because using a variable that is set to
  undefined before it's actually declared can cause serious bugs which
  might be hard to find.
- So accessing variables before declaration is bad practice and should
  be avoided. And the best way to avoid it iS by simply getting an
  error.
- A second and smaller reason why the TDZ exists is to make const
  variables actually work the way they are supposed to. So as you know,
  we can't reassign const variables. it So it will not be possible to
  set them to undefined first and then assign their real value later.
- Now, if hoisting creates so many problems, why does it exist in the
  first place? I get this question all the time. And so let's quickly
  talk about that here. So the creator of JavaScript basically
  implemented hoisting so that we can use function declarations before
  we use them. Because this is essential for some programming
  techniques, such as mutual recursion. Some people also think that it
  makes code a lot more readable. Now, the fact that it also works for
  var declarations is because that was the only way hoisting could be
  implemented at the time. So the hoisting of var variables is basically
  just a byproduct of hoisting functions. ### Hoisting Example

#+BEGIN_SRC js
    Take a look at this code

    test();
     
    function test() {
      console.log("Hello");
    }

    // We can call the test() function before it was declared in code. That's the hoisting in practice.

    // Why it's possible?

    // JavaScript engine scans the code before executing it and creates a property for each variable or function in the code. For normal variables, it assigns an undefined value, and for functions it assigns a reference to that function in memory. That's why we can call a function, but if we try to access a variable, we will get undefined.

    function scope() {
      console.log(var1); // undefined
      console.log(va1); // undefined
     
      var var1 = "Hello";
      var var2 = "Hi";
    }
    Let me know if you have any questions
#+END_SRC

** Hoisting and TDZ in Practice
   :PROPERTIES:
   :CUSTOM_ID: hoisting-and-tdz-in-practice
   :END:

#+BEGIN_SRC js
    // # Hoisting with Variables
    console.log(me); // output: Undefined (because of Var)
    // console.log(job); // output: Cannot access 'job' before initialization, the origin of this error is that the jobn variable is still in temporal dead zone
    // console.log(year); // output: Cannot access 'year' before initialization

    var me = 'Jonas';
    let job = 'teacher';
    const year = 1991;

    // Functions
    console.log(addDecl(2, 3)); //output: 5 
    // console.log(addExpr(2, 3)); // output: Cannot access 'addExpr' before initialization
        console.log(addArrow); // output: Undefined
    // console.log(addArrow(2, 3));

    function addDecl(a, b) {
      return a + b;
    }

    const addExpr = function (a, b) {
      return a + b;
    };

    var addArrow = (a, b) => a + b;

    // Example
    console.log(undefined);
        if (!numProducts) deleteShoppingCart(); // output: All products deleted because at this moment the numProducts is 'Undefined' because it is declared with 'var' and that's because how the var works with hosting

    var numProducts = 10;

    function deleteShoppingCart() {
      console.log('All products deleted!');
    }

    var x = 1; // we get a property of x = 1. we cannot find y or z here in this object and that's because they were declared with let or const
    let y = 2;
    const z = 3;

    console.log(x === window.x); // output: true
    console.log(y === window.y); // output: false
    console.log(z === window.z); // output: false
#+END_SRC

- variables declared with var, will create a property on the global
  window object. And that can have some implications in some cases.

** The this Keyword
   :PROPERTIES:
   :CUSTOM_ID: the-this-keyword
   :END:

[[7. How JavaScript Works Behind the Scenes-1661754569885

- Instead, if you use 'the this variable' in an arrow function, it will
  simply be the this keyword of the surrounding function. So of the
  parent function and in technical terms, this is called the 'lexical
  this keyword,' because it simply gets picked up from the outer lexical
  scope of the arrow function.
- It's also important to know what the, this keyword is not. So this
  will never point to the function in which we are using it. Also, the
  this keyword will never point to the variable environment of the
  function. And these are two pretty common misconceptions

** The this Keyword in Practice
   :PROPERTIES:
   :CUSTOM_ID: the-this-keyword-in-practice
   :END:

#+BEGIN_SRC js
    'use strict'
    // The this Keyword in Practice
    console.log(this); // output: Window Object

    const calcAge = function (birthYear) {
      console.log(2037 - birthYear);
      console.log(this); // output: Undefined (in case of strict mode)
    };
    calcAge(1991);

    const calcAgeArrow = birthYear => {
      console.log(2037 - birthYear);
      console.log(this); // output: Window (because the arrow function doesn't get the this function So instead the arrow function simply uses the lexical this keyword, which means that it uses the disc keyword of its parent function or of its parents scope.
    };
    calcAgeArrow(1980);

    const jonas = {
      year: 1991,
      calcAge: function () {
        console.log(this); // output: jonas object - The reason that the this keyword will point to Jonas in this case is because jonas was the object calling that method
        console.log(2037 - this.year); // output: 46
      },
    };
    jonas.calcAge();

    const matilda = {
      year: 2017,
    };

    matilda.calcAge = jonas.calcAge; // method borrowing 
    matilda.calcAge(); // output: 20  (this will point to year: 2017) - So even though the method is written here inside of the Jonas object the this keyword will still point to Matilda. If it is Matilda, who calls the method.

    const f = jonas.calcAge;
    f(); // Cannot read property 'year' of undefined
#+END_SRC

** Regular Functions vs. Arrow Functions
   :PROPERTIES:
   :CUSTOM_ID: regular-functions-vs.-arrow-functions
   :END:

#+BEGIN_SRC js
    // Regular Functions vs. Arrow Functions
    // var firstName = 'Matilda';

    const jonas = {
      firstName: 'Jonas',
      year: 1991,
      calcAge: function () {
        // console.log(this);
        console.log(2037 - this.year);

        // Solution 1
        const self = this; // self or that
        const isMillenial = function () {
          console.log(self);
          console.log(self.year >= 1981 && self.year <= 1996);
        };

        // Solution 2
        const isMillenial = () => {
          console.log(this);
          console.log(this.year >= 1981 && this.year <= 1996);
        };
        isMillenial(); 
      },

      greet: () => {
        console.log(this); //output: Window
        console.log(`Hey ${this.firstName}`); //output: Matilda
      },
    };
    jonas.greet(); // output: Hey Undefined - (using the this keyword from it's parent's this keyword)
    jonas.calcAge();

    // arguments keyword
    const addExpr = function (a, b) {
      console.log(arguments);
      return a + b;
    };
    addExpr(2, 5);
    addExpr(2, 5, 8, 12);

    var addArrow = (a, b) => {
      console.log(arguments);
      return a + b;
    };
    addArrow(2, 5, 8);
#+END_SRC

- Now, just like the this keyword, the arguments keyword is only
  available in regular functions. ## Primitives vs. Objects (Primitive
  vs. Reference Types) [[7. How JavaScript Works Behind the
  Scenes-1661760447942

#+BEGIN_SRC js
    let age = 30;
    let oldAge = age;
    age = 31;
    console.log(age);
    console.log(oldAge);

    const me = {
      name: 'Jonas',
      age: 30,
    };
    const friend = me;
    friend.age = 27;
    console.log('Friend:', friend);
    console.log('Me', me);
#+END_SRC

[[7. How JavaScript Works Behind the Scenes-1661765088951

** Primitives vs. Objects in Practice
   :PROPERTIES:
   :CUSTOM_ID: primitives-vs.-objects-in-practice
   :END:

#+BEGIN_SRC js
    // Primitive types
    let lastName = 'Williams';
    let oldLastName = lastName;
    lastName = 'Davis';
    console.log(lastName, oldLastName); // output: Davis Williams

    // Reference types
    const jessica = {
      firstName: 'Jessica',
      lastName: 'Williams',
      age: 27,
    };
    const marriedJessica = jessica;
    marriedJessica.lastName = 'Davis';
    console.log('Before marriage:', jessica); // output: Before marriage: { firstName: 'Jessica', lastName: 'Davis', age: 27 }
    console.log('After marriage: ', marriedJessica); // output: After marriage: { firstName: 'Jessica', lastName: 'Davis', age: 27 }

    // Copying objects
    const jessica2 = {
      firstName: 'Jessica',
      lastName: 'Williams',
      age: 27,
      family: ['Alice', 'Bob'],
    };

    const jessicaCopy = Object.assign({}, jessica2);
    jessicaCopy.lastName = 'Davis';

    jessicaCopy.family.push('Mary');
    jessicaCopy.family.push('John');

    console.log('Before marriage:', jessica2); // family: [ 'Alice', 'Bob', 'Mary', 'John' ]
    console.log('After marriage: ', jessicaCopy); // amily: [ 'Alice', 'Bob', 'Mary', 'John' ]
#+END_SRC

- And that's why we say that this object.assign only creates a shallow
  copy
- However, the family object is a deeply nested object. And so
  therefore, object.assign did not really, behind the scenes, copy it to
  the new object.
- Now, a deep clone is what we would need here. Usually, we do something
  like this using an external library, for example, like LoDash, and
  this library has a ton of helpful tools and one is of them is for deep
  cloning.

**** Later in course
     :PROPERTIES:
     :CUSTOM_ID: later-in-course
     :END:

- Prototypal Inheritance Object Oriented Programming (00P) With
  JavaScript
- Event Loop Asynchronous JavaScript: Promises, Async/Await and AJAX
- How the DOM Really Works Advanced DOM and Events
* 04 Developer Skills & Editor Setup
** How to fail at learning to Code
   :PROPERTIES:
   :CUSTOM_ID: how-to-fail-at-learning-to-code
   :END:

A person named "/Noob Programmer/"

- He didn't have a clear goal at the beginning of his journey
- He started by watching courses and reading tutorials, but he would
  just copy the code without caring how it works. Sometimes he would
  just copy and paste code!
- He didn't reinforce what he was learning by doing small challenges or
  taking notes He didn't practice coding, and didn't come up with his
  own project ideas
- He quickly became frustrated when his code was not perfectly clean or
  efficient He lost motivation because he thought he could never know
  everything
- He was learning in isolation
- After finishing a couple of a courses, he thought he now was a web
  developer and could start applying to jobs. But he couldn't even build
  an app on his own!

** How to succeed at learning to Code
   :PROPERTIES:
   :CUSTOM_ID: how-to-succeed-at-learning-to-code
   :END:

- He didn't have a clear goal at the beginning of his journey

  - *FIX*

    - Set a specific, measurable, realistic and time-based goal
    - Know exactly why you are learning to code: Switching careers?
      Finding a better job?
    - Imagine a big project you want to be able to build!
    - Research technologies you need and then learn them

- He would just copy the code without caring how it works. Sometimes he
  would just copy and paste code!

  - *FIX*

    - Understand the code that you're studying and typing
    - Always type the code, don't copy-paste!

- He didn't reinforce what he was learning by doing small challenges or
  taking notes

  - *FIX*

    - After you learn a new a feature or concept, use it immediately
    - Take notes
    - Challenge yourself and practice with small coding exercises and
      challenges
    - Don't be in a hurry to complete the course fast!

- He didn't practice coding, and didn't come up with his own project
  ideas

  - *FIX*

    - Practicing on your own is the most important thing to do
    - This is NOT optional! Without practice outside of courses, you
      won't go anywhere!
    - Come up with your own project ideas or copy popular sites or
      applications, or just parts of them in the beginning Don't be
      stuck in "tutorial hell"

- He quickly became frustrated when his code was not perfectly clean or
  efficient

  - *FIX*

    - Don't get stuck trying to write the perfect code!
    - Just write tons of code, no matter the quality!
    - Clean and efficient code will come with time
    - You can always refactor code later

- He lost motivation because he thought he could never know everything

  - *FIX*

    - Embrace the fact that you will never you know everything
    - Just focus on what you need to achieve your goal!

- He was learning in isolation

  - *FIX*

    - Explain new concepts to other people. If you can explain it, you
      truly understand it!
    - Share your goals to make yourself accountable
    - Share your learning progress with the web dev community (
      ##100DaysOfCode, ##CodeNewbie, ##webdev, etc.)

- After finishing a couple of courses, he thought he now was a web
  developer and could start applying to jobs

  - *FIX*

    - The biggest misconception that people have!
    - Courses are an amazing starting point, but are only the beginning
      of your journey!

** Learning how to code is hard, but you can do it!  
** How to fail at solving problems
WHENEVER JOHN ENCOUNTERS A PROBLEM: * He jumps at the problem without
much thinking * He implements his solution in an unstructured way * He
gets stressed out when things don't work * He is too proud to research
solutions - *FIX* - Stay calm and slow down, don't just jump at a
problem without a plan - Take a very logical and rational approach
(programming is just logic, in the end...) - Use my 4-step framework to
solve any problem - Make sure you 100% understand the problem. Ask the
right questions to get a clear picture of the problem - Divide and
conquer: Break a big problem into smaller sub-problems. - Don't be
afraid to do as much research as you have to - For bigger problems,
write pseudo-code before writing the actual code

** What is a software bug?
- Software bug: Defect or problem in a computer program. Basically, any
  unexpected or unintended behavior of a computer program is a software
  bug.
- Bugs are completely normal in software development!
- Debugging: Process of finding, fixing and preventing bugs.
- /Note/ - A real bug which was causing an error in Harvard's computer
  in the 1940s

** The Debugging Process

* Run JS
*** Using Browser Console
*** Run js from file
Create a html and js file
inside js write
#+begin_src 
console.log("This file is js file ")
let t =3;
#+end_src
and link js file to html file

#+begin_src 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src"app.js"></script>
  <title>Document</title>
</head>
<body>
  TEST JS from file
</body>
</html>
#+end_src

*** print the output
- console.log
- alert
- prompt

#+BEGIN_SRC js
console.log("Hello World!")
console.war("WAR")
console.error("AKSAJDKLAS")

alert("Hi There")
let userInput=prompt("Please enter number")
parseInt(userInput)  //convert string to number

#+END_SRC

** 3. Linking a JavaScript File
#+BEGIN_SRC js
    let js = "amazing";
    console.log(40 + 8 + 23 - 10);
#+END_SRC

* Variables
#+BEGIN_SRC jss
let firstName = "Matilda";

console.log("xoraus");
console.log(23);
console.log(firstName);

// Old way to inicalize variable
var runDistance =26.2;


let, const and var // us let when you're sure that the vaule will change in future

// let is block scoped
// VAR is function-scoped

let age = 30;
age = 31; // here let (age) is mutable

const birthYear = 1991; // it is immutable
birthYear = 1990;

const job; // this will throw an error;  
var job = 'programmer'; // used in legacy codebases


#+END_SRC
** 5. Variable NAME Conventions
variable should start with 'a-z' 'A-Z' '_' \\
variable should contain ['a-z']['A-Z']['_'][0-9] \\

generally js uses CamelCase( currentData) than Snake_case (current_data)  



#+BEGIN_SRC js
let xoraus_matilda = "JM";
let $function = 27; // >>> 

let person = "xoraus";
let PI = 3.1415;

let myFirstJob = "Coder";
let myCurrentJob = "Teacher";

let job1 = "programmer";
let job2 = "teacher";

console.log(myFirstJob);
#+END_SRC

* Constant Variable
const are immutable and 
#+begin_src 
const pi=3.1427;
const days_in_week=7;

#+end_src
* Data Types
Different Data Types
- Primitive Types
  - Numbers (both int and float) and include NaN(Not A Number: 0/0, 1+ NaN,  ) 
  - String
  - Boolean(true, false)
  - Null
  - Undefined
- User Defined Data Types
  - Arrays
    
#+BEGIN_SRC js
    let javascriptIsFun = true;
    console.log(javascriptIsFun);

    console.log(typeof true); // >>> Boolean
    console.log(typeof javascriptIsFun); // >>> Boolean
    console.log(typeof 23); // >>> number
    console.log(typeof 'xoraus'); // >>> String

    javascriptIsFun = 'YES!';
    console.log(typeof javascriptIsFun); // >>> String

    let year;

    console.log(year);
    console.log(typeof year);

    year = 1991;

    console.log(typeof year);
    console.log(typeof null);  

    let, const and var // us let when you're sure that the vaule will change in future

    // let is block scoped
    // VAR is function-scoped

    let age = 30;
    age = 31; // here let (age) is mutable

    const birthYear = 1991; // it is immutable
    birthYear = 1990;

    const job; // this will throw an error;  
    var job = 'programmer'; // used in legacy codebases

    job = 'teacher'


    lastName = 'Ahmed';
    console.log(lastName);
#+END_SRC
*** Number
Data Type Number consist of int and float and also have build in function.

Math Object https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
#+begin_src js
Math.sin(1)
Math.E // e= 2.718281
Math.floor(23.90) // 23
Math.ceil(34.1) // 35
Math.random()  // 0.34254801354
Math.random()*10 %10 // single digit
Math.floor(Math.random() *9) 10 // Signle Digit

#+end_src

*** String
#+begin_src js
let username = "danny";
let favAnimal = 'Dumbo Octopus'
// how to write single and double code in string
#+end_src
**** String is Indexed like Array
String is like Array and end with len-1 \\
#+begin_src js
let animan = "Dumbo Octopus"
animal[0] // "D"
animal.lenght // 13
animal[12] // 's'
animal + animal // "Dumbo OctopusDumbo Octopus"
result = 1 + animal // "1Dumbo Octopus"  JS convert number into str whin adding with stirng
#+end_src
**** String Method
List of all String Method:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

#+begin_src js
animal.lenght
animaltoLowerCase()   // it will not overwrite the variable 
animal.trim()         // simillar to strip in python
animal.toUpperCase()  //
animal.trim().toUpperCase()

// method with argument
animal.indexOf("Oct") // >>> 5
animal.indexOf("$")   // >>> -1 : if '$' char not present then it will return -1

animal.slice(5)      // Octopus
aniaml.slice(5,10)   // Octop
animal.slice(-6)     // ctopus

animal.replace('Oct', 'Nov')  // Dumbo Novopus
animal.repalceAll // NOTE: This is not recognised in InterExplore 

#+end_src
**** String Template Literals
Simillar to format in python
#+begin_src js
let qty = 5;
let total = "You bought " qty + " " + product + ". Total is: " + price* qty
// or
let total = `You bought ${qty} ${product}. Total is: ${price*qty}`
#+end_src

*** Null and Undefined
Null :
- Intentional absence of any value
- Must be assigned

Undefined:
- Variables that do not have assigned value are undefined

  let loggedInUser=null;
  loggedInUser= 'Alan Richman'
** 13. Type Conversion and Coercion
#+BEGIN_SRC js
    // type conversion - type conversion is when we manuallyconvert from one type to another.

    const inputYear = '1991';

    console.log(Number(inputYear), inputYear);
    console.log(Number(inputYear) + 18);

    console.log(Number('xoraus')); // Outuput: NaN (Not a Number - it actually means invalid number)
    console.log(typeof NaN); // output: number

    console.log(String(23), 23); // String(23) is a string; 23 is a number

    // type coercion - type coercion is when JavaScript automatically converts types behind the scenes for us.
    // So basically, type coercion happens whenever an operator is dealing with two values that have different types.


    console.log('I am ' + 23 + ' years old'); // output: I am 23 years old. Since Javascript has type coercion, the number will be automatically be converted into string.
    console.log('23' - '10' - 3); // output: Here the strings are converted to numbers because of (- minus) operator.
    console.log('23' * '2'); // strings are converted to numbers
    console.log('23' / '2'); // strings are converted to numbers

    let n = '1' + 1; // String - '11'
    n = n - 1; // String 11 will be converted to number 11 then 11 - 1 = 10

    console.log(n); // 10

    console.log(2+3+4+'5') // output: 95 as string ; 9 + '5' → 95
    console.log('10'-'4'-'3'-2 +'5') // output: 15 as string ;  1 + '5' → 15
#+END_SRC
  
 Basic Operators
*** Math operators
#+BEGIN_SRC js
    const now = 2037;
    const ageXoraus = now - 1991;
    const ageSarah = now - 2018;

    console.log(ageXoraus, ageSarah);
    console.log(ageXoraus * 2, ageXoraus 10, 2 ** 3);

    // 2 ** 3 means 2 to the power of 3 = 2 * 2 * 2

    const firstName = 'xoraus';
    const lastName = 'Ahmed';

    console.log(firstName + ' ' + lastName);
#+END_SRC

*** Assignment operators
#+BEGIN_SRC js
let x = 10 + 5; // output: 15

x += 10; // x = x + 10 >> Output: 25

x *= 4; // x = x * 4 >> Output: 100

i =5;
result = i++ // >>>  result =5, i =6 :  i++ is postincrement operator 1st it assign value then it increment i

i =5
result = ++i // >>> result =6; i =6 : ++i is preincrement operatior



x++; // x = x + 1 >> post increment 
x--; // x = x - 1 >>
--; // 

console.log(x);
#+END_SRC

*** Comparison operators (Boolean Logic)
#+BEGIN_SRC jss
>  // greater than
<  // less than 
>= // greater than or equal 
<= // less than or equal to 
== // equality
!= // not equal 
=== // strict equal 
!== // strict equal

// Example
ageXoraus > ageSarah; //  >, <, >=, <=
ageSarah >= 18;  // Output: true

const isFullAge = ageSarah >= 18;

now - 1991 > now - 2018;
#+END_SRC

***  Equality Operators: == vs. ===
Double Equal (==):
- Check or equality of value, but not equality of type.
- It coerces both values to the same type and then compares them.
- This can lead to some unexpected results !

  
#+begin_src js
//Note: there type is NOT Checked
1=='1'         // true
0 ==''         //true
0 ==false      //true
null==undefine //true

1 =='1'        //false 
0 ===''        //false
0 ===false     //false
null ===undefine //false

#+end_src

#+BEGIN_SRC js
    const age = '18';
    if (age === 18) console.log('You just became an adult :D (strict)'); // output: true (strict equality doesn't perform type coercion)
    if (age == 18) console.log('You just became an adult :D (loose)'); // Lose equality does the type coercion therefore output: true (the string '18' will be converted to number before checking) 

    const favourite = Number(prompt("What's your favourite number?"));
    console.log(favourite);
    console.log(typeof favourite);

    if (favourite === 23) { // 22 === 23 -> FALSE
      console.log('Cool! 23 is an amzaing number!')
    } else if (favourite === 7) {
      console.log('7 is also a cool number')
    } else if (favourite === 9) {
      console.log('9 is also a cool number')
    } else {
      console.log('Number is not 23 or 7 or 9')
    }

    if (favourite !== 23) console.log('Why not 23?');
#+END_SRC

So as a general rule for clean code, avoid the loose equality operator
as much as you can. So when comparing values, always use strict equality
with the three equal signs,
*** Truthy and Fasle
All JS value have an inherent truthyness or falsyness about them
- False values:
  - false
  - 0
  - "" (empty string)
  - null
  - undefined
  - NaN
- Every thing else is =TRUETY !=
  
*** 14. Truthy and Falsy Values
   :PROPERTIES:
   :CUSTOM_ID: truthy-and-falsy-values
   :END:

#+BEGIN_SRC js
    // In javascript there are 5 falsy values: 0, '', undefined, null, NaN
    console.log(Boolean(0)); // output: false
    console.log(Boolean(undefined)); // output: false
    console.log(Boolean('Jonas')); // output: true
    console.log(Boolean({})); // output: true
    console.log(Boolean('')); // output:  false

    const money = 100;
    if (money) {
      console.log("Don't spend it all ;)");
    } else {
      console.log('You should get a job!');
    }

    let height = 0; 
    if (height) { 
      console.log('YAY! Height is defined');
    } else {
      console.log('Height is UNDEFINED'); // this will be the ouput because 0 is a falsy value. But this is a bug because we have defined height as 0. We can fix this using logical operators.
    }
#+END_SRC

So in practice, the conversion to boolean is always implicit, not
explicit, or in other words is always typed coercion that JavaScript
does automatically behind the scenes.

But when exactly does JavaScript do type coercion to booleans? Well, it
happens in two scenarios. First, when using logical operators, and
Second in logical context, like for example, in the condition of an if
else statement.

*** 8. Operator Precedence
   :PROPERTIES:
   :CUSTOM_ID: operator-precedence
   :END:

#+BEGIN_SRC js
    const now = 2037;
    const ageXoraus = now - 1991;
    const ageSarah = now - 2018;

    console.log(now - 1991 > now - 2018);

    let x, y;

    x = y = 25 - 10 - 5; // Output: x = y = 10, x = 10 - Assignment works from right to left

    console.log(x, y);

    const averageAge = (ageXoraus + ageSarah) 2;

    console.log(ageXoraus, ageSarah, averageAge);
#+END_SRC

*** 20. The Conditional (Ternary) Operator

#+BEGIN_SRC js
    const age = 23;
    // age >= 18 ? console.log('I like to drink wine 🍷') : console.log('I like to drink water 💧');

    const drink = age >= 18 ? 'Sharbat-e-Jaam 🍷' : 'water 💧';
    console.log(drink);

    let drink2;
    if (age >= 18) {
      drink2 = 'Sharbat-e-Jaam 🍷';
    } else {
      drink2 = 'water 💧';
    }
    console.log(drink2);

    console.log(`I like to drink ${age >= 18 ? 'Sharbat-e-Jaam 🍷' : 'water 💧'}`);
#+END_SRC

*** 16. Logical Operators
 Different Logical Operator
- AND (=&&=)
- OR  (=||=)
- NOT (=!=)
    
#+begin_src js
2 < 3 && 10 > 5 ; // true
2 < 3 || 10 > 5 ; // true
2 > 3 || 10 < 5 ; // true
!(2>3);   // true

#+end_src
  
#+BEGIN_SRC js
    const hasDriversLicense = true; // A
    const hasGoodVision = true; // B

    console.log(hasDriversLicense && hasGoodVision); // output: true
    console.log(hasDriversLicense || hasGoodVision); // output: true
    console.log(!hasDriversLicense); // output: false

    // if (hasDriversLicense && hasGoodVision) {
    //   console.log('Sarah is able to drive!');
    // } else {
    //   console.log('Someone else should drive...');
    // }

    const isTired = false; // C
    console.log(hasDriversLicense && hasGoodVision && isTired); output: false

    if (hasDriversLicense && hasGoodVision && !isTired) {
      console.log('Sarah is able to drive!'); 
    } else {
      console.log('Someone else should drive...');
    }
    // output: Sarah is able to drive! 
#+END_SRC

The NOT operator actually has proceedings over the OR and AND operators.

** 9. Coding Challenge ##1
Mark and John are trying to compare their BMI (Body Mass Index), which
is calculated using the formula: BMI = mass / height ** 2 = mass /
(height * height). (mass in kg and height in meter).

1. Store Mark's and John's mass and height in variables
2. Calculate both their BMIs using the formula (you can even implement
   both versions)
3. Create a boolean variable 'markHigherBMI' containing information
   about whether Mark has a higher BMI than John.

- TEST DATA 1: Marks weights 78 kg and is 1.69 m tall. John weights 92
  kg and is 1.95 m tall.
- TEST DATA 2: Marks weights 95 kg and is 1.88 m tall. John weights 85
  kg and is 1.76 m tall.

*My Solution*

#+BEGIN_SRC js
    const markMass = 78;
    const markHeight = 1.69;

    const johnMass = 92;
    const johnHeight = 1.95;

    function calculateBMI(mass, height) {
        let BMI;
        BMI = mass / height ** 2;
        return BMI
    }

    const markBMI = calculateBMI(markMass,markHeight);
    const johnBMI = calculateBMI(johnMass, johnHeight);
    const markHigherBMI =  markBMI > johnBMI
    console.log(markBMI)
    console.log(johnBMI)
    console.log(markHigherBMI)
#+END_SRC

*Solution by xoraus*

#+BEGIN_SRC js
    const massMark = 78;
    const heightMark = 1.69;

    const massJohn = 92;
    const heightJohn = 1.95;

    const massMark = 95;
    const heightMark = 1.88;

    const massJohn = 85;
    const heightJohn = 1.76;

    const BMIMark = massMark heightMark ** 2;
    const BMIJohn = massJohn (heightJohn * heightJohn);

    const markHigherBMI = BMIMark > BMIJohn;

    console.log(BMIMark, BMIJohn, markHigherBMI);
#+END_SRC

## 10. Strings and Template Literals

#+BEGIN_SRC js
    const firstName = 'xoraus';
    const job = 'teacher';

    const birthYear = 1991;
    const year = 2037;

    const xoraus = "I'm " + firstName + ', a ' + (year - birthYear) + ' year old ' + job + '!'; // concept of type coercion

    console.log(xoraus);

    const xorausNew = `I'm ${firstName}, a ${year - birthYear} year old ${job}!`; // one of most used ES6 Feature :)

    console.log(xorausNew);

    console.log(`Just a regular string...`);
      
    console.log('String with \n\
    multiple \n\
    lines');

    console.log(`String
    multiple
    lines`);
#+END_SRC

* IF Else Statements
#+BEGIN_SRC js
const age = 15;
if (age >= 18) {
  console.log('Sarah can start driving license 🚗');
} else {
const yearsLeft = 18 - age;
  console.log(`Sarah is too young. Wait another ${yearsLeft} years :)`);
}

const birthYear = 2012;

let century;
if (birthYear <= 2000) {
      century = 20;
}
else {
   century = 21;
  }
console.log(century);
#+END_SRC
*** 12. Coding Challenge ##2


Use the BMI example from Challenge ##1, and the code you already wrote,
and improve it:

1. Print a nice output to the console, saying who has the higher BMI.
   The message can be either "Mark's BMI is higher than John's!" or
   "John's BMI is higher than Mark's!"
2. Use a template literal to include the BMI values in the outputs.
   Example: "Mark's BMI (28.3) is higher than John's (23.9)!"

*My Solution*

#+BEGIN_SRC js
    const markMass = 78;
    const markHeight = 1.69;

    const johnMass = 92;
    const johnHeight = 1.95;

    function calculateBMI(mass, height) {
        let BMI;
        BMI = mass / height ** 2;
        return BMI
    }

    const markBMI = calculateBMI(markMass,markHeight);
    const johnBMI = calculateBMI(johnMass, johnHeight);

    // console.log(`BMI of Mark is ${markBMI}`)
    // console.log(`BMI of John is ${johnBMI}`)
    // console.log(`Does Mark has higher BMI - ${markHigherBMI}`)

    if (markBMI > johnBMI) {
        console.log(`Mark's BMI (${markBMI}) is higher than John's (${johnBMI})!`)
    } else {
        console.log(`John's BMI (${johnBMI}) is higher than Marks's (${markBMI})!`)
    }
#+END_SRC

*Another Solution*

#+BEGIN_SRC js
    const massMark = 78;
    const heightMark = 1.69;

    const massJohn = 92;
    const heightJohn = 1.95;


    const massMark = 95;
    const heightMark = 1.88;

    const massJohn = 85;
    const heightJohn = 1.76;

    const BMIMark = massMark heightMark ** 2;
    const BMIJohn = massJohn (heightJohn * heightJohn);

    console.log(BMIMark, BMIJohn);

    if (BMIMark > BMIJohn) {
        console.log(`Mark's BMI (${BMIMark}) is higher than John's (${BMIJohn})!`)
    } else {
        console.log(`John's BMI (${BMIJohn}) is higher than Marks's (${BMIMark})!`)
    }
#+END_SRC
** IF Elseif Statement
#+begin_src js
let dayOfWeek = "Monday";

if (dayOfWeek == 'Monday'){
    console.log("UGHH I HATE Monday")
}else if (dayOfWeek ==='SATURDAYS!')
   console.log("YHhh i love saturdays")
}else{
   console.log("to")}
#+end_src
** 17. Coding Challenge ##3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

There are two gymnastics teams, Dolphins and Koalas. They compete
against each other 3 times. The winner with the highest average score
wins the a trophy! 1. Calculate the average score for each team, using
the test data below 2. Compare the team's average scores to determine
the winner of the competition, and print it to the console. Don't forget
that there can be a draw, so test for that as well (draw means they have
the same average score). 3. BONUS 1: Include a requirement for a minimum
score of 100. With this rule, a team only wins if it has a higher score
than the other team, and the same time a score of at least 100 points.
HINT: Use a logical operator to test for minimum score, as well as
multiple else-if blocks 😉 4. BONUS 2: Minimum score also applies to a
draw! So a draw only happens when both teams have the same score and
both have a score greater or equal 100 points. Otherwise, no team wins
the trophy.

TEST DATA: Dolphins score 96, 108 and 89. Koalas score 88, 91 and 110
TEST DATA BONUS 1: Dolphins score 97, 112 and 101. Koalas score 109, 95
and 123 TEST DATA BONUS 2: Dolphins score 97, 112 and 101. Koalas score
109, 95 and 106

*My Solution*

#+BEGIN_SRC js
    const scoreDolphins = (96 + 108 + 89) / 3;
    const scoreKoalas = (88 + 91 + 110) / 3;

    console.log(scoreDolphins, scoreKoalas);

    if (scoreDolphins > scoreKoalas) {
        console.log('Dolphins win the trophy 🏆');
    } else if (scoreKoalas > scoreDolphins) {
        console.log('Koalas win the trophy 🏆');
    } else if (scoreDolphins === scoreKoalas) {
        console.log('Both win the trophy!');
    }
#+END_SRC

BONUS 1

#+BEGIN_SRC js
    const scoreDolphins = (97 + 112 + 80) 3;
    const scoreKoalas = (109 + 95 + 50) 3;

    console.log(scoreDolphins, scoreKoalas);

    if (scoreDolphins > scoreKoalas && scoreDolphins >= 100) {
        console.log('Dolphins win the trophy 🏆');
    } else if (scoreKoalas > scoreDolphins && scoreKoalas >= 100) {
        console.log('Koalas win the trophy 🏆');
    } else if (scoreDolphins === scoreKoalas && scoreDolphins >= 100 && scoreKoalas >= 100) {
    console.log('Both win the trophy!');
    } else {
    console.log('No one wins the trophy 😭');
    }
#+END_SRC

* Switch Statement
#+BEGIN_SRC js
    const day = 'friday';

    switch (day) {
      case 'monday': // day === 'monday'
        console.log('Plan course structure');
        console.log('Go to coding meetup');
        break;
      case 'tuesday':
        console.log('Prepare theory videos');
        break;
      case 'wednesday':
      case 'thursday':
        console.log('Write code examples');
        break;
      case 'friday':
        console.log('Record videos');
        break;
      case 'saturday':
      case 'sunday':
        console.log('Enjoy the weekend :D');
        break;
      default:
        console.log('Not a valid day!');
    }

#+END_SRC

implement switch in if-elseif
#+begin_src js
    if (day === 'monday') {
      console.log('Plan course structure');
      console.log('Go to coding meetup');
    } else if (day === 'tuesday') {
      console.log('Prepare theory videos');
    } else if (day === 'wednesday' || day === 'thursday') {
      console.log('Write code examples');
    } else if (day === 'friday') {
      console.log('Record videos');
    } else if (day === 'saturday' || day === 'sunday') {
      console.log('Enjoy the weekend :D');
    } else {
      console.log('Not a valid day!');
    }
#+end_src

* Introduction to Arrays
Array :  collections of Object
#+begin_src
// Empty Array
let student = [];

// Array of Strings
let colors = ['red'. 'orange', 'yellow'];

// Array of Numbers
let lottoNums = [19,22,56,12,51];

// Mixed Array
let stuff = [true, 78, 'cat', null];
#+end_src

*** Example 
#+BEGIN_SRC js
    const friend1 = 'Al-Farabi';
    const friend2 = 'Al-Ghazali';
    const friend3 = 'Al- Razi';

    const friends = ['Al-Farabi', 'Al-Ghazali', 'Al- Razi'];
    console.log(friends);

    const y = new Array(1991, 1984, 2008, 2020);

    console.log(friends[0]); // output: Al-Farabi
    console.log(friends[2]); // output: Al- Razi

    console.log(friends.length); // outpt: 3
    console.log(friends[friends.length - 1]); // output: Peter

    friends[3] = 'Al-Qalbi';
    console.log(friends); // output: Al-Farabi, Al-Ghazali, Al- Razi
    // friends = ['Bob', 'Alice']

    const firstName = 'Jordan';
    const xoraus = [firstName, 'Ahmed', 2047 - 1997, 'teacher', friends];
    console.log(xoraus);
    console.log(xoraus.length);

    // Exercise
    const calcAge = function (birthYeah) {
      return 2047 - birthYeah;
    }
    const years = [1990, 1967, 2002, 2010, 2018];

    const age1 = calcAge(years[0]);
    const age2 = calcAge(years[1]);
    const age3 = calcAge(years[years.length - 1]);
    console.log(age1, age2, age3);

    const ages = [calcAge(years[0]), calcAge(years[1]), calcAge(years[years.length - 1])];
    console.log(ages);
#+END_SRC

** 40. Basic Array Operations (Methods)
https://www.w3schools.com/js/js_array_methods.asp \\
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array 

#+BEGIN_SRC js
    const friends = ['Al-Farabi', 'Al-Ghazali', 'Al- Razi'];
    // const friends = ['Michael', 'Steven', 'Peter'];

    // Add elements
    const newLength = friends.push('xoraus');
    console.log(friends);
    console.log(newLength);

    friends.unshift('Jordan');
    console.log(friends);

    // Remove elements
    friends.pop(); // Last
    const popped = friends.pop();
    console.log(popped);
    console.log(friends);

    friends.shift(); // First
    console.log(friends);

    console.log(friends.indexOf('Al-Farabi'));
    console.log(friends.indexOf('Al-Ghazali'));

    friends.push(25);
    console.log(friends.includes('Al- Razi'));
    console.log(friends.includes('Ahmed'));
    console.log(friends.includes(25));

    if (friends.includes('Al-Ghazali')) {
      console.log('You have a friend called Al-Ghazali');
    }
#+END_SRC

** 41. Coding Challenge ##2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

Ahmed is still building his tip calculator, using the same rules as
before: Tip 15% of the bill if the bill value is between 50 and 300, and
if the value is different, the tip is 20%.

1. Write a function 'calcTip' that takes any bill value as an input and
   returns the corresponding tip, calculated based on the rules above
   (you can check out the code from first tip calculator challenge if
   you need to). Use the function type you like the most. Test the
   function using a bill value of 100.
2. And now let's use arrays! So create an array 'bills' containing the
   test data below.
3. Create an array 'tips' containing the tip value for each bill,
   calculated from the function you created before.
4. BONUS: Create an array 'total' containing the total values, so the
   bill + tip.

TEST DATA: 125, 555 and 44

HINT: Remember that an array needs a value in each position, and that
value can actually be the returned value of a function! So you can just
call a function as array values (so don't store the tip values in
separate variables first, but right in the new array)

#+BEGIN_SRC js
    const calcTip = function (bill) {
      return bill >= 50 && bill <= 300 ? bill * 0.15 : bill * 0.2;
    }
    // const calcTip = bill => bill >= 50 && bill <= 300 ? bill * 0.15 : bill * 0.2;

    const bills = [125, 555, 44];
    const tips = [calcTip(bills[0]), calcTip(bills[1]), calcTip(bills[2])];
    const totals = [bills[0] + tips[0], bills[1] + tips[1], bills[2] + tips[2]];

    console.log(bills, tips, totals);
#+END_SRC

* Introduction to Objects
   :PROPERTIES:
   :CUSTOM_ID: introduction-to-objects
   :END:

#+BEGIN_SRC js
    const xorausArray = [
      'Jordan',
      'Ahmed',
      2027 - 1997,
      'teacher',
      ['Ali', 'Khan', 'Sal']
    ];

    const xoraus = {
      firstName: 'Jordan',
      lastName: 'Ahmed',
      age: 2027 - 1997,
      job: 'teacher',
      friends: ['Ali', 'K', 'Sal']
    };
#+END_SRC

** 43. Dot vs.  Bracket Notation
 

#+BEGIN_SRC js
    const xoraus = {
      firstName: 'Jordan',
      lastName: 'Ahmed',
      age: 2027 - 1997,
      job: 'teacher',
      friends: ['Plato', 'Aristotle', 'Socrates']
    };
    console.log(xoraus); 

    console.log(xoraus.lastName); // output: Ahmed
    console.log(xoraus['lastName']); // output: Ahmed

    const nameKey = 'Name';
    console.log(xoraus['first' + nameKey]); // output: Jordan
    console.log(xoraus['last' + nameKey]); // output: Ahmed

    // console.log(xoraus.'last' + nameKey) // this will not work

    const interestedIn = prompt('What do you want to know about Jordan? Choose between firstName, lastName, age, job, and friends');

    if (xoraus[interestedIn]) {
      console.log(xoraus[interestedIn]);
    } else {
      console.log('Wrong request! Choose between firstName, lastName, age, job, and friends');
    }

    xoraus.location = 'India';
    xoraus['twitter'] = '@xoraus';
    console.log(xoraus);

    // Challenge
    // "Jonas has 3 friends, and his best friend is called Aristotle"
    console.log(`${xoraus.firstName} has ${xoraus.friends.length} friends, and his best friend is called ${xoraus.friends[1]}`);
#+END_SRC

- when we need to first compute the property name, then we have to use
  the bracket notation otherwise use dot notation.
- we get *undefined * when when we try to access a property on an object
  that does not exist.

** 44. Object Methods
   :PROPERTIES:
   :CUSTOM_ID: object-methods
   :END:

#+BEGIN_SRC js
    const xoraus = {
      firstName: 'Jordan',
      lastName: 'Ahmed',
      birthYeah: 1997,
      job: 'Programmer',
      friends: ['Socrates', 'Plato', 'Aristotle'],
      hasDriversLicense: true,

      // calcAge: function (birthYeah) {
      //   return 2037 - birthYeah;
      // }

      // calcAge: function () {
      //   // console.log(this);
      //   return 2027 - this.birthYeah;
      // }

      calcAge: function () {
        this.age = 2027 - this.birthYeah;
        return this.age;
      },

      getSummary: function () {
        return `${this.firstName} is a ${this.calcAge()}-year old ${xoraus.job}, and he has ${this.hasDriversLicense ? 'a' : 'no'} driver's license.`
      }
    };

    console.log(xoraus.calcAge());

    console.log(xoraus.age);
    console.log(xoraus.age);
    console.log(xoraus.age);

    // Challenge
    // "Jonas is a 30-year old programmer, and he has a driver's license"
    console.log(xoraus.getSummary());
#+END_SRC

- Any function that is attached to an object is called a method.

** 45. Coding Challenge ##3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

Let's go back to Mark and John comparing their BMIs! This time, let's
use objects to implement the calculations! Remember: BMI = mass / height
** 2 = mass / (height * height). (mass in kg and height in meter)

1. For each of them, create an object with properties for their full
   name, mass, and height (Mark Miller and John Smith)
2. Create a 'calcBMI' method on each object to calculate the BMI (the
   same method on both objects). Store the BMI value to a property, and
   also return it from the method.
3. Log to the console who has the higher BMI, together with the full
   name and the respective BMI. Example: "John Smith's BMI (28.3) is
   higher than Mark Miller's (23.9)!"

TEST DATA: Marks weights 78 kg and is 1.69 m tall. John weights 92 kg
and is 1.95 m tall.

#+BEGIN_SRC js
    const mark = {
      fullName: 'Mark Miller',
      mass: 78,
      height: 1.69,
      calcBMI: function () {
        this.bmi = this.mass / this.height ** 2;
        return this.bmi;
      }
    };

    const john = {
      fullName: 'John Smith',
      mass: 92,
      height: 1.95,
      calcBMI: function () {
        this.bmi = this.mass / this.height ** 2;
        return this.bmi;
      }
    };

    mark.calcBMI();
    john.calcBMI();

    console.log(mark.bmi, john.bmi);

    // "John Smith's BMI (28.3) is higher than Mark Miller's (23.9)!"

    if (mark.bmi > john.bmi) {
      console.log(`${mark.fullName}'s BMI (${mark.bmi}) is higher than ${john.fullName}'s BMI (${john.bmi})`)
    } else if (john.bmi > mark.bmi) {
      console.log(`${john.fullName}'s BMI (${john.bmi}) is higher than ${mark.fullName}'s BMI (${mark.bmi})`)
    }
#+END_SRC

* Loops
Multiple Types:
- for Loop
- while Loop
- for of Loop
- for in Loop
#+begin_src js
//  for Loop
for ([initialExpression]; [condition]; [incrementExpression] ){
    Statment}

for (let i=1; i<=10; i++){
    console.log(i);
}

for (let rep = 1; rep <= 30; rep++) {
   console.log(`Lifting weights repetition ${rep} 🏋️‍♀️`);
}

const animals =['lions', 'tigers', 'bears'];

for (let i =0; i< animals.lenght; i++){
    console.log(i, animals[i]);
  }

// While Loop
let num = 9;
while(num < 10){
  console.log(num)
  n--;
}


// for of Loop 

for (let VARIABLE of ARRAY/OBJECT ){
 statement
}

const num= [1,2,3,4,5];
for (let element of num){
    console.log(element)
}

const testScore= {keenan:80, damon:67, shawn: 77}

for (let person in testScores){
  console.log(person, testScores[person]);
}

// Other method :
// Object.keys(testScores) >>> ["keenan", "damon", "kim", "shawn", "marlon", "dwayne"]
// Object.entries(testScores) >>> ["keenan",80],["damon", 67] .......

#+END_SRC

** Breaking and Continuing
#+BEGIN_SRC js
    const jonas = [
      'Jonas',
      'Schmedtmann',
      2037 - 1991,
      'teacher',
      ['Michael', 'Peter', 'Steven'],
      true
    ];
    const types = [];

    // console.log(jonas[0])
    // console.log(jonas[1])
    // ...
    // console.log(jonas[4])
    // jonas[5] does NOT exist

    for (let i = 0; i < jonas.length; i++) {
      // Reading from jonas array
      console.log(jonas[i], typeof jonas[i]);

      // Filling types array
      // types[i] = typeof jonas[i];
      types.push(typeof jonas[i]);
    }

    console.log(types);

    const years = [1991, 2007, 1969, 2020];
    const ages = [];

    for (let i = 0; i < years.length; i++) {
      ages.push(2037 - years[i]);
    }
    console.log(ages);

    // continue and break
    console.log('--- ONLY STRINGS ---')
    for (let i = 0; i < jonas.length; i++) {
      if (typeof jonas[i] !== 'string') continue;

      console.log(jonas[i], typeof jonas[i]);
    }

    console.log('--- BREAK WITH NUMBER ---')
    for (let i = 0; i < jonas.length; i++) {
      if (typeof jonas[i] === 'number') break;

      console.log(jonas[i], typeof jonas[i]);
    }
#+END_SRC

** Looping Backwards and Loops in Loops
   :PROPERTIES:
   :CUSTOM_ID: looping-backwards-and-loops-in-loops
   :END:

#+BEGIN_SRC js
    const jonas = [
      'Jonas',
      'Schmedtmann',
      2037 - 1991,
      'teacher',
      ['Michael', 'Peter', 'Steven'],
      true
    ];

    // 0, 1, ..., 4
    // 4, 3, ..., 0

    for (let i = jonas.length - 1; i >= 0; i--) {
      console.log(i, jonas[i]);
    }

    for (let exercise = 1; exercise < 4; exercise++) {
      console.log(`-------- Starting exercise ${exercise}`);

      for (let rep = 1; rep < 6; rep++) {
        console.log(`Exercise ${exercise}: Lifting weight repetition ${rep} 🏋️‍♀️`);
      }
    }
#+END_SRC

** While Loop
   :PROPERTIES:
   :CUSTOM_ID: the-while-loop
   :END:

#+BEGIN_SRC js
    for (let rep = 1; rep <= 10; rep++) {
      console.log(`Lifting weights repetition ${rep} 🏋️‍♀️`);
    }

    let rep = 1;
    while (rep <= 10) {
      // console.log(`WHILE: Lifting weights repetition ${rep} 🏋️‍♀️`);
      rep++;
    }

    let dice = Math.trunc(Math.random() * 6) + 1;

    while (dice !== 6) {
      console.log(`You rolled a ${dice}`);
      dice = Math.trunc(Math.random() * 6) + 1;
      if (dice === 6) console.log('Loop is about to end...');
    }
#+END_SRC

** Coding Challenge ##4
   

Let's improve Steven's tip calculator even more, this time using loops!
1. Create an array 'bills' containing all 10 test bill values 2. Create
empty arrays for the tips and the totals ('tips' and 'totals') 3. Use
the 'calcTip' function we wrote before (no need to repeat) to calculate
tips and total values (bill + tip) for every bill value in the bills
array. Use a for loop to perform the 10 calculations!

TEST DATA: 22, 295, 176, 440, 37, 105, 10, 1100, 86 and 52

HINT: Call calcTip in the loop and use the push method to add values to
the tips and totals arrays 😉

1. BONUS: Write a function 'calcAverage' which takes an array called
   'arr' as an argument. This function calculates the average of all
   numbers in the given array. This is a DIFFICULT challenge (we haven't
   done this before)! Here is how to solve it: 4.1. First, you will need
   to add up all values in the array. To do the addition, start by
   creating a variable 'sum' that starts at 0. Then loop over the array
   using a for loop. In each iteration, add the current value to the
   'sum' variable. This way, by the end of the loop, you have all values
   added together 4.2. To calculate the average, divide the sum you
   calculated before by the length of the array (because that's the
   number of elements) 4.3. Call the function with the 'totals' array

#+BEGIN_SRC js
    const calcTip = function (bill) {
      return bill >= 50 && bill <= 300 ? bill * 0.15 : bill * 0.2;
    }
    const bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52];
    const tips = [];
    const totals = [];

    for (let i = 0; i < bills.length; i++) {
      const tip = calcTip(bills[i]);
      tips.push(tip);
      totals.push(tip + bills[i]);
    }
    console.log(bills, tips, totals);

    const calcAverage = function (arr) {
      let sum = 0;
      for (let i = 0; i < arr.length; i++) {
        // sum = sum + arr[i];
        sum += arr[i];
      }
      return sum / arr.length;
    }
    console.log(calcAverage([2, 3, 7]));
    console.log(calcAverage(totals));
    console.log(calcAverage(tips));
#+END_SRC
* Functions
- Define Function
- Arguments
- Return Values
  
#+BEGIN_SRC js
    function logger() {
      console.log('My name is xoraus');
    }

    // calling / running / invoking function
    logger(); // output: My name is xoraus
    logger(); // output: My name is xoraus
    logger(); // output: My name is xoraus

    function fruitProcessor(apples, oranges) {
      const juice = `Juice with ${apples} apples and ${oranges} oranges.`;
      return juice;
    }

    const appleJuice = fruitProcessor(10, 5);
    console.log(appleJuice);

    const appleOrangeJuice = fruitProcessor(4, 8);
    console.log(appleOrangeJuice);

    const num = Number('6833');
#+END_SRC

Clean Code - *DRY Principle* that is /Don't Repeat Yourself/
** Argument, Muti-Argument
** Return Value
** Function Scope
** Block Scope
** Lexical SCOPE
#+begin_src 
function banckrobbdry(){
   heros = ['Spider Man' , "Super man", "Cat woman"];
   function cryforHelp(){
      for( hero of heros){
          console.log("Help me ${hero}");
      }
  }
 cryforHelp();
}

bankrobbdry(); 
#+end_src
** Function Expressions
#+begin_src 
const add = function(x,y) {
  return x+ y;
}

#+end_src
** Higher Order Function
#+begin_src 
function callTwice(fun){
   func();
   func();
}

function rollDie(){
  const roll= Math.floor(Math.rand()*6 +1;
  console.log(roll);
}
callTwice(rollDie);

#+end_src
** Returing Fuction
#+begin_src js
function makeMysteryFunc(){
  const rand=Math.random();
  if (rand > 0.5){
   return function(){
     console.log("rand is greater than 0.5")
  }
  else{
   return function{
   console.log("rand is less than 0.5")
  }
}



# Return with arguemnt

function isInRange(min,max){
  return functin(num){
    return num >=min && num <=max;
   }
}

isChild = isInRange(0,18);
isChild(40) // >>> false
isChild(17) // >>> true
isAdult = isInRange(19,74);
isAdult(8) // >>> false
isAdult(20) // >>> true
isPass = isInRange(40,100);
isPass(40)  // >>> true
isPass(39.999999)  // >> false
isFail = isInRange(0,39.9999999999);
isFail(40) // >>> false

#+end_src
** Method
#+begin_src js
const myMath = {
  PI: 3.14159;
  square: function(num){
      return num*num;
  }
  cube:function(num){
     return num**3
  }
}
myMath // >>> {PI:3.14159, square:f, cube:f}
myMath.PI // 3.14159
myMath.square // f(num) {return num* num;}
myMath.square()  // NaN
myMath.square(4) // 16
myMath.cube(2) // 8
#+end_src
** "This" keyword
#+begin_src 
const person = {
  first: "Robert"
  last: 'Herjavec',
  fullName(){
    return `${this.first} ${this.last}`
  }
}
person.fullName(); //
person.fullName(); // >> Robert Herjavec

#+end_src
**  Declarations vs Expressions
#+BEGIN_SRC js
    // Function declaration
    function calcAge1(birthYeah) {
      return 2047 - birthYeah;
    }
    const age1 = calcAge1(1997);
    // Function expression
    const calcAge2 = function (birthYeah) { // Anonymous Functions - this function is an expression. Expressions produce value.
      return 2047 - birthYeah;
    }
    const age2 = calcAge2(1997);

    console.log(age1, age2);
#+END_SRC

- The parameter is a kind of placeholder in the function and the
  argument is then the actual value that we use to fill in that
  placeholder that is the parameter.
- In Javascript functions are just values

** 35. Arrow Functions
   :PROPERTIES:
   :CUSTOM_ID: arrow-functions
   :END:

#+BEGIN_SRC js
    const calcAge3 = birthYeah => 2047 - birthYeah;
    const age3 = calcAge3(1997);
    console.log(age3);

    const yearsUntilRetirement = (birthYeah, firstName) => {
      const age = 2047 - birthYeah;
      const retirement = 65 - age;
      // return retirement;
      return `${firstName} retires in ${retirement} years`;
    }

    console.log(yearsUntilRetirement(1997, 'xoraus')); console.log(yearsUntilRetirement(2005, 'ahmed'));
#+END_SRC
** Arrow Function with Implicit Return
#+begin_src 
const rollDie = () => (
   Math.floor(Math.random() *6) +1
)

const add = (x,y) => (x+y )
#+end_src

** Arrow Function wrapup
#+begin_src js
const movies = [{ title: 'Amadeus', score:99}, {title:'Stand By Me', score: 85},]

movies.map(function(movie){
    return `${movie.title} -${movie.score/10}`
}

// using arrow function
const newMovies= movies.map(movie => `${movie.title} - ${movie.score/10}`)
#+end_src

** setTimeout and setInterval
#+begin_src 
// simillar to sleep(4sec)

setTimeout(
    () = {console.log("HELLO!!!")}, 3000) // execute after 3 sec

// Loop at Intervel

cost id = setInterval(
          () => { console.log(Math.random())}, 2000 );

clearInterval(id) // stop the function execution

#+end_src

** 36. Functions Calling Other Functions
#+BEGIN_SRC js
    function cutFruitPieces(fruit) {
      return fruit * 4;
    }

    function fruitProcessor(apples, oranges) {
      const applePieces = cutFruitPieces(apples);
      const orangePieces = cutFruitPieces(oranges);

      const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
      return juice;
    }
    console.log(fruitProcessor(2, 3));
#+END_SRC

- Arrow functions do not get the *this Keyword*

** 37. Reviewing Functions
   :PROPERTIES:
   :CUSTOM_ID: reviewing-functions
   :END:

#+BEGIN_SRC js
    const calcAge = function (birthYeah) {
      return 2047 - birthYeah;
    }

    const yearsUntilRetirement = function (birthYeah, firstName) {
      const age = calcAge(birthYeah);
      const retirement = 65 - age;

      if (retirement > 0) {
        console.log(`${firstName} retires in ${retirement} years`);
        return retirement;
      } else {
        console.log(`${firstName} has already retired 🎉`);
        return -1;
      }
    }

    console.log(yearsUntilRetirement(1997, 'xoraus'));
    console.log(yearsUntilRetirement(1980, 'Jordan'));
#+END_SRC

# [[2. JavaScript Fundamentals Part 2-20220824162950.png]]

** 38. Coding Challenge 1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

Back to the two gymnastics teams, the Dolphins and the Koalas! There is
a new gymnastics discipline, which works differently. Each team competes
3 times, and then the average of the 3 scores is calculated (so one
average score per team). A team ONLY wins if it has at least DOUBLE the
average score of the other team. Otherwise, no team wins!

1. Create an arrow function 'calcAverage' to calculate the average of 3
   scores
2. Use the function to calculate the average for both teams
3. Create a function 'checkWinner' that takes the average score of each
   team as parameters ('avgDolhins' and 'avgKoalas'), and then logs the
   winner to the console, together with the victory points, according to
   the rule above. Example: "Koalas win (30 vs. 13)".
4. Use the 'checkWinner' function to determine the winner for both DATA
   1 and DATA 2.
5. Ignore draws this time.

TEST DATA 1: Dolphins score 44, 23 and 71. Koalas score 65, 54 and 49
TEST DATA 2: Dolphins score 85, 54 and 41. Koalas score 23, 34 and 27

HINT: To calculate average of 3 values, add them all together and divide
by 3 HINT: To check if number A is at least double number B, check for A
>= 2 * B. Apply this to the team's average scores 😉

#+BEGIN_SRC js
    calcAverage = (scoreA, scoreB, scoreC) => (scoreA, scoreB, scoreC) / 3

    const teamDolphinAvg = Math.floor(calcAverage(85,54,41));
    const teamKoalaAvg = Math.floor(calcAverage(23,34,27));

    console.log(teamDolphinAvg,teamKoalaAvg)

    function checkWinner(teamDolphinAvg,teamKoalaAvg) {
     if (teamDolphinAvg >= 2 * teamKoalaAvg) {
         console.log(`Dolphins win 🏆 ${teamDolphinAvg} vs ${teamKoalaAvg}`)
     } else if (teamKoalaAvg >= 2 * teamDolphinAvg) {
         console.log(`Koalas win 🏆 ${teamKoalaAvg} vs. ${teamDolphinAvg}`)
     } else {
         console.log(`No body won :(`)
     }
    }

    checkWinner(800,351)

    // Test 2
    scoreDolphins = calcAverage(85, 54, 41);
    scoreKoalas = calcAverage(23, 34, 27);
    console.log(scoreDolphins, scoreKoalas);
    checkWinner(scoreDolphins, scoreKoalas);
#+END_SRC

* Working With Arrays
** Simple Array Methods
   :PROPERTIES:
   :CUSTOM_ID: simple-array-methods
   :END:

*** Array Declaration
    :PROPERTIES:
    :CUSTOM_ID: array-declaration
    :END:

#+BEGIN_SRC js
    let dogs = ["Bulldog", "Beagle", "Labrador"]; 
    let dogs = new Array("Bulldog", "Beagle", "Labrador");  // declaration

    alert(dogs[1]);             // access value at index, first item being [0]
    dogs[0] = "Bull Terier";    // change the first item

    for (let i = 0; i < dogs.length; i++) {     // parsing with array.length
    console.log(dogs[i]);
    }
#+END_SRC

*** Methods
    :PROPERTIES:
    :CUSTOM_ID: methods
    :END:

#+BEGIN_SRC js
    dogs.toString();                        // convert to string: results "Bulldog,Beagle,Labrador"
    dogs.join(" * ");                       // join: "Bulldog * Beagle * Labrador"
    dogs.pop();                             // remove last element
    dogs.push("Chihuahua");                 // add new element to the end
    dogs[dogs.length] = "Chihuahua";        // the same as push
    dogs.shift();                           // remove first element
    dogs.unshift("Chihuahua");              // add new element to the beginning
    delete dogs[0];                         // change element to undefined (not recommended)
    dogs.splice(2, 0, "Pug", "Boxer");      // add elements (where, how many to remove, element list)
    let animals = dogs.concat(cats,birds);  // join two arrays (dogs followed by cats and birds)
    dogs.slice(1,4);                        // elements from [1] to [4-1]
    dogs.sort();                            // sort string alphabetically
    dogs.reverse();                         // sort string in descending order
    x.sort(function(a, b){return a - b});   // numeric sort
    x.sort(function(a, b){return b - a});   // numeric descending sort
    highest = x[0];                         // first item in sorted array is the lowest (or highest) value
    x.sort(function(a, b){return 0.5 - Math.random()});     // random order sort
#+END_SRC

- *pop():* This method is used for removing the last element of an
  array.
- *push():* This method is used for adding a new element at the very end
  of an array.
- *concat():* This method is used for joining various arrays into a
  single array.
- *reverse():* This method is used for reversing the order of the
  elements in an array.
- *shift():* This method is used for removing the first element of an
  array.
- *slice():* This method is used for pulling a copy of a part of an
  array into a new array.
- *splice()*: This method is used for adding elements in a particular
  way and position.
- *toString():* This method is used for converting the array elements
  into strings.
- *unshift():* This method is used for adding new elements at the
  beginning of the array.
- *valueOf():* This method is used for returning the primitive value of
  the given object.
- *indexOf():* This method is used for returning the first index at
  which a given element is found in an array.
- *lastIndexOf():* This method is used for returning the final index at
  which a given element appears in an array.
- *join():* This method is used for combining elements of an array into
  one single string and then returning it.
- *sort():* This method is used for sorting the array elements based on
  some condition.
- concat, copyWithin, every, fill, filter, find, findIndex, forEach,
  indexOf, isArray, join, lastIndexOf, map, pop, push, reduce,
  reduceRight, reverse, shift, slice, some, sort, splice, toString,
  unshift, valueOf

#+BEGIN_SRC js
    /////////////////////////////////////////////////
    // Simple Array Methods
    let arr = ['a', 'b', 'c', 'd', 'e'];

    // SLICE
    console.log(arr.slice(2));
    console.log(arr.slice(2, 4));
    console.log(arr.slice(-2));
    console.log(arr.slice(-1));
    console.log(arr.slice(1, -2));
    console.log(arr.slice());
    console.log([...arr]);

    // SPLICE
    // console.log(arr.splice(2));
    arr.splice(-1);
    console.log(arr);
    arr.splice(1, 2);
    console.log(arr);

    // REVERSE
    arr = ['a', 'b', 'c', 'd', 'e'];
    const arr2 = ['j', 'i', 'h', 'g', 'f'];
    console.log(arr2.reverse());
    console.log(arr2);

    // CONCAT
    const letters = arr.concat(arr2);
    console.log(letters);
    console.log([...arr, ...arr2]);

    // JOIN
    console.log(letters.join(' - '));
#+END_SRC

** The new at Method - ES-2022
   :PROPERTIES:
   :CUSTOM_ID: the-new-at-method---es-2022
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The new at Method
    const arr = [23, 11, 64];
    console.log(arr[0]);
    console.log(arr.at(0));

    // getting last array element
    console.log(arr[arr.length - 1]);
    console.log(arr.slice(-1)[0]);
    console.log(arr.at(-1));

    console.log('jonas'.at(0));
    console.log('jonas'.at(-1));
#+END_SRC

** Looping Arrays: forEach
   :PROPERTIES:
   :CUSTOM_ID: looping-arrays-foreach
   :END:

#+BEGIN_SRC js
    // Arrow function
    forEach((element) => { /* … */ })
    forEach((element, index) => { /* … */ })
    forEach((element, index, array) => { /* … */ })

    // Callback function
    forEach(callbackFn)
    forEach(callbackFn, thisArg)

    // Inline callback function
    forEach(function(element) { /* … */ })
    forEach(function(element, index) { /* … */ })
    forEach(function(element, index, array){ /* … */ })
    forEach(function(element, index, array) { /* … */ }, thisArg)
#+END_SRC

- *Note*: There is no way to stop or break a forEach() loop other than
  by throwing an exception. If you need such behavior, the forEach()
  method is the wrong tool.
- *Note*: forEach expects a synchronous function. forEach does not wait
  for promises. Make sure you are aware of the implications while using
  promises (or async functions) as forEach callback.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Looping Arrays: forEach
    const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

    // for (const movement of movements) {
    for (const [i, movement] of movements.entries()) {
      if (movement > 0) {
        console.log(`Movement ${i + 1}: You deposited ${movement}`);
      } else {
        console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);
      }
    }

    console.log('---- FOREACH ----');
    movements.forEach(function (mov, i, arr) {
      if (mov > 0) {
        console.log(`Movement ${i + 1}: You deposited ${mov}`);
      } else {
        console.log(`Movement ${i + 1}: You withdrew ${Math.abs(mov)}`);
      }
    });
    // 0: function(200)
    // 1: function(450)
    // 2: function(400)
    // ...
#+END_SRC

- *ForEach* exclusively belong to the royal family of Arrays. The
  forEach method was introduced with lineage to the prototypal
  inheritance of Array object! Needless to say, the forEach clause works
  only with those data structure which are Arrays. The method basically
  iterates over the elements of the array and executes a callback
  function [basically some executable function/ fun activity].
- *The for-of loop* is adequately new to the JS world and packs in
  super-powers! Voilaaaaaaa! The for-of loop creates a loop iterating
  over iterable member objects. The list is an extensive one such as
  Array, Map, Set, String, TypedArray etc

** forEach With Maps and Sets
   :PROPERTIES:
   :CUSTOM_ID: foreach-with-maps-and-sets
   :END:

- The *Map.forEach* method is used to loop over the map with the given
  function and executes the given function over each key-value pair.
- *Syntax:*

#+BEGIN_SRC js
    myMap.forEach(callback, value, key, thisArg)
#+END_SRC

- *Parameters:* This method accepts four parameters as mentioned above
  and described below:

  - *callback:* This is the function that executes on each function
    call.
  - *value:* This is the value for each iteration.
  - *key:* This is the key to reach iteration.
  - *thisArg:* This is the value to use as this when executing callback.

- *Returns:* It returns the undefined value.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // forEach With Maps and Sets
    // Map
    const currencies = new Map([
      ['USD', 'United States dollar'],
      ['EUR', 'Euro'],
      ['GBP', 'Pound sterling'],
    ]);

    currencies.forEach(function (value, key, map) {
      console.log(`${key}: ${value}`);
    });

    // Set
    const currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);
    console.log(currenciesUnique);
    currenciesUnique.forEach(function (value, _, map) {
      console.log(`${value}: ${value}`);
    });
#+END_SRC

** PROJECT: "Bankist" App
   :PROPERTIES:
   :CUSTOM_ID: project-bankist-app
   :END:

** Creating DOM Elements
   :PROPERTIES:
   :CUSTOM_ID: creating-dom-elements
   :END:

- Instead of working with global variables, start passing the data that
  function needs actually into that function.
- The *=insertAdjacentHTML()=* method of the =Element= interface parses
  the specified text as HTML or XML and inserts the resulting nodes into
  the DOM tree at a specified position.

#+BEGIN_SRC js
    // Syntax
    insertAdjacentHTML(position, text)
#+END_SRC

- The [[https://developer.mozilla.org/en-US/docs/Web/API/Element][=Element=]] property *=innerHTML=* gets
  or sets the HTML or XML markup contained within the element.
- To insert the HTML into the document rather than replace the contents
  of an element, use the
  method [[https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML][=insertAdjacentHTML()=]].

#+BEGIN_SRC js
    const displayMovements = function (movements) {
      containerMovements.innerHTML = '';
      movements.forEach(function (mov, i) {
        const type = mov > 0 ? 'deposit' : 'withdrawal';
        const html = `
        <div class="movements__row">
          <div class="movements__type movements__type--${type}">${
          i + 1
        } ${type}</div>
          <div class="movements__value">${mov}€</div>
        </div>
      `;
        containerMovements.insertAdjacentHTML('afterbegin', html);
      });
    };
    displayMovements(account1.movements);
    console.log(containerMovements.innerHTML);
#+END_SRC

** Coding Challenge #1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

Julia and Kate are doing a study on dogs. So each of them asked 5 dog
owners about their dog's age, and stored the data into an array (one
array for each). For now, they are just interested in knowing whether a
dog is an adult or a puppy. A dog is an adult if it is at least 3 years
old, and it's a puppy if it's less than 3 years old.

Create a function 'checkDogs', which accepts 2 arrays of dog's ages
('dogsJulia' and 'dogsKate'), and does the following things:

1. Julia found out that the owners of the FIRST and the LAST TWO dogs
   actually have cats, not dogs! So create a shallow copy of Julia's
   array, and remove the cat ages from that copied array (because it's a
   bad practice to mutate function parameters)
2. Create an array with both Julia's (corrected) and Kate's data
3. For each remaining dog, log to the console whether it's an adult
   ("Dog number 1 is an adult, and is 5 years old") or a puppy ("Dog
   number 2 is still a puppy 🐶")
4. Run the function for both test datasets

HINT: Use tools from all lectures in this section so far 😉

TEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
TEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]

#+BEGIN_SRC js
    const DogsJulia = [3, 5, 2, 12, 7];
    const DogsKate = [10, 5, 6, 1, 4];

    const checkDogs = function (dogsJulia, dogsKate) {
      let dogsJuliaCorrected = dogsJulia;
      dogsJuliaCorrected.shift();
      dogsJuliaCorrected.splice(-2);

      const totalDogs = dogsJuliaCorrected.concat(dogsKate);

      totalDogs.forEach(function (age, i) {
        age > 3
          ? console.log(`Dog number ${i + 1} is Adult and ${age} years old `)
          : console.log(`Dog number ${i + 1} is Puppy and ${age} years old `);
      });
    };
    checkDogs(DogsJulia, DogsKate);
#+END_SRC

** Data Transformations: map, filter, reduce
   :PROPERTIES:
   :CUSTOM_ID: data-transformations-map-filter-reduce
   :END:

[[10. Working With Arrays-1662920120054

** The Map Method
   :PROPERTIES:
   :CUSTOM_ID: the-map-method
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The map Method
    const eurToUsd = 1.1;

    // const movementsUSD = movements.map(function (mov) {
    //   return mov * eurToUsd;
    // });

    const movementsUSD = movements.map(mov => mov * eurToUsd);

    console.log(movements);
    console.log(movementsUSD);

    const movementsUSDfor = [];
    for (const mov of movements) movementsUSDfor.push(mov * eurToUsd);
    console.log(movementsUSDfor);

    const movementsDescriptions = movements.map(
      (mov, i) =>
        `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(
          mov
        )}`
    );
    console.log(movementsDescriptions);
#+END_SRC

- *forEach* creates /Side Effects/

  - Basically a side-effect means something is mutating/changing
    existing data. Like changing a value in an existing array.
  - Basically anything that 'changes' existing data instead of cloning /
    returning new values is a 'side effect' ```js // Example of Side
    Effect const arr = [1, 2, 3];

function sideEffect() { arr.pop(); }

sideEffect(); console.log(arr); // [1, 2] Mutates the original array.
```

** Computing Usernames
   :PROPERTIES:
   :CUSTOM_ID: computing-usernames
   :END:

- each function should actually receive the data that it should work
  with, instead of using a global variable.

#+BEGIN_SRC js
    const createUsernames = function (accs) {
      accs.forEach(function (acc) {
        acc.username = acc.owner
          .toLowerCase()
          .split(' ')
          .map(name => name[0])
          .join('');
      });
    };
    createUsernames(accounts);
    console.log(accounts);
#+END_SRC

** The filter Method
   :PROPERTIES:
   :CUSTOM_ID: the-filter-method
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The filter Method
    const deposits = movements.filter(function (mov, i, arr) {
      return mov > 0;
    });
    console.log(movements);
    console.log(deposits);

    const depositsFor = [];
    for (const mov of movements) if (mov > 0) depositsFor.push(mov);
    console.log(depositsFor);

    const withdrawals = movements.filter(mov => mov < 0);
    console.log(withdrawals);
#+END_SRC

** The Reduce Method
   :PROPERTIES:
   :CUSTOM_ID: the-reduce-method
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The reduce Method
    console.log(movements);

    // accumulator -> SNOWBALL
    // const balance = movements.reduce(function (acc, cur, i, arr) {
    //   console.log(`Iteration ${i}: ${acc}`);
    //   return acc + cur;
    // }, 0);
    const balance = movements.reduce((acc, cur) => acc + cur, 0);
    console.log(balance);

    let balance2 = 0;
    for (const mov of movements) balance2 += mov;
    console.log(balance2);

    // Maximum value
    const max = movements.reduce((acc, mov) => {
      if (acc > mov) return acc;
      else return mov;
    }, movements[0]);
    console.log(max);
#+END_SRC

** Coding Challenge #2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

Let's go back to Julia and Kate's study about dogs. This time, they want
to convert dog ages to human ages and calculate the average age of the
dogs in their study.

Create a function 'calcAverageHumanAge', which accepts an arrays of
dog's ages ('ages'), and does the following things in order:

1. Calculate the dog age in human years using the following formula: if
   the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2
   years old, humanAge = 16 + dogAge * 4.
2. Exclude all dogs that are less than 18 human years old (which is the
   same as keeping dogs that are at least 18 years old)
3. Calculate the average human age of all adult dogs (you should already
   know from other challenges how we calculate averages 😉)
4. Run the function for both test datasets

TEST DATA 1: [5, 2, 4, 1, 15, 8, 3] TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]

#+BEGIN_SRC js
    const calcAverageHumanAge = function (ages) {
      const humanAges = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4));
      const adults = humanAges.filter(age => age >= 18);
      console.log(humanAges);
      console.log(adults);

      // const average = adults.reduce((acc, age) => acc + age, 0) / adults.length;

      const average = adults.reduce(
        (acc, age, i, arr) => acc + age / arr.length,
        0
      );

      // 2 3. (2+3)/2 = 2.5 === 2/2+3/2 = 2.5

      return average;
    };
    const avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
    const avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);
    console.log(avg1, avg2);
#+END_SRC

** The Magic of Chaining Methods
   :PROPERTIES:
   :CUSTOM_ID: the-magic-of-chaining-methods
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The Magic of Chaining Methods
    const eurToUsd = 1.1;
    console.log(movements);

    // PIPELINE
    const totalDepositsUSD = movements
      .filter(mov => mov > 0)
      .map((mov, i, arr) => {
        // console.log(arr);
        return mov * eurToUsd;
      })
      // .map(mov => mov * eurToUsd)
      .reduce((acc, mov) => acc + mov, 0);
    console.log(totalDepositsUSD);
#+END_SRC

*Project Code*

#+BEGIN_SRC js
    const interestRate = 1.2;

    const calcDisplaySummary = function (movements) {
      const incomes = movements
        .filter(mov => mov > 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumIn.textContent = `${incomes}€`;

      const out = movements
        .filter(mov => mov < 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumOut.textContent = `${Math.abs(out)}€`;

      const interest = movements
        .filter(mov => mov > 0)
        .map(deposit => (deposit * 1.2) / 100)
        .filter((int, i, arr) => {
          // console.log(arr);
          return int >= 1;
        })
        .reduce((acc, int) => acc + int, 0);
      labelSumInterest.textContent = `${interest}€`;
    };
    calcDisplaySummary(account1.movements);
#+END_SRC

*Top Comment* - As Jonas explained in the video it is better to try and
optimize our methods instead of chaining uncontrollably. - Here are my
methods for calculating the balance and the sums. Also I do a little
destructuring as you will notice on two of them

#+BEGIN_SRC js
    const calcBalance = moves => moves.reduce((acc, val) => acc + val, 0);
     
    const calcSumIn = moves =>
      moves.reduce((acc, val) => (val > 0 ? acc + val : acc), 0);
     
    const calcSumOut = moves =>
      moves.reduce((acc, val) => (val < 0 ? acc + val : acc), 0);
     
    const calcInterest = moves =>
      moves.reduce(
        (acc, v) =>
          v > 0 ? ((v * 1.2) / 100 >= 1 ? acc + (v * 1.2) / 100 : acc) : acc,
        0
      );
     
    const displayBalances = ({ movements }) => {
      labelBalance.textContent = `${calcBalance(movements)}€`;
      labelSumIn.textContent = `${calcSumIn(movements)}€`;
      labelSumOut.textContent = `${-1 * calcSumOut(movements)}€`;
      labelSumInterest.textContent = `${calcInterest(movements)}€`;
    };
     
    displayMovements(account1);
#+END_SRC

** Coding Challenge #3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

Rewrite the 'calcAverageHumanAge' function from the previous challenge,
but this time as an arrow function, and using chaining!

TEST DATA 1: [5, 2, 4, 1, 15, 8, 3] TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]

#+BEGIN_SRC js
    const calcAverageHumanAge = ages =>
      ages
        .map(age => (age <= 2 ? 2 * age : 16 + age * 4))
        .filter(age => age >= 18)
        .reduce((acc, age, i, arr) => acc + age / arr.length, 0);
    // adults.length

    const avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
    const avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);
    console.log(avg1, avg2);
#+END_SRC

** The Find Method
   :PROPERTIES:
   :CUSTOM_ID: the-find-method
   :END:

- Filter method returns a new array while Find only returns the element
  itself

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The find Method
    const firstWithdrawal = movements.find(mov => mov < 0);
    console.log(movements);
    console.log(firstWithdrawal);

    console.log(accounts);

    const account = accounts.find(acc => acc.owner === 'Jessica Davis');
    console.log(account);
#+END_SRC

** Implementing Login
   :PROPERTIES:
   :CUSTOM_ID: implementing-login
   :END:

#+BEGIN_SRC js
    let currentAccount;

    btnLogin.addEventListener('click', function (e) {
      e.preventDefault();

      currentAccount = accounts.find(
        acc => acc.username === inputLoginUsername.value
      );

      if (currentAccount?.pin == Number(inputLoginPin.value)) {
        // display ui and message
        labelWelcome.textContent = `Welcome back, ${
          currentAccount.owner.split(' ')[0]
        }`;
        containerApp.style.opacity = 100;

        // clear input fields
        inputLoginUsername.value = inputLoginPin.value = '';
        inputLoginPin.blur();

        updateUI(currentAccount);
      }
    });
#+END_SRC

** Implementing Transfer
   :PROPERTIES:
   :CUSTOM_ID: implementing-transfer
   :END:

#+BEGIN_SRC js
    btnTransfer.addEventListener('click', function (e) {
      e.preventDefault();
      const amount = Number(inputTransferAmount.value);
      const recieverAcc = accounts.find(
        acc => acc.username === inputTransferTo.value
      );

      inputTransferAmount.value = inputTransferTo.value = '';

      if (
        amount > 0 &&
        recieverAcc &&
        currentAccount.balance >= amount &&
        recieverAcc?.username !== currentAccount.username
      ) {
        currentAccount.movements.push(-amount);
        recieverAcc.movements.push(amount);
        updateUI(currentAccount);
      }
    });
#+END_SRC

** The findIndex Method
   :PROPERTIES:
   :CUSTOM_ID: the-findindex-method
   :END:

#+BEGIN_SRC js
    btnClose.addEventListener('click', function (e) {
      e.preventDefault();

      if (
        inputCloseUsername.value === currentAccount.username &&
        Number(inputClosePin.value) === currentAccount.pin
      ) {
        const index = accounts.findIndex(
          acc => acc.username === currentAccount.username
        );
        console.log(index);
        // .indexOf(23)

        // Delete account
        accounts.splice(index, 1);

        // Hide UI
        containerApp.style.opacity = 0;
      }

      inputCloseUsername.value = inputClosePin.value = '';
    });
#+END_SRC

** some and every
   :PROPERTIES:
   :CUSTOM_ID: some-and-every
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // some and every
    console.log(movements);

    // EQUALITY
    console.log(movements.includes(-130));

    // SOME: CONDITION
    console.log(movements.some(mov => mov === -130));

    const anyDeposits = movements.some(mov => mov > 0);
    console.log(anyDeposits);

    // EVERY
    console.log(movements.every(mov => mov > 0));
    console.log(account4.movements.every(mov => mov > 0));

    // Separate callback
    const deposit = mov => mov > 0;
    console.log(movements.some(deposit));
    console.log(movements.every(deposit));
    console.log(movements.filter(deposit));
#+END_SRC

*Project Code*

#+BEGIN_SRC js
    btnLoan.addEventListener('click', function (e) {
      e.preventDefault();

      const amount = Number(inputLoanAmount.value);
      if (amount > 0 && currentAccount.movements.some(mov => mov >= amount * 0.1)) {
        currentAccount.movements.push(amount);
        updateUI(currentAccount);
      }
      inputLoanAmount.value = '';
    });
#+END_SRC

** flat and flatMap
   :PROPERTIES:
   :CUSTOM_ID: flat-and-flatmap
   :END:

- FlatMap method goes only one level deep when flattening the array

#+BEGIN_SRC js
    ///////////////////////////////////////
    // flat and flatMap
    const arr = [[1, 2, 3], [4, 5, 6], 7, 8];
    console.log(arr.flat());

    const arrDeep = [[[1, 2], 3], [4, [5, 6]], 7, 8];
    console.log(arrDeep.flat(2));

    // flat
    const overalBalance = accounts
      .map(acc => acc.movements)
      .flat()
      .reduce((acc, mov) => acc + mov, 0);
    console.log(overalBalance);

    // flatMap
    const overalBalance2 = accounts
      .flatMap(acc => acc.movements)
      .reduce((acc, mov) => acc + mov, 0);
    console.log(overalBalance2);
#+END_SRC

** Sorting Arrays
   :PROPERTIES:
   :CUSTOM_ID: sorting-arrays
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Sorting Arrays

    // Strings
    const owners = ['Jonas', 'Zach', 'Adam', 'Martha'];
    console.log(owners.sort());
    console.log(owners);

    // Numbers
    console.log(movements);

    // return < 0, A, B (keep order)
    // return > 0, B, A (switch order)

    // Ascending
    // movements.sort((a, b) => {
    //   if (a > b) return 1;
    //   if (a < b) return -1;
    // });
    movements.sort((a, b) => a - b);
    console.log(movements);

    // Descending
    // movements.sort((a, b) => {
    //   if (a > b) return -1;
    //   if (a < b) return 1;
    // });
    movements.sort((a, b) => b - a);
    console.log(movements);
#+END_SRC

*Project Code*

#+BEGIN_SRC js
    const displayMovements = function (movements, sort = false) {
      containerMovements.innerHTML = '';

    // Sorting Transactions
      const movs = sort ? movements.slice().sort((a, b) => a - b) : movements;

      movs.forEach(function (mov, i) {
        const type = mov > 0 ? 'deposit' : 'withdrawal';

        const html = `
          <div class="movements__row">
            <div class="movements__type movements__type--${type}">${
          i + 1
        } ${type}</div>
            <div class="movements__value">${mov}€</div>
          </div>
        `;

        containerMovements.insertAdjacentHTML('afterbegin', html);
      });
    };

    let sorted = false;

    btnSort.addEventListener('click', function (e) {
      e.preventDefault();
      console.log('f');
      displayMovements(currentAccount.movements, !sorted);
      sorted = !sorted;
    });
#+END_SRC

** More ways of creating and filling arrays
   :PROPERTIES:
   :CUSTOM_ID: more-ways-of-creating-and-filling-arrays
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // More Ways of Creating and Filling Arrays
    const arr = [1, 2, 3, 4, 5, 6, 7];
    console.log(new Array(1, 2, 3, 4, 5, 6, 7));

    // Emprty arrays + fill method
    const x = new Array(7);
    console.log(x);
    // console.log(x.map(() => 5));
    x.fill(1, 3, 5);
    x.fill(1);
    console.log(x);

    arr.fill(23, 2, 6);
    console.log(arr);

    // Array.from
    const y = Array.from({ length: 7 }, () => 1);
    console.log(y);

    const z = Array.from({ length: 7 }, (_, i) => i + 1);
    console.log(z);

    labelBalance.addEventListener('click', function () {
      const movementsUI = Array.from(
        document.querySelectorAll('.movements__value'),
        el => Number(el.textContent.replace('€', ''))
      );
      console.log(movementsUI);

      const movementsUI2 = [...document.querySelectorAll('.movements__value')];
    });
#+END_SRC

** Summary: Which Array method to use?
   :PROPERTIES:
   :CUSTOM_ID: summary-which-array-method-to-use
   :END:

[[10. Working With Arrays-1663160603120

** Array Methods Practice
   :PROPERTIES:
   :CUSTOM_ID: array-methods-practice
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Array Methods Practice

    // 1.
    const bankDepositSum = accounts
      .flatMap(acc => acc.movements)
      .filter(mov => mov > 0)
      .reduce((sum, cur) => sum + cur, 0);

    console.log(bankDepositSum);

    // 2.
    // const numDeposits1000 = accounts
    //   .flatMap(acc => acc.movements)
    //   .filter(mov => mov >= 1000).length;

    const numDeposits1000 = accounts
      .flatMap(acc => acc.movements)
      .reduce((count, cur) => (cur >= 1000 ? ++count : count), 0);

    console.log(numDeposits1000);

    // Prefixed ++ oeprator
    let a = 10;
    console.log(++a);
    console.log(a);

    // 3.
    const { deposits, withdrawals } = accounts
      .flatMap(acc => acc.movements)
      .reduce(
        (sums, cur) => {
          // cur > 0 ? (sums.deposits += cur) : (sums.withdrawals += cur);
          sums[cur > 0 ? 'deposits' : 'withdrawals'] += cur;
          return sums;
        },
        { deposits: 0, withdrawals: 0 }
      );

    console.log(deposits, withdrawals);

    // 4.
    // this is a nice title -> This Is a Nice Title
    const convertTitleCase = function (title) {
      const capitzalize = str => str[0].toUpperCase() + str.slice(1);

      const exceptions = ['a', 'an', 'and', 'the', 'but', 'or', 'on', 'in', 'with'];

      const titleCase = title
        .toLowerCase()
        .split(' ')
        .map(word => (exceptions.includes(word) ? word : capitzalize(word)))
        .join(' ');

      return capitzalize(titleCase);
    };

    console.log(convertTitleCase('this is a nice title'));
    console.log(convertTitleCase('this is a LONG title but not too long'));
    console.log(convertTitleCase('and here is another title with an EXAMPLE'));
#+END_SRC

#+BEGIN_SRC js
    // ---WRITE A FUNCTION THAT CONVERTS ANY RANDOM CASED STRINGS TO CAPITALIZED FORMAT
    const capitalize = function (str) {
      const exceptions = ['a', 'an', 'and', 'the', 'but', 'or', 'on', 'in', 'with'];
      return (
        str
          .toLowerCase()
          .split(' ')
          // HERE WE'RE FILTERING ALL EMPTY SIDE EFFECTS OF MULTIPLE SPACES
          .filter(word => word)
          // WE USE INDEX TO SKIP FIRST ELEMENT (WORD) IN ANY STRING
          .map((word, i) =>
            exceptions.includes(word) && i > 0
              ? word
              : word[0].toUpperCase() + word.slice(1)
          )
          .join(' ')
      );
    };
     
    console.log(
      capitalize(
        'and    thiS is a nice   and CLEAR title withOUT Any meaning in it'
      ) // And This Is a Nice and Clear Title Without Any Meaning in It
    );
#+END_SRC

** Coding Challenge #4
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-4
   :END:

Julia and Kate are still studying dogs, and this time they are studying
if dogs are eating too much or too little. Eating too much means the
dog's current food portion is larger than the recommended portion, and
eating too little is the opposite. Eating an okay amount means the dog's
current food portion is within a range 10% above and 10% below the
recommended portion (see hint).

1. Loop over the array containing dog objects, and for each dog,
   calculate the recommended food portion and add it to the object as a
   new property. Do NOT create a new array, simply loop over the array.
   Forumla: =recommendedFood = weight ** 0.75 * 28=. (The result is in
   grams of food, and the weight needs to be in kg)
2. Find Sarah's dog and log to the console whether it's eating too much
   or too little. HINT: Some dogs have multiple owners, so you first
   need to find Sarah in the owners array, and so this one is a bit
   tricky (on purpose) 🤓
3. Create an array containing all owners of dogs who eat too much
   ('ownersEatTooMuch') and an array with all owners of dogs who eat too
   little ('ownersEatTooLittle').
4. Log a string to the console for each array created in 3., like this:
   "Matilda and Alice and Bob's dogs eat too much!" and "Sarah and John
   and Michael's dogs eat too little!"
5. Log to the console whether there is any dog eating EXACTLY the amount
   of food that is recommended (just true or false)
6. Log to the console whether there is any dog eating an OKAY amount of
   food (just true or false)
7. Create an array containing the dogs that are eating an OKAY amount of
   food (try to reuse the condition used in 6.)
8. Create a shallow copy of the dogs array and sort it by recommended
   food portion in an ascending order (keep in mind that the portions
   are inside the array's objects)

HINT 1: Use many different tools to solve these challenges, you can use
the summary lecture to choose between them 😉 HINT 2: Being within a
range 10% above and below the recommended portion means:
=current > (recommended * 0.90) && current < (recommended * 1.10)=.
Basically, the current portion should be between 90% and 110% of the
recommended portion.

TEST DATA:

#+BEGIN_SRC js
    const dogs = [
      { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },
      { weight: 8, curFood: 200, owners: ['Matilda'] },
      { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },
      { weight: 32, curFood: 340, owners: ['Michael'] }
    ];
#+END_SRC

#+BEGIN_SRC js
    const dogs = [
      { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },
      { weight: 8, curFood: 200, owners: ['Matilda'] },
      { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },
      { weight: 32, curFood: 340, owners: ['Michael'] },
    ];

    // 1.
    dogs.forEach(dog => (dog.recFood = Math.trunc(dog.weight ** 0.75 * 28)));

    // 2.
    const dogSarah = dogs.find(dog => dog.owners.includes('Sarah'));
    console.log(dogSarah);
    console.log(
      `Sarah's dog is eating too ${
        dogSarah.curFood > dogSarah.recFood ? 'much' : 'little'
      } `
    );

    // 3.
    const ownersEatTooMuch = dogs
      .filter(dog => dog.curFood > dog.recFood)
      .flatMap(dog => dog.owners);
    // .flat();
    console.log(ownersEatTooMuch);

    const ownersEatTooLittle = dogs
      .filter(dog => dog.curFood < dog.recFood)
      .flatMap(dog => dog.owners);
    console.log(ownersEatTooLittle);

    // 4.
    // "Matilda and Alice and Bob's dogs eat too much!"
    //  "Sarah and John and Michael's dogs eat too little!"
    console.log(`${ownersEatTooMuch.join(' and ')}'s dogs eat too much!`);
    console.log(`${ownersEatTooLittle.join(' and ')}'s dogs eat too little!`);

    // 5.
    console.log(dogs.some(dog => dog.curFood === dog.recFood));

    // 6.
    // current > (recommended * 0.90) && current < (recommended * 1.10)
    const checkEatingOkay = dog =>
      dog.curFood > dog.recFood * 0.9 && dog.curFood < dog.recFood * 1.1;

    console.log(dogs.some(checkEatingOkay));

    // 7.
    console.log(dogs.filter(checkEatingOkay));

    // 8.
    // sort it by recommended food portion in an ascending order [1,2,3]
    const dogsSorted = dogs.slice().sort((a, b) => a.recFood - b.recFood);
    console.log(dogsSorted);
#+END_SRC

** Project Code
   :PROPERTIES:
   :CUSTOM_ID: project-code
   :END:

*HTML*

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <link rel="shortcut icon" type="image/png" href="/icon.png" />

        <link
          href="https://fonts.googleapis.com/css?family=Poppins:400,500,600&display=swap"
          rel="stylesheet"
        />

        <link rel="stylesheet" href="style.css" />
        <title>Bankist</title>
      </head>
      <body>
        <!-- TOP NAVIGATION -->
        <nav>
          <p class="welcome">Log in to get started</p>
          <img src="logo.png" alt="Logo" class="logo" />
          <form class="login">
            <input
              type="text"
              placeholder="user"
              class="login__input login__input--user"
            />
            <!-- In practice, use type="password" -->
            <input
              type="text"
              placeholder="PIN"
              maxlength="4"
              class="login__input login__input--pin"
            />
            <button class="login__btn">&rarr;</button>
          </form>
        </nav>

        <main class="app">
          <!-- BALANCE -->
          <div class="balance">
            <div>
              <p class="balance__label">Current balance</p>
              <p class="balance__date">
                As of <span class="date">05/03/2037</span>
              </p>
            </div>
            <p class="balance__value">0000€</p>
          </div>

          <!-- MOVEMENTS -->
          <div class="movements">
            <div class="movements__row">
              <div class="movements__type movements__type--deposit">2 deposit</div>
              <div class="movements__date">3 days ago</div>
              <div class="movements__value">4 000€</div>
            </div>
            <div class="movements__row">
              <div class="movements__type movements__type--withdrawal">
                1 withdrawal
              </div>
              <div class="movements__date">24/01/2037</div>
              <div class="movements__value">-378€</div>
            </div>
          </div>

          <!-- SUMMARY -->
          <div class="summary">
            <p class="summary__label">In</p>
            <p class="summary__value summary__value--in">0000€</p>
            <p class="summary__label">Out</p>
            <p class="summary__value summary__value--out">0000€</p>
            <p class="summary__label">Interest</p>
            <p class="summary__value summary__value--interest">0000€</p>
            <button class="btn--sort">&downarrow; SORT</button>
          </div>

          <!-- OPERATION: TRANSFERS -->
          <div class="operation operation--transfer">
            <h2>Transfer money</h2>
            <form class="form form--transfer">
              <input type="text" class="form__input form__input--to" />
              <input type="number" class="form__input form__input--amount" />
              <button class="form__btn form__btn--transfer">&rarr;</button>
              <label class="form__label">Transfer to</label>
              <label class="form__label">Amount</label>
            </form>
          </div>

          <!-- OPERATION: LOAN -->
          <div class="operation operation--loan">
            <h2>Request loan</h2>
            <form class="form form--loan">
              <input type="number" class="form__input form__input--loan-amount" />
              <button class="form__btn form__btn--loan">&rarr;</button>
              <label class="form__label form__label--loan">Amount</label>
            </form>
          </div>

          <!-- OPERATION: CLOSE -->
          <div class="operation operation--close">
            <h2>Close account</h2>
            <form class="form form--close">
              <input type="text" class="form__input form__input--user" />
              <input
                type="password"
                maxlength="6"
                class="form__input form__input--pin"
              />
              <button class="form__btn form__btn--close">&rarr;</button>
              <label class="form__label">Confirm user</label>
              <label class="form__label">Confirm PIN</label>
            </form>
          </div>

          <!-- LOGOUT TIMER -->
          <p class="logout-timer">
            You will be logged out in <span class="timer">05:00</span>
          </p>
        </main>

        <!-- <footer>
          &copy; by Jonas Schmedtmann. Don't claim as your own :)
        </footer> -->

        <script src="script.js"></script>
      </body>
    </html>
#+END_EXAMPLE

*CSS*

#+BEGIN_SRC css
    /*
     * Use this CSS to learn some intersting techniques,
     * in case you're wondering how I built the UI.
     * Have fun! 😁
     */

    * {
      margin: 0;
      padding: 0;
      box-sizing: inherit;
    }

    html {
      font-size: 62.5%;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      color: #444;
      background-color: #f3f3f3;
      height: 100vh;
      padding: 2rem;
    }

    nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 2rem;
    }

    .welcome {
      font-size: 1.9rem;
      font-weight: 500;
    }

    .logo {
      height: 5.25rem;
    }

    .login {
      display: flex;
    }

    .login__input {
      border: none;
      padding: 0.5rem 2rem;
      font-size: 1.6rem;
      font-family: inherit;
      text-align: center;
      width: 12rem;
      border-radius: 10rem;
      margin-right: 1rem;
      color: inherit;
      border: 1px solid #fff;
      transition: all 0.3s;
    }

    .login__input:focus {
      outline: none;
      border: 1px solid #ccc;
    }

    .login__input::placeholder {
      color: #bbb;
    }

    .login__btn {
      border: none;
      background: none;
      font-size: 2.2rem;
      color: inherit;
      cursor: pointer;
      transition: all 0.3s;
    }

    .login__btn:hover,
    .login__btn:focus,
    .btn--sort:hover,
    .btn--sort:focus {
      outline: none;
      color: #777;
    }

    /* MAIN */
    .app {
      position: relative;
      max-width: 100rem;
      margin: 4rem auto;
      display: grid;
      grid-template-columns: 4fr 3fr;
      grid-template-rows: auto repeat(3, 15rem) auto;
      gap: 2rem;

      /* NOTE This creates the fade in/out anumation */
      opacity: 0;
      transition: all 1s;
    }

    .balance {
      grid-column: 1 / span 2;
      display: flex;
      align-items: flex-end;
      justify-content: space-between;
      margin-bottom: 2rem;
    }

    .balance__label {
      font-size: 2.2rem;
      font-weight: 500;
      margin-bottom: -0.2rem;
    }

    .balance__date {
      font-size: 1.4rem;
      color: #888;
    }

    .balance__value {
      font-size: 4.5rem;
      font-weight: 400;
    }

    /* MOVEMENTS */
    .movements {
      grid-row: 2 / span 3;
      background-color: #fff;
      border-radius: 1rem;
      overflow: scroll;
    }

    .movements__row {
      padding: 2.25rem 4rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid #eee;
    }

    .movements__type {
      font-size: 1.1rem;
      text-transform: uppercase;
      font-weight: 500;
      color: #fff;
      padding: 0.1rem 1rem;
      border-radius: 10rem;
      margin-right: 2rem;
    }

    .movements__date {
      font-size: 1.1rem;
      text-transform: uppercase;
      font-weight: 500;
      color: #666;
    }

    .movements__type--deposit {
      background-image: linear-gradient(to top left, #39b385, #9be15d);
    }

    .movements__type--withdrawal {
      background-image: linear-gradient(to top left, #e52a5a, #ff585f);
    }

    .movements__value {
      font-size: 1.7rem;
      margin-left: auto;
    }

    /* SUMMARY */
    .summary {
      grid-row: 5 / 6;
      display: flex;
      align-items: baseline;
      padding: 0 0.3rem;
      margin-top: 1rem;
    }

    .summary__label {
      font-size: 1.2rem;
      font-weight: 500;
      text-transform: uppercase;
      margin-right: 0.8rem;
    }

    .summary__value {
      font-size: 2.2rem;
      margin-right: 2.5rem;
    }

    .summary__value--in,
    .summary__value--interest {
      color: #66c873;
    }

    .summary__value--out {
      color: #f5465d;
    }

    .btn--sort {
      margin-left: auto;
      border: none;
      background: none;
      font-size: 1.3rem;
      font-weight: 500;
      cursor: pointer;
    }

    /* OPERATIONS */
    .operation {
      border-radius: 1rem;
      padding: 3rem 4rem;
      color: #333;
    }

    .operation--transfer {
      background-image: linear-gradient(to top left, #ffb003, #ffcb03);
    }

    .operation--loan {
      background-image: linear-gradient(to top left, #39b385, #9be15d);
    }

    .operation--close {
      background-image: linear-gradient(to top left, #e52a5a, #ff585f);
    }

    h2 {
      margin-bottom: 1.5rem;
      font-size: 1.7rem;
      font-weight: 600;
      color: #333;
    }

    .form {
      display: grid;
      grid-template-columns: 2.5fr 2.5fr 1fr;
      grid-template-rows: auto auto;
      gap: 0.4rem 1rem;
    }

    /* Exceptions for interst */
    .form.form--loan {
      grid-template-columns: 2.5fr 1fr 2.5fr;
    }
    .form__label--loan {
      grid-row: 2;
    }
    /* End exceptions */

    .form__input {
      width: 100%;
      border: none;
      background-color: rgba(255, 255, 255, 0.4);
      font-family: inherit;
      font-size: 1.5rem;
      text-align: center;
      color: #333;
      padding: 0.3rem 1rem;
      border-radius: 0.7rem;
      transition: all 0.3s;
    }

    .form__input:focus {
      outline: none;
      background-color: rgba(255, 255, 255, 0.6);
    }

    .form__label {
      font-size: 1.3rem;
      text-align: center;
    }

    .form__btn {
      border: none;
      border-radius: 0.7rem;
      font-size: 1.8rem;
      background-color: #fff;
      cursor: pointer;
      transition: all 0.3s;
    }

    .form__btn:focus {
      outline: none;
      background-color: rgba(255, 255, 255, 0.8);
    }

    .logout-timer {
      padding: 0 0.3rem;
      margin-top: 1.9rem;
      text-align: right;
      font-size: 1.25rem;
    }

    .timer {
      font-weight: 600;
    }
#+END_SRC

*Javascript*

#+BEGIN_SRC js
    'use strict';

    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    // BANKIST APP

    /////////////////////////////////////////////////
    // Data
    const account1 = {
      owner: 'Jonas Schmedtmann',
      movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
      interestRate: 1.2, // %
      pin: 1111,
    };

    const account2 = {
      owner: 'Jessica Davis',
      movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
      interestRate: 1.5,
      pin: 2222,
    };

    const account3 = {
      owner: 'Steven Thomas Williams',
      movements: [200, -200, 340, -300, -20, 50, 400, -460],
      interestRate: 0.7,
      pin: 3333,
    };

    const account4 = {
      owner: 'Sarah Smith',
      movements: [430, 1000, 700, 50, 90],
      interestRate: 1,
      pin: 4444,
    };

    const accounts = [account1, account2, account3, account4];

    /////////////////////////////////////////////////
    // Elements
    const labelWelcome = document.querySelector('.welcome');
    const labelDate = document.querySelector('.date');
    const labelBalance = document.querySelector('.balance__value');
    const labelSumIn = document.querySelector('.summary__value--in');
    const labelSumOut = document.querySelector('.summary__value--out');
    const labelSumInterest = document.querySelector('.summary__value--interest');
    const labelTimer = document.querySelector('.timer');

    const containerApp = document.querySelector('.app');
    const containerMovements = document.querySelector('.movements');

    const btnLogin = document.querySelector('.login__btn');
    const btnTransfer = document.querySelector('.form__btn--transfer');
    const btnLoan = document.querySelector('.form__btn--loan');
    const btnClose = document.querySelector('.form__btn--close');
    const btnSort = document.querySelector('.btn--sort');

    const inputLoginUsername = document.querySelector('.login__input--user');
    const inputLoginPin = document.querySelector('.login__input--pin');
    const inputTransferTo = document.querySelector('.form__input--to');
    const inputTransferAmount = document.querySelector('.form__input--amount');
    const inputLoanAmount = document.querySelector('.form__input--loan-amount');
    const inputCloseUsername = document.querySelector('.form__input--user');
    const inputClosePin = document.querySelector('.form__input--pin');

    /////////////////////////////////////////////////
    // Functions

    const displayMovements = function (movements, sort = false) {
      containerMovements.innerHTML = '';

      const movs = sort ? movements.slice().sort((a, b) => a - b) : movements;

      movs.forEach(function (mov, i) {
        const type = mov > 0 ? 'deposit' : 'withdrawal';

        const html = `
          <div class="movements__row">
            <div class="movements__type movements__type--${type}">${
          i + 1
        } ${type}</div>
            <div class="movements__value">${mov}€</div>
          </div>
        `;

        containerMovements.insertAdjacentHTML('afterbegin', html);
      });
    };

    const calcDisplayBalance = function (acc) {
      acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);
      labelBalance.textContent = `${acc.balance}€`;
    };

    const calcDisplaySummary = function (acc) {
      const incomes = acc.movements
        .filter(mov => mov > 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumIn.textContent = `${incomes}€`;

      const out = acc.movements
        .filter(mov => mov < 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumOut.textContent = `${Math.abs(out)}€`;

      const interest = acc.movements
        .filter(mov => mov > 0)
        .map(deposit => (deposit * acc.interestRate) / 100)
        .filter((int, i, arr) => {
          // console.log(arr);
          return int >= 1;
        })
        .reduce((acc, int) => acc + int, 0);
      labelSumInterest.textContent = `${interest}€`;
    };

    const createUsernames = function (accs) {
      accs.forEach(function (acc) {
        acc.username = acc.owner
          .toLowerCase()
          .split(' ')
          .map(name => name[0])
          .join('');
      });
    };
    createUsernames(accounts);

    const updateUI = function (acc) {
      // Display movements
      displayMovements(acc.movements);

      // Display balance
      calcDisplayBalance(acc);

      // Display summary
      calcDisplaySummary(acc);
    };

    ///////////////////////////////////////
    // Event handlers
    let currentAccount;

    btnLogin.addEventListener('click', function (e) {
      // Prevent form from submitting
      e.preventDefault();

      currentAccount = accounts.find(
        acc => acc.username === inputLoginUsername.value
      );
      console.log(currentAccount);

      if (currentAccount?.pin === Number(inputLoginPin.value)) {
        // Display UI and message
        labelWelcome.textContent = `Welcome back, ${
          currentAccount.owner.split(' ')[0]
        }`;
        containerApp.style.opacity = 100;

        // Clear input fields
        inputLoginUsername.value = inputLoginPin.value = '';
        inputLoginPin.blur();

        // Update UI
        updateUI(currentAccount);
      }
    });

    btnTransfer.addEventListener('click', function (e) {
      e.preventDefault();
      const amount = Number(inputTransferAmount.value);
      const receiverAcc = accounts.find(
        acc => acc.username === inputTransferTo.value
      );
      inputTransferAmount.value = inputTransferTo.value = '';

      if (
        amount > 0 &&
        receiverAcc &&
        currentAccount.balance >= amount &&
        receiverAcc?.username !== currentAccount.username
      ) {
        // Doing the transfer
        currentAccount.movements.push(-amount);
        receiverAcc.movements.push(amount);

        // Update UI
        updateUI(currentAccount);
      }
    });

    btnLoan.addEventListener('click', function (e) {
      e.preventDefault();

      const amount = Number(inputLoanAmount.value);

      if (amount > 0 && currentAccount.movements.some(mov => mov >= amount * 0.1)) {
        // Add movement
        currentAccount.movements.push(amount);

        // Update UI
        updateUI(currentAccount);
      }
      inputLoanAmount.value = '';
    });

    btnClose.addEventListener('click', function (e) {
      e.preventDefault();

      if (
        inputCloseUsername.value === currentAccount.username &&
        Number(inputClosePin.value) === currentAccount.pin
      ) {
        const index = accounts.findIndex(
          acc => acc.username === currentAccount.username
        );
        console.log(index);
        // .indexOf(23)

        // Delete account
        accounts.splice(index, 1);

        // Hide UI
        containerApp.style.opacity = 0;
      }

      inputCloseUsername.value = inputClosePin.value = '';
    });

    let sorted = false;
    btnSort.addEventListener('click', function (e) {
      e.preventDefault();
      displayMovements(currentAccount.movements, !sorted);
      sorted = !sorted;
    });
#+END_SRC
* 09 A Closer Look at Functions
** Default Parameters
   :PROPERTIES:
   :CUSTOM_ID: default-parameters
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Default Parameters
    const bookings = [];

    const createBooking = function (
      flightNum,
      numPassengers = 1,
      price = 199 * numPassengers
    ) {
      // ES5
      // numPassengers = numPassengers || 1;
      // price = price || 199;

      const booking = {
        flightNum,
        numPassengers,
        price,
      };
      console.log(booking);
      bookings.push(booking);
    };

    createBooking('LH123');
    createBooking('LH123', 2, 800);
    createBooking('LH123', 2);
    createBooking('LH123', 5);

    createBooking('LH123', undefined, 1000);
#+END_SRC

- Default function parameters allow named parameters to be initialized
  with default values if no value or undefined is passed.
- In JavaScript, function parameters default
  to [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined][=undefined=]].
  However, it's often useful to set a different default value.
- Sometimes, you can use the terms argument and parameter
  interchangeably. However, by definition, parameters are what you
  specify in
  the [[https://www.javascripttutorial.net/javascript-function/][function
  declaration]] whereas the arguments are what you pass into the
  function.

** How Passing Arguments Works: Value vs. Reference
   :PROPERTIES:
   :CUSTOM_ID: how-passing-arguments-works-value-vs.-reference
   :END:

- Passing a primitive type to a function is really just the same as
  creating a copy like this, outside of the function. So the value is
  simply copied. On the other hand, when we pass an object to a
  function, it is really just like copying an object like this. And so
  whatever we change in a copy will also happen in the original.
- In JavaScript, you can pass by value and by reference. The main
  difference between the two is that passing by value happens when
  assigning primitives while passing by reference when assigning
  objects.
- In JavaScript primitive types are passed around as values: meaning
  that each time a value is assigned, a copy of that value is created.
- On the other side objects (including plain objects, array, functions,
  class instances) are references. If you modify the object, then all
  variables that reference that object are going to see the change.
- The comparison operator distinguishes comparing values and references.
  2 variables holding references are equal only if they reference
  exactly the same object, but 2 variables holding values are equal if
  they simply have 2 same values no matter where the value originates:
  from a variable, literal, etc.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // How Passing Arguments Works: Values vs. Reference
    const flight = 'LH234';
    const jonas = {
      name: 'Jonas Schmedtmann',
      passport: 24739479284,
    };

    const checkIn = function (flightNum, passenger) {
      flightNum = 'LH999';
      passenger.name = 'Mr. ' + passenger.name;

      if (passenger.passport === 24739479284) {
        alert('Checked in');
      } else {
        alert('Wrong passport!');
      }
    };

    // checkIn(flight, jonas); // this will modify the jonas object
    // console.log(flight);
    // console.log(jonas);

    // Is the same as doing...
    // const flightNum = flight;
    // const passenger = jonas;

    const newPassport = function (person) {
      person.passport = Math.trunc(Math.random() * 100000000000);
    };

    newPassport(jonas);
    checkIn(flight, jonas);
#+END_SRC

** First-Class and Higher-Order Functions
   :PROPERTIES:
   :CUSTOM_ID: first-class-and-higher-order-functions
   :END:

- A programming language is said to have *First-class functions* when
  functions in that language are treated like any other variable. For
  example, in such a language, a function can be passed as an argument
  to other functions, can be returned by another function and can be
  assigned as a value to a variable.
- *First-class functions* are JavaScript functions that can behave like
  variables. They can also be parsed as arguments to higher-order
  functions.
- *Higher-order functions* are functions that return a function or take
  in a function as an argument.
- So, first class functions is just a feature that a programming
  language either has or does not have. All it means is that all
  functions are values. There are no first class functions in practice,
  It's just a concept.
- Any difference between First Class Function and High Order Function -
  [[https://stackoverflow.com/questions/10141124/any-difference-between-first-class-function-and-high-order-function][Stackoverflow]]

  - There is a difference. When you say that a language has first-class
    functions, it means that the language treats functions as values --
    that you can assign a function into a variable, pass it around etc.
    Higher-order functions are functions that work on other functions,
    meaning that they take one or more functions as an argument and can
    also return a function.
  - The "higher-order" concept can be applied to functions in general,
    like functions in the mathematical sense. The "first-class" concept
    only has to do with functions in programming languages. It's seldom
    used when referring to a function, such as "a first-class function".
    It's much more common to say that "a language has/hasn't first-class
    function support".
  - The two things are closely related, as it's hard to imagine a
    language with first-class functions that would not also support
    higher-order functions, and conversely a language with higher-order
    functions but without first-class function support.

[[9. A Closer Look at Functions-1662649740328

** Functions Accepting Callback Functions
   :PROPERTIES:
   :CUSTOM_ID: functions-accepting-callback-functions
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Functions Accepting Callback Functions
    const oneWord = function (str) {
      return str.replace(/ /g, '').toLowerCase();
    };

    const upperFirstWord = function (str) {
      const [first, ...others] = str.split(' ');
      return [first.toUpperCase(), ...others].join(' ');
    };

    // Higher-order function
    const transformer = function (str, fn) {
      console.log(`Original string: ${str}`);
      console.log(`Transformed string: ${fn(str)}`);

      console.log(`Transformed by: ${fn.name}`);
    };

    transformer('JavaScript is the best!', upperFirstWord);
    transformer('JavaScript is the best!', oneWord);

    // JS uses callbacks all the time
    const high5 = function () {
      console.log('👋');
    };
    document.body.addEventListener('click', high5);
    ['Jonas', 'Martha', 'Adam'].forEach(high5);
#+END_SRC

** Functions Returning Functions
   :PROPERTIES:
   :CUSTOM_ID: functions-returning-functions
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Functions Returning Functions
    const greet = function (greeting) {
      return function (name) {
        console.log(`${greeting} ${name}`);
      };
    };

    const greeterHey = greet('Hey');
    greeterHey('Jonas');
    greeterHey('Steven');

    greet('Hello')('Jonas');

    // Challenge
    const greetArr = greeting => name => console.log(`${greeting} ${name}`);

    greetArr('Hi')('Jonas');
#+END_SRC

** The call and apply Methods
   :PROPERTIES:
   :CUSTOM_ID: the-call-and-apply-methods
   :END:

- The *=apply()/call()=* method calls the specified function with a
  given =this= value, and =arguments= provided as an array.
- The =call()= method takes arguments *separately*. The =apply()= method
  takes arguments as an *array*.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The call and apply Methods
    const lufthansa = {
      airline: 'Lufthansa',
      iataCode: 'LH',
      bookings: [],
      // book: function() {}
      book(flightNum, name) {
        console.log(
          `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
        );
        this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name });
      },
    };

    lufthansa.book(239, 'Jonas Schmedtmann');
    lufthansa.book(635, 'John Smith');

    const eurowings = {
      airline: 'Eurowings',
      iataCode: 'EW',
      bookings: [],
    };

    const book = lufthansa.book;

    // Does NOT work because this is pointing to 'Undefined'
    // book(23, 'Sarah Williams');

    // Call method
    book.call(eurowings, 23, 'Sarah Williams');
    console.log(eurowings);

    book.call(lufthansa, 239, 'Mary Cooper');
    console.log(lufthansa);

    const swiss = {
      airline: 'Swiss Air Lines',
      iataCode: 'LX',
      bookings: [],
    };

    book.call(swiss, 583, 'Mary Cooper');

    // Apply method
    const flightData = [583, 'George Cooper'];
    book.apply(swiss, flightData);
    console.log(swiss);

    // Instead of using apply + array we can use call + ...rest
    book.call(swiss, ...flightData);
#+END_SRC

** The bind Method
   :PROPERTIES:
   :CUSTOM_ID: the-bind-method
   :END:

- The *=bind()=* method creates a new function that, when called, has
  its =this= keyword set to the provided value, with a given sequence of
  arguments preceding any provided when the new function is called.
- In an event handler function, *this keyword* always points to the
  element on which that handler is attached to.
- Partial applications means that we can preset parameters.
- 

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The bind Method
    // book.call(eurowings, 23, 'Sarah Williams');

    const bookEW = book.bind(eurowings);
    const bookLH = book.bind(lufthansa);
    const bookLX = book.bind(swiss);

    bookEW(23, 'Steven Williams');

    const bookEW23 = book.bind(eurowings, 23);
    bookEW23('Jonas Schmedtmann');
    bookEW23('Martha Cooper');

    // With Event Listeners
    lufthansa.planes = 300;
    lufthansa.buyPlane = function () {
      console.log(this);

      this.planes++;
      console.log(this.planes);
    };
    // lufthansa.buyPlane();

    document
      .querySelector('.buy')
      .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));

    // Partial application
    const addTax = (rate, value) => value + value * rate;
    console.log(addTax(0.1, 200));

    const addVAT = addTax.bind(null, 0.23);
    // addVAT = value => value + value * 0.23;

    console.log(addVAT(100));
    console.log(addVAT(23));

    const addTaxRate = function (rate) {
      return function (value) {
        return value + value * rate;
      };
    };
    const addVAT2 = addTaxRate(0.23);
    console.log(addVAT2(100));
    console.log(addVAT2(23));
#+END_SRC

** Coding Challenge ##1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

Let's build a simple poll app!

A poll has a question, an array of options from which people can choose,
and an array with the number of replies for each option. This data is
stored in the starter object below.

Here are your tasks:

1. Create a method called 'registerNewAnswer' on the 'poll' object. The
   method does 2 things:

- 1.1. Display a prompt window for the user to input the number of the
  selected option. The prompt should look like this:
- What is your favourite programming language?

  - 0: JavaScript
  - 1: Python
  - 2: Rust
  - 3: C++
  - (Write option number)

- 1.2. Based on the input number, update the answers array. For example,
  if the option is 3, increase the value AT POSITION 3 of the array by
  1. Make sure to check if the input is a number and if the number makes
  sense (e.g answer 52 wouldn't make sense, right?)

2. Call this method whenever the user clicks the "Answer poll" button.
3. Create a method 'displayResults' which displays the poll results. The
   method takes a string as an input (called 'type'), which can be
   either 'string' or 'array'. If type is 'array', simply display the
   results array as it is, using console.log(). This should be the
   default option. If type is 'string', display a string like "Poll
   results are 13, 2, 4, 1".
4. Run the 'displayResults' method at the end of each
   'registerNewAnswer' method call.

HINT: Use many of the tools you learned about in this and the last
section 😉

BONUS: Use the 'displayResults' method to display the 2 arrays in the
test data. Use both the 'array' and the 'string' option. Do NOT put the
arrays in the poll object! So what shoud the this keyword look like in
this situation?

BONUS TEST DATA 1: [5, 2, 3] BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1]

#+BEGIN_SRC js
    const poll = {
      question: 'What is your favourite programming language?',
      options: ['0: JavaScript', '1: Python', '2: Rust', '3: C++'],
      // This generates [0, 0, 0, 0]. More in the next section 😃
      answers: new Array(4).fill(0),
      registerNewAnswer() {
        // Get answer
        const answer = Number(
          prompt(
            `${this.question}\n${this.options.join('\n')}\n(Write option number)`
          )
        );
        console.log(answer);

        // Register answer
        typeof answer === 'number' &&
          answer < this.answers.length &&
          this.answers[answer]++;

        this.displayResults();
        this.displayResults('string');
      },

      displayResults(type = 'array') {
        if (type === 'array') {
          console.log(this.answers);
        } else if (type === 'string') {
          // Poll results are 13, 2, 4, 1
          console.log(`Poll results are ${this.answers.join(', ')}`);
        }
      },
    };

    document
      .querySelector('.poll')
      .addEventListener('click', poll.registerNewAnswer.bind(poll));

    poll.displayResults.call({ answers: [5, 2, 3] }, 'string');
    poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] }, 'string');
    poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] });

    // [5, 2, 3]
    // [1, 5, 3, 9, 6, 1]
#+END_SRC

** Immediately Invoked Function Expressions (IIFE)
   :PROPERTIES:
   :CUSTOM_ID: immediately-invoked-function-expressions-iife
   :END:

- IIFEs are functions that are executed /immediately after/ being
  defined. We can make any function expression an IIFE by wrapping it in
  parentheses, and adding a following pair of parentheses at the end:

#+BEGIN_SRC js
    (function() { 
    // Code that runs in your function 
    })()
#+END_SRC

- Alternatively, you can use the arrow syntax to create an IIFE as
  follows:

#+BEGIN_SRC js
    (() => {
        // Code that runs in your function
    })()
#+END_SRC

- The parentheses surrounding the function definition lets JavaScript
  know that it will process a function expression. The last pair of
  parentheses invoke the function. ###### When to Use an IIFE?

The most common use cases for IIFEs are:

- Aliasing global variables
- Creating private variables and functions
- Asynchronous functions in loops

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Immediately Invoked Function Expressions (IIFE)
    const runOnce = function () {
      console.log('This will never run again');
    };
    runOnce();

    // IIFE
    (function () {
      console.log('This will never run again');
      const isPrivate = 23;
    })();

    // console.log(isPrivate);

    (() => console.log('This will ALSO never run again'))();

    {
      const isPrivate = 23;
      var notPrivate = 46;
    }
    // console.log(isPrivate);
    console.log(notPrivate);
#+END_SRC

- [[https://stackabuse.com/javascripts-immediately-invoked-function-expressions/][more
  on IIFE]]

** Closures
   :PROPERTIES:
   :CUSTOM_ID: closures
   :END:

- A *closure* is a function which has access to the variable from
  another function's scope. This is accomplished by creating a function
  inside a function.
- A *closure* is the combination of a function bundled together
  (enclosed) with references to its surrounding state (the *lexical
  environment*). In other words, a closure gives you access to an outer
  function's scope from an inner function. In JavaScript, closures are
  created every time a function is created, at function creation time.
- JavaScript variables can belong to the *local* or *global* scope.
  Global variables can be made local (private) with *closures*.
- [Closures in Javascript for
  beginners](https://www.codingame.com/playgrounds/6516/closures-in-javascript-for-beginners
- *Creating A Closure*

  - [[9. A Closer Look at Functions-1662920198036

- Understanding Closure

  - [[9. A Closer Look at Functions-1662920260588

- Summary

  - [[9. A Closer Look at Functions-1662920308154 ```js
    /////////////////////////////////////// // Closures const
    secureBooking = function () { let passengerCount = 0;

  return function () { passengerCount++;
  console.log(=${passengerCount} passengers=); }; };

const booker = secureBooking();

booker(); booker(); booker();

console.dir(booker); ```

** More Closure Examples
   :PROPERTIES:
   :CUSTOM_ID: more-closure-examples
   :END:

- a closure always makes sure that a function does not lose the
  connection to the variables that were present at its birthplace.
- closure does in fact have priority over the scope chain.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // More Closure Examples
    // Example 1
    let f;

    const g = function () {
      const a = 23;
      f = function () {
        console.log(a * 2);
      };
    };

    const h = function () {
      const b = 777;
      f = function () {
        console.log(b * 2);
      };
    };

    g();
    f(); // output: 46
    console.dir(f);

    // Re-assigning f function
    h();
    f();
    console.dir(f);

    // Example 2
    const boardPassengers = function (n, wait) {
      const perGroup = n / 3;

      setTimeout(function () {
        console.log(`We are now boarding all ${n} passengers`);
        console.log(`There are 3 groups, each with ${perGroup} passengers`);
      }, wait * 1000);

      console.log(`Will start boarding in ${wait} seconds`);
    };

    const perGroup = 1000;
    boardPassengers(180, 3);
    */
#+END_SRC

** Coding Challenge ##2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

This is more of a thinking challenge than a coding challenge 🤓

Take the IIFE below and at the end of the function, attach an event
listener that changes the color of the selected h1 element ('header') to
blue, each time the BODY element is clicked. Do NOT select the h1
element again!

And now explain to YOURSELF (or someone around you) WHY this worked!
Take all the time you need. Think about WHEN exactly the callback
function is executed, and what that means for the variables involved in
this example.e

#+BEGIN_SRC js
    (function () {
      const header = document.querySelector('h1');
      header.style.color = 'red';
      document.querySelector('body').addEventListener('click', function () {
        header.style.color = 'blue';
      });
    })();
#+END_SRC
* TODO Try and Catch Block
#+begin_src jss
function yell(msg){
   try{
       hello.toUpperCase();
   } catch (e){
       console.log("ERROR !!!")
       console.log("Please pass a string next time")
  }
}

yell ("test")  // test
yell (4521579) // error !! please pass string next time
yell (true)   // please stringgt next time
console.log("After")
#+end_src




* Activating Strict Mode
   :PROPERTIES:
   :CUSTOM_ID: activating-strict-mode
   :END:

#+BEGIN_SRC js
    'use strict'; // to activate strict mode to 
#+END_SRC

- Always put strict mode in the beginning of the file
- It makes it easier for developer to avoid accidental errors.

First, strict mode forbids us to do certain things and second, it will
actually create visible errors for us in certain situations in which
without strict mode JavaScript will simply fail silently without letting
us know that we did a mistake.

#+BEGIN_SRC js
    'use strict';

    let hasDriversLicense = false;
    const passTest = true;

    if (passTest) hasDriversLicense = true; // if in  hasDriver(s)License s is missing the code will behave  unexpectedly
    if (hasDriversLicense) console.log('I can drive :D');

    // const interface = 'Audio'; // Uncaught SyntaxError: Missing initializer in const declaration
    // const private = 534; // Uncaught SyntaxError: Missing initializer in const declaration
#+END_SRC
* DOM
document # html fileb
console.dir(document)
console.dir()
* 06 JavaScript in the Browser - DOM and Events Fundamentals
** PROJECT ##1: Guess My Number!
   :PROPERTIES:
   :CUSTOM_ID: project-1-guess-my-number
   :END:

#+BEGIN_SRC js
    'use strict';

    document.querySelector('.message');
    console.log(document.querySelector('.message').textContent);
#+END_SRC

- (.) notation for classes
- (##) for selecting ids
- .textContent to select the text.

** What's the DOM and DOM Manipulation
   :PROPERTIES:
   :CUSTOM_ID: whats-the-dom-and-dom-manipulation
   :END:

*DOM* - Document Object Model: Structured Representation of Html
Documents. Allows Javascript to Access Html Elements and Styles to
Manipulate Them. Dom Changes text, HTML attributes, and even CSS styles.

** The DOM Tree Structure
   :PROPERTIES:
   :CUSTOM_ID: the-dom-tree-structure
   :END:

[[6. JavaScript in the Browser - DOM and Events Fundamentals-1661525143222.jpeg]

** DOM !== Javascript
   :PROPERTIES:
   :CUSTOM_ID: dom-javascript
   :END:

[[6. JavaScript in the Browser - DOM and Events
Fundamentals-1661525192615

** Selecting and Manipulating Elements
   :PROPERTIES:
   :CUSTOM_ID: selecting-and-manipulating-elements
   :END:

#+BEGIN_SRC js
    console.log(document.querySelector('.message').textContent);
    document.querySelector('.message').textContent = '🎉 Correct Number!';

    document.querySelector('.number').textContent = 13;
    document.querySelector('.score').textContent = 10;

    document.querySelector('.guess').value = 23; // we use ".value" to read from the input field.
    console.log(document.querySelector('.guess').value);
#+END_SRC

** Handling Click Events
   :PROPERTIES:
   :CUSTOM_ID: handling-click-events
   :END:

- *Event Listener* - Now, an event is something that happens on the
  page. For example, a mouse click, or a mouse moving, or a key press,
- And if a function is just is value, then we can also pass it into
  another function as an argument.

#+BEGIN_SRC js
    document.querySelector('.message');
    console.log(document.querySelector('.message').textContent);

    document.querySelector('.check').addEventListener('click', function () {
      const guess = console.log(document.querySelector('.guess').value);
      console.log(guess, typeof guess);

      if (!guess) {
        document.querySelector('.message').textContent = '🚫 No Number!';
      }
    });
#+END_SRC

- whenever we get the user value it's in string format
- So we selected this button here using querySelector.
- And then we use the addEventListener method on that element to attach
  an event handler.
- And that event handler is this function here.

** Implementing the Game Logic
   :PROPERTIES:
   :CUSTOM_ID: implementing-the-game-logic
   :END:

#+BEGIN_SRC js
    const secretNumber = Math.trunc(Math.random() * 20) + 1;
    let score = 20;

    document.querySelector('.message');
    console.log(document.querySelector('.message').textContent);

    document.querySelector('.check').addEventListener('click', function () {
      const guess = Number(document.querySelector('.guess').value);
      console.log(guess, typeof guess);

    // When there is no input
      if (!guess) {
        document.querySelector('.message').textContent = '🚫 No Number!';
      } else if (guess === secretNumber) { // When player wins
        document.querySelector('.message').textContent = '🎉 Correct Number!';
      } else if (guess > secretNumber) { // When guess is too high
        if (score > 1) {
          document.querySelector('.message').textContent = '📈 Too high!';
          score--;
          document.querySelector('.score').textContent = score;
        } else {
          document.querySelector('.message').textContent = '💥 You lost the game!';
          document.querySelector('.score').textContent = 0;
        }
        // When guess is too low
      } else if (guess < secretNumber) {
        if (score > 1) {
          document.querySelector('.message').textContent = '📉 Too low!';
          score--;
          document.querySelector('.score').textContent = score;
        } else {
          document.querySelector('.message').textContent = '💥 You lost the game!';
          document.querySelector('.score').textContent = 0;
        }
      }
    });
#+END_SRC

- And so it's always good to keep a variable which actually holds the
  data in our code and not just rely on the DOM to hold our data. And
  the variable can also be called a state variable Because this score is
  part of the so-called application state which is basically all the
  data that is relevant to the application. ## Manipulating CSS Styles

#+BEGIN_SRC js
#+END_SRC

** Coding Challenge ##1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

#+BEGIN_SRC js
    'use strict';

    let secretNumber = Math.trunc(Math.random() * 20) + 1;
    let score = 20;
    let highScore = 0;
    console.log(secretNumber);
    document.querySelector('.message');
    console.log(document.querySelector('.message').textContent);

    document.querySelector('.check').addEventListener('click', function () {
      const guess = Number(document.querySelector('.guess').value);
      console.log(guess, typeof guess);

      // When there is no input
      if (!guess) {
        document.querySelector('.message').textContent = '🚫 No Number!';
      } else if (guess === secretNumber) {
        // When player wins
        document.querySelector('.message').textContent = '🎉 Correct Number!';
        document.querySelector('.number').textContent = secretNumber;
        document.querySelector('body').style.backgroundColor = '##60b347';
        document.querySelector('.number').style.width = '30rem';
        if (score > highScore) {
          highScore = score;
        }
      } else if (guess > secretNumber) {
        // When guess is too high
        if (score > 1) {
          document.querySelector('.message').textContent = '📈 Too high!';
          score--;
          document.querySelector('.score').textContent = score;
        } else {
          document.querySelector('.message').textContent = '💥 You lost the game!';
          document.querySelector('.score').textContent = 0;
        }
        // When guess is too low
      } else if (guess < secretNumber) {
        if (score > 1) {
          document.querySelector('.message').textContent = '📉 Too low!';
          score--;
          document.querySelector('.score').textContent = score;
        } else {
          document.querySelector('.message').textContent = '💥 You lost the game!';
          document.querySelector('.score').textContent = 0;
        }
      }
    });

    document.querySelector('.again').addEventListener('click', function () {
      document.querySelector('.message').textContent = 'Start Guessing';
      document.querySelector('body').style.backgroundColor = '##222';
      document.querySelector('.number').style.width = '15rem';
      secretNumber = Math.trunc(Math.random() * 20) + 1;
      score = 20;
      document.querySelector('.score').textContent = score;
      document.querySelector('.number').textContent = '?';
      document.querySelector('.guess').value = '';
      document.querySelector('.highscore').textContent = highScore;
    });
#+END_SRC

** Implementing High scores
   :PROPERTIES:
   :CUSTOM_ID: implementing-high-scores
   :END:

#+BEGIN_SRC js
    if (score > highScore) {
          highScore = score;
        }
        
    document.querySelector('.highscore').textContent = highScore;
#+END_SRC

** Refactoring Our Code: The DRY Principle
   :PROPERTIES:
   :CUSTOM_ID: refactoring-our-code-the-dry-principle
   :END:

#+BEGIN_SRC js
    'use strict';
    let secretNumber = Math.trunc(Math.random() * 20) + 1;
    let score = 20;
    let highscore = 0;

    const displayMessage = function (message) {
      document.querySelector('.message').textContent = message;
    };

    document.querySelector('.check').addEventListener('click', function () {
      const guess = Number(document.querySelector('.guess').value);
      console.log(guess, typeof guess);

      // When there is no input
      if (!guess) {
        // document.querySelector('.message').textContent = '⛔️ No number!';
        displayMessage('⛔️ No number!');

        // When player wins
      } else if (guess === secretNumber) {
        // document.querySelector('.message').textContent = '🎉 Correct Number!';
        displayMessage('🎉 Correct Number!');
        document.querySelector('.number').textContent = secretNumber;

        document.querySelector('body').style.backgroundColor = '##60b347';
        document.querySelector('.number').style.width = '30rem';

        if (score > highscore) {
          highscore = score;
          document.querySelector('.highscore').textContent = highscore;
        }

        // When guess is wrong
      } else if (guess !== secretNumber) {
        if (score > 1) {
          // document.querySelector('.message').textContent =
          // guess > secretNumber ? '📈 Too high!' : '📉 Too low!';
          displayMessage(guess > secretNumber ? '📈 Too high!' : '📉 Too low!');
          score--;
          document.querySelector('.score').textContent = score;
        } else {
          // document.querySelector('.message').textContent = '💥 You lost the game!';
          displayMessage('💥 You lost the game!');
          document.querySelector('.score').textContent = 0;
        }
      }
    });

    document.querySelector('.again').addEventListener('click', function () {
      score = 20;
      secretNumber = Math.trunc(Math.random() * 20) + 1;

      // document.querySelector('.message').textContent = 'Start guessing...';
      displayMessage('Start guessing...');
      document.querySelector('.score').textContent = score;
      document.querySelector('.number').textContent = '?';
      document.querySelector('.guess').value = '';

      document.querySelector('body').style.backgroundColor = '##222';
      document.querySelector('.number').style.width = '15rem';
    });
#+END_SRC

**** Guess the Number - HTML
     :PROPERTIES:
     :CUSTOM_ID: guess-the-number---html
     :END:

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <link rel="stylesheet" href="style.css" />
        <title>Guess My Number!</title>
      </head>
      <body>
        <header>
          <h1>Guess My Number!</h1>
          <p class="between">(Between 1 and 20)</p>
          <button class="btn again">Again!</button>
          <div class="number">?</div>
        </header>
        <main>
          <section class="left">
            <input type="number" class="guess" />
            <button class="btn check">Check!</button>
          </section>
          <section class="right">
            <p class="message">Start guessing...</p>
            <p class="label-score">💯 Score: <span class="score">20</span></p>
            <p class="label-highscore">
              🥇 Highscore: <span class="highscore">0</span>
            </p>
          </section>
        </main>
        <script src="script.js"></script>
      </body>
    </html>
#+END_EXAMPLE

**** Guess the Number - CSS
     :PROPERTIES:
     :CUSTOM_ID: guess-the-number---css
     :END:

#+BEGIN_SRC css
    @import url('https://fonts.googleapis.com/css?family=Press+Start+2P&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: inherit;
    }

    html {
      font-size: 62.5%;
      box-sizing: border-box;
    }

    body {
      font-family: 'Press Start 2P', sans-serif;
      color: ##eee;
      background-color: ##222;
      /* background-color: ##60b347; */
    }

    /* LAYOUT */
    header {
      position: relative;
      height: 35vh;
      border-bottom: 7px solid ##eee;
    }

    main {
      height: 65vh;
      color: ##eee;
      display: flex;
      align-items: center;
      justify-content: space-around;
    }

    .left {
      width: 52rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .right {
      width: 52rem;
      font-size: 2rem;
    }

    /* ELEMENTS STYLE */
    h1 {
      font-size: 4rem;
      text-align: center;
      position: absolute;
      width: 100%;
      top: 52%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .number {
      background: ##eee;
      color: ##333;
      font-size: 6rem;
      width: 15rem;
      padding: 3rem 0rem;
      text-align: center;
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translate(-50%, 50%);
    }

    .between {
      font-size: 1.4rem;
      position: absolute;
      top: 2rem;
      right: 2rem;
    }

    .again {
      position: absolute;
      top: 2rem;
      left: 2rem;
    }

    .guess {
      background: none;
      border: 4px solid ##eee;
      font-family: inherit;
      color: inherit;
      font-size: 5rem;
      padding: 2.5rem;
      width: 25rem;
      text-align: center;
      display: block;
      margin-bottom: 3rem;
    }

    .btn {
      border: none;
      background-color: ##eee;
      color: ##222;
      font-size: 2rem;
      font-family: inherit;
      padding: 2rem 3rem;
      cursor: pointer;
    }

    .btn:hover {
      background-color: ##ccc;
    }

    .message {
      margin-bottom: 8rem;
      height: 3rem;
    }

    .label-score {
      margin-bottom: 2rem;
    }
#+END_SRC

** PROJECT ##2: Modal Window
   :PROPERTIES:
   :CUSTOM_ID: project-2-modal-window
   :END:

#+BEGIN_SRC js
    'use strict';

    const modal = document.querySelector('.modal');
    const overlay = document.querySelector('.overlay');
    const btnCloseModal = document.querySelector('.close-modal');
    const btnsOpenModal = document.querySelectorAll('.show-modal');
#+END_SRC

** Working With Classes
   :PROPERTIES:
   :CUSTOM_ID: working-with-classes
   :END:

#+BEGIN_SRC js
    const openmodal = function () {
      console.log('Button clicked');
      modal.classList.remove('hidden');
      overlay.classList.remove('hidden');
    };

    for (let i = 0; i < btnsOpenModal.length; i++)
      btnsOpenModal[i].addEventListener('click', openmodal);

    const CloseModal = function () {
      modal.classList.add('hidden');
      overlay.classList.add('hidden');
    };

    btnCloseModal.addEventListener('click', CloseModal);

    overlay.addEventListener('click', CloseModal);
#+END_SRC

- in order to change the appearance of elements on our page.
- classes allow us to basically aggregate multiple CSS properties in
  just one, like a container.s o each class functions a bit like a
  container with a lot of properties in it.
- And then here, by adding and removing them, we basically can activate
  and deactivate certain styles, all at the same time.

** Handling an "Esc" Keypress Event
   :PROPERTIES:
   :CUSTOM_ID: handling-an-esc-keypress-event
   :END:

Now, keyboard events are so-called global events because they do not
happen on one specific element. And for global events like keyboard
events we usually list and on the whole document.

#+BEGIN_SRC js
    document.addEventListener('keydown', function (e) {
      //   console.log(e);
      if (e.key === 'Escape' && !modal.classList.contains('hideen')) {
        CloseModal();
      }
    });
#+END_SRC

** PROJECT ##3: Pig Game
   :PROPERTIES:
   :CUSTOM_ID: project-3-pig-game
   :END:

#+BEGIN_SRC js
    'use strict';

    // Selecting elements
    const score0El = document.querySelector('##score--0');
    const score1El = document.getElementById('score--0');
    const diceEl = document.querySelector('.dice');

    score0El.textContent = 0;
    score1El.textContent = 0;
    diceEl.classList.add('hidden');
#+END_SRC

** Rolling the Dice
   :PROPERTIES:
   :CUSTOM_ID: rolling-the-dice
   :END:

#+BEGIN_SRC js
    'use strict';

    // Selecting elements
    const score0El = document.querySelector('##score--0');
    const score1El = document.getElementById('score--1');

    const current0El = document.getElementById('current--0');
    const current1El = document.getElementById('current--1');

    const diceEl = document.querySelector('.dice');
    const btnNew = document.querySelector('.btn--new');
    const btnRoll = document.querySelector('.btn--roll');
    const btnHold = document.querySelector('.btn--hold');

    // Starting Conditions
    score0El.textContent = 0;
    score1El.textContent = 0;
    diceEl.classList.add('hidden');

    const scores = [0, 0];
    let currScore = 0;
    let activePlayer = 0; // 0 - Player 1 & 1 -Player 1

    btnRoll.addEventListener('click', function () {
      //1. Generate a random dice roll
      const dice = Math.trunc(Math.random() * 6) + 1;
      console.log(dice);
      //2. Diplay dice
      diceEl.classList.remove('hidden');
      diceEl.src = `dice-${dice}.png`;
      console.log(diceEl.src);

      //3.check for rolled 1
      if (dice !== 1) {
        currScore += dice;
        document.getElementById(`current--${activePlayer}`).textContent = currScore;
      } else {
        // switch to next player
         }
    });
#+END_SRC

** Switching the Active Player
   :PROPERTIES:
   :CUSTOM_ID: switching-the-active-player
   :END:

#+BEGIN_SRC js
    const player0El = document.querySelector('.player--0');
    const player1El = document.querySelector('.player--1');

    btnRoll.addEventListener('click', function () {
      //1. Generate a random dice roll
      const dice = Math.trunc(Math.random() * 6) + 1;
      //2. Diplay dice
      diceEl.classList.remove('hidden');
      diceEl.src = `dice-${dice}.png`;

      //3.check for rolled 1
      if (dice !== 1) {
        currScore += dice;
        document.getElementById(`current--${activePlayer}`).textContent = currScore;
      } else {
        // switch to next player
        document.getElementById(`current--${activePlayer}`).textContent = 0;
        currScore = 0;
        activePlayer = activePlayer === 0 ? 1 : 0;
        player0El.classList.toggle('player--active'); // Toggle will act as on off switch
        player1El.classList.toggle('player--active');
      }
    });
#+END_SRC

** Holding Current Score
   :PROPERTIES:
   :CUSTOM_ID: holding-current-score
   :END:

#+BEGIN_SRC js
    'use strict';

    // Selecting elements

    const player0El = document.querySelector('.player--0');
    const player1El = document.querySelector('.player--1');

    const score0El = document.querySelector('##score--0');
    const score1El = document.getElementById('score--1');

    const current0El = document.getElementById('current--0');
    const current1El = document.getElementById('current--1');

    const diceEl = document.querySelector('.dice');
    const btnNew = document.querySelector('.btn--new');
    const btnRoll = document.querySelector('.btn--roll');
    const btnHold = document.querySelector('.btn--hold');

    // Starting Conditions
    score0El.textContent = 0;
    score1El.textContent = 0;
    diceEl.classList.add('hidden');

    let scores = [0, 0];
    let currScore = 0;
    let activePlayer = 0; // 0 - Player 1 & 1 -Player 1
    let playing = true;

    const switchPlayer = function () {
      document.getElementById(`current--${activePlayer}`).textContent = 0;
      currScore = 0;
      activePlayer = activePlayer === 0 ? 1 : 0;
      player0El.classList.toggle('player--active');
      player1El.classList.toggle('player--active');
    };

    btnRoll.addEventListener('click', function () {
      if (playing) {
        //1. Generate a random dice roll
        const dice = Math.trunc(Math.random() * 6) + 1;
        //2. Diplay dice
        diceEl.classList.remove('hidden');
        diceEl.src = `dice-${dice}.png`;

        //3.check for rolled 1
        if (dice !== 1) {
          currScore += dice;
          document.getElementById(`current--${activePlayer}`).textContent =
            currScore;
        } else {
          // switch to next player
          switchPlayer();
        }
      }
    });

    btnHold.addEventListener('click', function () {
      if (playing) {
        scores[activePlayer] += currScore;
        document.getElementById(`score--${activePlayer}`).textContent =
          scores[activePlayer];
        // Switching Player
        if (scores[activePlayer] >= 10) {
          playing = false;
          diceEl.classList.add('hidden');
          document
            .querySelector(`.player--${activePlayer}`)
            .classList.add('player--winner');
          document
            .querySelector(`.player--${activePlayer}`)
            .classList.add('player--active');
        } else {
          switchPlayer();
        }
      }
    });
#+END_SRC

** Resetting the Game
   :PROPERTIES:
   :CUSTOM_ID: resetting-the-game
   :END:

#+BEGIN_SRC js
    const init = function () {
      scores = [0, 0];
      currentScore = 0;
      activePlayer = 0;
      playing = true;

      score0El.textContent = 0;
      score1El.textContent = 0;
      current0El.textContent = 0;
      current1El.textContent = 0;

      diceEl.classList.add('hidden');
      player0El.classList.remove('player--winner');
      player1El.classList.remove('player--winner');
      player0El.classList.add('player--active');
      player1El.classList.remove('player--active');
    };

    btnNew.addEventListener('click', init);
#+END_SRC

** Complete Code
   :PROPERTIES:
   :CUSTOM_ID: complete-code
   :END:

#### HTML

#+BEGIN_SRC js
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <link rel="stylesheet" href="style.css" />
        <title>Pig Game</title>
      </head>
      <body>
        <main>
          <section class="player player--0 player--active">
            <h2 class="name" id="name--0">Player 1</h2>
            <p class="score" id="score--0">43</p>
            <div class="current">
              <p class="current-label">Current</p>
              <p class="current-score" id="current--0">0</p>
            </div>
          </section>
          <section class="player player--1">
            <h2 class="name" id="name--1">Player 2</h2>
            <p class="score" id="score--1">24</p>
            <div class="current">
              <p class="current-label">Current</p>
              <p class="current-score" id="current--1">0</p>
            </div>
          </section>

          <img src="dice-5.png" alt="Playing dice" class="dice" />
          <button class="btn btn--new">🔄 New game</button>
          <button class="btn btn--roll">🎲 Roll dice</button>
          <button class="btn btn--hold">📥 Hold</button>
        </main>
        <script src="script.js"></script>
      </body>
    </html>
#+END_SRC

**** CSS
     :PROPERTIES:
     :CUSTOM_ID: css
     :END:

#+BEGIN_SRC js
    @import url('https://fonts.googleapis.com/css2?family=Nunito&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: inherit;
    }

    html {
      font-size: 62.5%;
      box-sizing: border-box;
    }

    body {
      font-family: 'Nunito', sans-serif;
      font-weight: 400;
      height: 100vh;
      color: ##333;
      background-image: linear-gradient(to top left, ##753682 0%, ##bf2e34 100%);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* LAYOUT */
    main {
      position: relative;
      width: 100rem;
      height: 60rem;
      background-color: rgba(255, 255, 255, 0.35);
      backdrop-filter: blur(200px);
      filter: blur();
      box-shadow: 0 3rem 5rem rgba(0, 0, 0, 0.25);
      border-radius: 9px;
      overflow: hidden;
      display: flex;
    }

    .player {
      flex: 50%;
      padding: 9rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: all 0.75s;
    }

    /* ELEMENTS */
    .name {
      position: relative;
      font-size: 4rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      word-spacing: 2px;
      font-weight: 300;
      margin-bottom: 1rem;
    }

    .score {
      font-size: 8rem;
      font-weight: 300;
      color: ##c7365f;
      margin-bottom: auto;
    }

    .player--active {
      background-color: rgba(255, 255, 255, 0.4);
    }
    .player--active .name {
      font-weight: 700;
    }
    .player--active .score {
      font-weight: 400;
    }

    .player--active .current {
      opacity: 1;
    }

    .current {
      background-color: ##c7365f;
      opacity: 0.8;
      border-radius: 9px;
      color: ##fff;
      width: 65%;
      padding: 2rem;
      text-align: center;
      transition: all 0.75s;
    }

    .current-label {
      text-transform: uppercase;
      margin-bottom: 1rem;
      font-size: 1.7rem;
      color: ##ddd;
    }

    .current-score {
      font-size: 3.5rem;
    }

    /* ABSOLUTE POSITIONED ELEMENTS */
    .btn {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      color: ##444;
      background: none;
      border: none;
      font-family: inherit;
      font-size: 1.8rem;
      text-transform: uppercase;
      cursor: pointer;
      font-weight: 400;
      transition: all 0.2s;

      background-color: white;
      background-color: rgba(255, 255, 255, 0.6);
      backdrop-filter: blur(10px);

      padding: 0.7rem 2.5rem;
      border-radius: 50rem;
      box-shadow: 0 1.75rem 3.5rem rgba(0, 0, 0, 0.1);
    }

    .btn::first-letter {
      font-size: 2.4rem;
      display: inline-block;
      margin-right: 0.7rem;
    }

    .btn--new {
      top: 4rem;
    }
    .btn--roll {
      top: 39.3rem;
    }
    .btn--hold {
      top: 46.1rem;
    }

    .btn:active {
      transform: translate(-50%, 3px);
      box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
    }

    .btn:focus {
      outline: none;
    }

    .dice {
      position: absolute;
      left: 50%;
      top: 16.5rem;
      transform: translateX(-50%);
      height: 10rem;
      box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2);
    }

    .player--winner {
      background-color: ##2f2f2f;
    }

    .player--winner .name {
      font-weight: 700;
      color: ##c7365f;
    }

    .hidden {
      display: none;
    }
#+END_SRC

**** Javascript
     :PROPERTIES:
     :CUSTOM_ID: javascript
     :END:

#+BEGIN_SRC js
    'use strict';

    // Selecting elements
    const player0El = document.querySelector('.player--0');
    const player1El = document.querySelector('.player--1');
    const score0El = document.querySelector('##score--0');
    const score1El = document.getElementById('score--1');
    const current0El = document.getElementById('current--0');
    const current1El = document.getElementById('current--1');

    const diceEl = document.querySelector('.dice');
    const btnNew = document.querySelector('.btn--new');
    const btnRoll = document.querySelector('.btn--roll');
    const btnHold = document.querySelector('.btn--hold');

    let scores, currentScore, activePlayer, playing;

    // Starting conditions
    const init = function () {
      scores = [0, 0];
      currentScore = 0;
      activePlayer = 0;
      playing = true;

      score0El.textContent = 0;
      score1El.textContent = 0;
      current0El.textContent = 0;
      current1El.textContent = 0;

      diceEl.classList.add('hidden');
      player0El.classList.remove('player--winner');
      player1El.classList.remove('player--winner');
      player0El.classList.add('player--active');
      player1El.classList.remove('player--active');
    };
    init();

    const switchPlayer = function () {
      document.getElementById(`current--${activePlayer}`).textContent = 0;
      currentScore = 0;
      activePlayer = activePlayer === 0 ? 1 : 0;
      player0El.classList.toggle('player--active');
      player1El.classList.toggle('player--active');
    };

    // Rolling dice functionality
    btnRoll.addEventListener('click', function () {
      if (playing) {
        // 1. Generating a random dice roll
        const dice = Math.trunc(Math.random() * 6) + 1;

        // 2. Display dice
        diceEl.classList.remove('hidden');
        diceEl.src = `dice-${dice}.png`;

        // 3. Check for rolled 1
        if (dice !== 1) {
          // Add dice to current score
          currentScore += dice;
          document.getElementById(`current--${activePlayer}`).textContent =
            currentScore;
        } else {
          // Switch to next player
          switchPlayer();
        }
      }
    });

    btnHold.addEventListener('click', function () {
      if (playing) {
        // 1. Add current score to active player's score
        scores[activePlayer] += currentScore;
        // scores[1] = scores[1] + currentScore

        document.getElementById(`score--${activePlayer}`).textContent =
          scores[activePlayer];

        // 2. Check if player's score is >= 100
        if (scores[activePlayer] >= 100) {
          // Finish the game
          playing = false;
          diceEl.classList.add('hidden');

          document
            .querySelector(`.player--${activePlayer}`)
            .classList.add('player--winner');
          document
            .querySelector(`.player--${activePlayer}`)
            .classList.remove('player--active');
        } else {
          // Switch to the next player
          switchPlayer();
        }
      }
    });

    btnNew.addEventListener('click', init);
#+END_SRC
* 12 Advanced DOM and Events
** How the DOM Really Works
   :PROPERTIES:
   :CUSTOM_ID: how-the-dom-really-works
   :END:

[[12. Advanced DOM and Events-1663411720931

- Allows us to make JavaScript interact with the browser;
- We can write JavaScript to create, modify and delete HTML elements;
  set styles, classes and attributes; and listen and respond to events;
  DOM tree is generated from an HTML document, which we can then
  interact with;
- DOM is a very complex API that contains lots of methods and properties
  to interact with the DOM tree

#+BEGIN_SRC js
    .querySelector() / .addEventListener() / .createElement() /
    .innerHTML / .textContent / .children / etc ...
#+END_SRC

*How the DOM API is organized behind the Scenes* [[12. Advanced DOM and
Events-1663412092906

- A DOM API is broken up into these different types of nodes. also want
  you to understand that each of these types of nodes has access to
  different properties and methods and that some of them even inherit
  more properties and methods from their ancestors in this organization.

** Selecting, Creating, and Deleting Elements
   :PROPERTIES:
   :CUSTOM_ID: selecting-creating-and-deleting-elements
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Selecting, Creating, and Deleting Elements

    // Selecting elements
    console.log(document.documentElement);
    console.log(document.head);
    console.log(document.body);

    const header = document.querySelector('.header');
    const allSections = document.querySelectorAll('.section');
    console.log(allSections);

    document.getElementById('section--1');
    const allButtons = document.getElementsByTagName('button');
    console.log(allButtons);

    console.log(document.getElementsByClassName('btn'));

    // Creating and inserting elements
    const message = document.createElement('div');
    message.classList.add('cookie-message');
    // message.textContent = 'We use cookied for improved functionality and analytics.';
    message.innerHTML =
      'We use cookied for improved functionality and analytics. <button class="btn btn--close-cookie">Got it!</button>';

    // header.prepend(message);
    header.append(message);
    // header.append(message.cloneNode(true));

    // header.before(message);
    // header.after(message);

    // Delete elements
    document
      .querySelector('.btn--close-cookie')
      .addEventListener('click', function () {
        // message.remove(); // new way of removing element
        message.parentElement.removeChild(message); // old way of removing element
      });
#+END_SRC

** Styles, Attributes and Classes
   :PROPERTIES:
   :CUSTOM_ID: styles-attributes-and-classes
   :END:

#+BEGIN_SRC js
    message.style.background = '#37383d';
    message.style.width = '120%';

    console.log(message.style.color);
    console.log(message.style.backgroundColor);

    console.log(getComputedStyle(message).color);
    console.log(getComputedStyle(message).height);

    message.style.height =
      Number.parseFloat(getComputedStyle(message).height, 10) + 30 + 'px';

    document.documentElement.style.setProperty('--color-primary', 'orangered');

    // Attributes
    const logo = document.querySelector('.nav__logo');
    console.log(logo.alt);
    console.log(logo.src);
    console.log(logo.className);

    logo.alt = 'Beautiful minimilist logo';

    // Non-standard
    console.log(logo.designer);
    console.log(logo.getAttribute('designer'));
    logo.setAttribute('company', 'Bankist');

    console.log(logo.src); // Absolute Path
    console.log(logo.getAttribute('src')); // Relative Path

    const link = document.querySelector('.twitter-link');
    console.log(link.href);

    // Data attributes
    console.log(logo.dataset.versionNumber);

    // Classes
    logo.classList.add('c', 'j');
    logo.classList.remove('c', 'j');
    logo.classList.toggle('c');
    logo.classList.contains('c'); // not includes as in arrays

    // Don't use
    logo.classList = 'xoraus';
#+END_SRC

** Implementing Smooth Scrolling
   :PROPERTIES:
   :CUSTOM_ID: implementing-smooth-scrolling
   :END:

#+BEGIN_SRC js
    const buttonTo = document.querySelector('.btn--scroll-to');
    const section1 = document.querySelector('#section--1');

    buttonTo.addEventListener('click', function (e) {
      const s1cords = section1.getBoundingClientRect();
      console.log(s1cords);

      console.log(e.target.getBoundingClientRect());

      console.log('Current scroll (X/Y', window.pageXOffset, window.pageYOffset);

      console.log(
        'height/width viewport',
        document.documentElement.clientHeight,
        document.documentElement.clientWidth
      );

      // scrolling - Old Implemetion
      // window.scrollTo(
      //   s1cords.left + window.pageXOffset,
      //   s1cords.top + window.pageYOffset
      // );

      // window.scrollTo({
      //   left: s1cords.left + window.pageXOffset,
      //   top: s1cords.top + window.pageYOffset,
      //   behavior: 'smooth',
      // });

      // Modern way of implementing scrolling - works only in modern browsers

      section1.scrollIntoView({ behavior: 'smooth' });
    });
#+END_SRC

** Types of Events and Event Handlers
   :PROPERTIES:
   :CUSTOM_ID: types-of-events-and-event-handlers
   :END:

- There are two ways why addEventListener is better. The first one is
  that it allows us to add multiple event listeners to the same event.
  And the second one is that we can actually remove an event handler in
  case we don't need it anymore.

#+BEGIN_SRC js
    const h1 = document.querySelector('h1');

    const alertH1 = function (e) {
      alert('addEventListerner: Great! You are reading the heading :D');
      h1.removeEventListener('mouseenter', alertH1);
    };

    h1.addEventListener('mouseenter', alertH1);

    // Removing event listener after 3 seconds
    setTimeout(() => h1.removeEventListener('mouseenter', alertH1), 3000); 


    /*
    //  However, this way of listening to events is a bit old school.
     h1.onmouseenter = function (e) {
     alert('addEventListerner: Great! You are reading the heading :D');
    };
    */
#+END_SRC

** Event Propagation: Bubbling and Capturing
   :PROPERTIES:
   :CUSTOM_ID: event-propagation-bubbling-and-capturing
   :END:

*Bubbling and Capturing* [[12. Advanced DOM and
Events-1663427457918 - Now by default, events can only be handled
in the target, and in the bubbling phase. However, we can set up event
listeners in a way that they listen to events in the capturing phase
instead. Also, actually not all types of events that do have a capturing
and bubbling phase. Some of them are created right on the target
element, and so we can only handle them there. - We can also say that
events propagate, which is really what capturing and bubbling is. It's
events propagating from one place to another.

** Event Propagation in Practice
   :PROPERTIES:
   :CUSTOM_ID: event-propagation-in-practice
   :END:

- The event handler functions are listening for click events that happen
  on the element itself, and they are also listening for events that
  keep bubbling up from their child elements and that's the reason why
  the color changes in all of the parent elements here as well.
- At event listener, it's only listening for events in the bubbling
  phase, but not in the capturing phase. So that is the default behavior
  of the add event listener method, and the reason for that is that the
  capturing phase is usually irrelevant for us.
- Now, on the other hand, the bubbling phase can be very useful for
  something called event delegation.
- Capturing is actually rarely used these days. And the only reason why
  both o capturing and bubbling actually exist, is only for historical
  reasons. So, from the time where different browsers implemented
  different versions of JavaScript.

#+BEGIN_SRC js
    const randomInt = (min, max) =>
      Math.floor(Math.random() * (max - min + 1) + min);
    const randomColor = () =>
      `rgb(${randomInt(0, 255)},${randomInt(0, 255)},${randomInt(0, 255)})`;

    document.querySelector('.nav__link').addEventListener('click', function (e) {
      this.style.backgroundColor = randomColor();
      console.log('LINK', e.target, e.currentTarget);
      console.log(e.currentTarget === this);

      // Stop propagation
      // e.stopPropagation();
    });

    document.querySelector('.nav__links').addEventListener('click', function (e) {
      this.style.backgroundColor = randomColor();
      console.log('CONTAINER', e.target, e.currentTarget);
    });

    document.querySelector('.nav').addEventListener('click', function (e) {
      this.style.backgroundColor = randomColor();
      console.log('NAV', e.target, e.currentTarget);
    });
#+END_SRC

[[12. Advanced DOM and Events-1663431880090

** Event Delegation: Implementing Page Navigation
   :PROPERTIES:
   :CUSTOM_ID: event-delegation-implementing-page-navigation
   :END:

#+BEGIN_SRC js
    // Page Navigation

    document.querySelectorAll('.nav__link').forEach(function (el) {
      el.addEventListener('click', function (e) {
        e.preventDefault();
        const id = this.getAttribute('href');
        document.querySelector(id).scrollIntoView({ behavior: 'smooth' });
      });
    });

    /* Now, as you see, this actually works just fine, but the problem is that it's not really efficient.
    So we are adding here the exact same callback function, so this event handler here, we are adding it once to each of these three elements.
    So the exact same function is now attached to these three elements. And that's kind of unnecessary. And it's really just not a clean solution in that case. And so, the better solution without a doubt, is to use events delegation. */

    // 1. Add event listener to common parent element
    // 2. Determine what element originated the elvent

    document.querySelector('.nav__links').addEventListener('click', function (e) {
      e.preventDefault();

      // Matching strategy - The tricky part
      if (e.target.classList.contains('nav__link')) {
        const id = e.target.getAttribute('href');
        document.querySelector(id).scrollIntoView({ behavior: 'smooth' });
      }
    });
#+END_SRC

** DOM Traversing
   :PROPERTIES:
   :CUSTOM_ID: dom-traversing
   :END:

#+BEGIN_SRC js
    const h1 = document.querySelector('h1');

    // Going downwards: child
    console.log(h1.querySelectorAll('.highlight'));
    console.log(h1.childNodes);
    console.log(h1.children);

    h1.firstElementChild.style.color = 'white';
    h1.lastElementChild.style.color = 'orangered';

    // Going upwards
    console.log(h1.parentNode);
    console.log(h1.parentElement);

    h1.closest('.header').style.background = 'var(--gradient-secondary)';

    h1.closest('h1').style.background = 'var(--gradient-primary)';

    // Going sideways: siblings
    console.log(h1.previousElementSibling);
    console.log(h1.nextElementSibling);

    console.log(h1.previousSibling);
    console.log(h1.nextSibling);

    console.log(h1.parentElement.children);
    [...h1.parentElement.children].forEach(function (el) {
      if (el !== h1) {
        el.style.transform = 'scale(0.5)';
      }
    });
#+END_SRC

[[12. Advanced DOM and Events-1663484588539

** Tabbed Component
   :PROPERTIES:
   :CUSTOM_ID: tabbed-component
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Tabbed component

    tabsContainer.addEventListener('click', function (e) {
      const clicked = e.target.closest('.operations__tab');

      // Guard clause
      if (!clicked) return;

      // Remove active classes
      tabs.forEach(t => t.classList.remove('operations__tab--active'));
      tabsContent.forEach(c => c.classList.remove('operations__content--active'));

      // Activate tab
      clicked.classList.add('operations__tab--active');

      // Activate content area
      document
        .querySelector(`.operations__content--${clicked.dataset.tab}`)
        .classList.add('operations__content--active');
    });
#+END_SRC

[[12. Advanced DOM and Events-1663523150947

** Passing Arguments to Event Handlers
   :PROPERTIES:
   :CUSTOM_ID: passing-arguments-to-event-handlers
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Menu fade animation
    const handleHover = function (e) {
      if (e.target.classList.contains('nav__link')) {
        const link = e.target;
        const siblings = link.closest('.nav').querySelectorAll('.nav__link');
        const logo = link.closest('.nav').querySelector('img');

        siblings.forEach(el => {
          if (el !== link) el.style.opacity = this;
        });
        logo.style.opacity = this;
      }
    };

    // Passing "argument" into handler
    nav.addEventListener('mouseover', handleHover.bind(0.5));
    nav.addEventListener('mouseout', handleHover.bind(1));
#+END_SRC

[[12. Advanced DOM and Events-1663524394907

** Implementing a Sticky Navigation: The Scroll Event
   :PROPERTIES:
   :CUSTOM_ID: implementing-a-sticky-navigation-the-scroll-event
   :END:

#+BEGIN_SRC js
    // Sticky navigation
    const initialCords = section1.getBoundingClientRect();
    window.addEventListener('scroll', function () {
      if (this.window.scrollY > initialCords.top) nav.classList.add('sticky');
      else nav.classList.remove('sticky');
    });
#+END_SRC

- =window.scrollY= this is a very inefficient method.

** A Better Way: The Intersection Observer API
   :PROPERTIES:
   :CUSTOM_ID: a-better-way-the-intersection-observer-api
   :END:

- Well, this API allows our code to basically observe changes to the way
  that a certain target element intersects another element, or the way
  it intersects the viewport.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Sticky navigation: Intersection Observer API

    const header = document.querySelector('.header');
    const navHeight = nav.getBoundingClientRect().height;

    const stickyNav = function (entries) {
      const [entry] = entries;
      // console.log(entry);

      if (!entry.isIntersecting) nav.classList.add('sticky');
      else nav.classList.remove('sticky');
    };

    const headerObserver = new IntersectionObserver(stickyNav, {
      root: null,
      threshold: 0,
      rootMargin: `-${navHeight}px`,
    });

    headerObserver.observe(header);
#+END_SRC

** Revealing Elements on Scroll
   :PROPERTIES:
   :CUSTOM_ID: revealing-elements-on-scroll
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Reveal sections
    const allSections = document.querySelectorAll('.section');

    const revealSection = function (entries, observer) {
      const [entry] = entries;

      if (!entry.isIntersecting) return;

      entry.target.classList.remove('section--hidden');
      observer.unobserve(entry.target);
    };

    const sectionObserver = new IntersectionObserver(revealSection, {
      root: null,
      threshold: 0.15,
    });

    allSections.forEach(function (section) {
      sectionObserver.observe(section);
      section.classList.add('section--hidden');
    });
#+END_SRC

** Lazy Loading Images
   :PROPERTIES:
   :CUSTOM_ID: lazy-loading-images
   :END:

#+BEGIN_SRC js
    // Lazy loading images
    const imgTargets = document.querySelectorAll('img[data-src]');

    const loadImg = function (entries, observer) {
      const [entry] = entries;

      if (!entry.isIntersecting) return;

      // Replace src with data-src
      entry.target.src = entry.target.dataset.src;

      entry.target.addEventListener('load', function () {
        entry.target.classList.remove('lazy-img');
      });

      observer.unobserve(entry.target);
    };

    const imgObserver = new IntersectionObserver(loadImg, {
      root: null,
      threshold: 0,
      rootMargin: '200px',
    });

    imgTargets.forEach(img => imgObserver.observe(img));
#+END_SRC

** Building a Slider Component: Part 1 & Part 2
   :PROPERTIES:
   :CUSTOM_ID: building-a-slider-component-part-1-part-2
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Slider
    const slider = function () {
      const slides = document.querySelectorAll('.slide');
      const btnLeft = document.querySelector('.slider__btn--left');
      const btnRight = document.querySelector('.slider__btn--right');
      const dotContainer = document.querySelector('.dots');

      let curSlide = 0;
      const maxSlide = slides.length;

      // Functions
      const createDots = function () {
        slides.forEach(function (_, i) {
          dotContainer.insertAdjacentHTML(
            'beforeend',
            `<button class="dots__dot" data-slide="${i}"></button>`
          );
        });
      };

      const activateDot = function (slide) {
        document
          .querySelectorAll('.dots__dot')
          .forEach(dot => dot.classList.remove('dots__dot--active'));

        document
          .querySelector(`.dots__dot[data-slide="${slide}"]`)
          .classList.add('dots__dot--active');
      };

      const goToSlide = function (slide) {
        slides.forEach(
          (s, i) => (s.style.transform = `translateX(${100 * (i - slide)}%)`)
        );
      };

      // Next slide
      const nextSlide = function () {
        if (curSlide === maxSlide - 1) {
          curSlide = 0;
        } else {
          curSlide++;
        }

        goToSlide(curSlide);
        activateDot(curSlide);
      };

      const prevSlide = function () {
        if (curSlide === 0) {
          curSlide = maxSlide - 1;
        } else {
          curSlide--;
        }
        goToSlide(curSlide);
        activateDot(curSlide);
      };

      const init = function () {
        goToSlide(0);
        createDots();

        activateDot(0);
      };
      init();
      
    // Event handlers
      btnRight.addEventListener('click', nextSlide);
      btnLeft.addEventListener('click', prevSlide);

      document.addEventListener('keydown', function (e) {
        if (e.key === 'ArrowLeft') prevSlide();
        e.key === 'ArrowRight' && nextSlide();
      });

      dotContainer.addEventListener('click', function (e) {
        if (e.target.classList.contains('dots__dot')) {
          const { slide } = e.target.dataset;
          goToSlide(slide);
          activateDot(slide);
        }
      });
    };
    slider();
#+END_SRC

** Lifecycle DOM Events
   :PROPERTIES:
   :CUSTOM_ID: lifecycle-dom-events
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Lifecycle DOM Events
    document.addEventListener('DOMContentLoaded', function (e) {
      console.log('HTML parsed and DOM tree built!', e);
    });

    window.addEventListener('load', function (e) {
      console.log('Page fully loaded', e);
    });

    window.addEventListener('beforeunload', function (e) {
      e.preventDefault();
      console.log(e);
      e.returnValue = '';
    });
#+END_SRC

** Efficient Script Loading: defer and async
   :PROPERTIES:
   :CUSTOM_ID: efficient-script-loading-defer-and-async
   :END:

*DEFER AND ASYNC SCRIPT LOADING* [[12. Advanced DOM and
Events-1663584302643

*REGULAR VS. ASYNC VS. DEFER* [[12. Advanced DOM and
Events-1663584339910 - Because defer will guarantee the correct
order of execution. Now, for third party scripts, where the order does
not matter, for example, an analytics software like Google Analytics, or
an ad script, or something like that, then in this case, you should
totally use async. - So if you need to support all browsers, then you
need to put your script tag at the end of the body in and not in the
head.
* 08 Data Structures, Modern Operators and Strings
** Destructuring Arrays
   :PROPERTIES:
   :CUSTOM_ID: destructuring-arrays
   :END:

#+BEGIN_SRC js
    'use strict';

    const { SlowBuffer } = require('buffer');

    // Data needed for a later exercise
    const flights =
      '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

    // Data needed for first part of the section
    const restaurant = {
      name: 'Classico Italiano',
      location: 'Via Angelo Tavanti 23, Firenze, Italy',
      categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
      starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
      mainMenu: ['Pizza', 'Pasta', 'Risotto'],

      openingHours: {
        thu: {
          open: 12,
          close: 22,
        },
        fri: {
          open: 11,
          close: 23,
        },
        sat: {
          open: 0, // Open 24 hours
          close: 24,
        },
      },
      order: function (starterIndex, mainIndex) {
        return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
      },
    };
#+END_SRC

#+BEGIN_SRC js
    const arr = [2, 3, 4];
    const a = arr[0];
    const b = arr[1];
    const c = arr[2];
    console.log(a, b, c);

    // can be done as following using destructring

    const [x, y, z] = arr;

    // Nested Destructuringc
    const nested = [2, 4, [5, 6]];
    // const [i, , j] = nested;
    const [i, , [j, k]] = nested;
    console.log(i, j, k);

    let [main, ,starter] = restaurant.categories;
    console.log(main, starter)

    // Switching variables
    // const temp = main
    // main = secondary
    // secondary = main
    // console.log(main, secondary)

    // Recieve 2 values from a function
    const [starter, mainCourse] = restaurant.order(2, 0);
    console.log(starter, mainCourse); // output: Garlic Bread Pizza

    // Without Default Values
    const [p, q, r] = [8, 9];
    console.log(p, q, r); // output: p = 8, q = 9, r = undefined

    // With Default Values
    const [s = 1, t = 1, u = 1] = [8, 9];
    console.log(s, t, u); // output: s = 8, t = 9, u = 1
#+END_SRC

** Destructuring Objects
   :PROPERTIES:
   :CUSTOM_ID: destructuring-objects
   :END:

#+BEGIN_SRC js
    const restaurant = {
      name: 'Classico Italiano',
      location: 'Via Angelo Tavanti 23, Firenze, Italy',
      categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
      starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
      mainMenu: ['Pizza', 'Pasta', 'Risotto'],

      openingHours: {
        thu: {
          open: 12,
          close: 22,
        },
        fri: {
          open: 11,
          close: 23,
        },
        sat: {
          open: 0, // Open 24 hours
          close: 24,
        },
      },
      order: function (starterIndex, mainIndex) {
        return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
      },
      // Added after The Spread Operator (...) Lecture
      orderDelivery: function ({ starterIndex = 1, mainIndex = 0, time = '20:00', address }) {
        console.log(
          `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
        );
      },
      // added after Rest Pattern and Parameters Lecture
      orderPizza: function (mainIngredient, ...otherIngredients) {
        console.log(mainIngredient);
        console.log(otherIngredients);
      },
    };
#+END_SRC

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Destructuring Objects
    restaurant.orderDelivery({
      time: '22:30',
      address: 'Via del Sole, 21',
      mainIndex: 2,
      starterIndex: 2,
    });

    restaurant.orderDelivery({
      address: 'Via del Sole, 21',
      starterIndex: 1,
    });

    const { name, openingHours, categories } = restaurant;
    console.log(name, openingHours, categories);

    const {
      name: restaurantName,
      openingHours: hours,
      categories: tags,
    } = restaurant;
    console.log(restaurantName, hours, tags);

    // Default values
    const { menu = [], starterMenu: starters = [] } = restaurant;
    console.log(menu, starters);

    // Mutating variables
    let a = 111;
    let b = 999;
    const obj = { a: 23, b: 7, c: 14 };
    ({ a, b } = obj);
    console.log(a, b);

    // Nested objects
    const {
      fri: { open: o, close: c },
    } = openingHours;
    console.log(o, c);


    ///////////////////////////////////////
    // Destructuring Arrays
    const arr = [2, 3, 4];
    const a = arr[0];
    const b = arr[1];
    const c = arr[2];

    const [x, y, z] = arr;
    console.log(x, y, z);
    console.log(arr);

    let [main, , secondary] = restaurant.categories;
    console.log(main, secondary);

    // Switching variables
    // const temp = main;
    // main = secondary;
    // secondary = temp;
    // console.log(main, secondary);

    [main, secondary] = [secondary, main];
    console.log(main, secondary);

    // Receive 2 return values from a function
    const [starter, mainCourse] = restaurant.order(2, 0);
    console.log(starter, mainCourse);

    // Nested destructuring
    const nested = [2, 4, [5, 6]];
    // const [i, , j] = nested;
    const [i, , [j, k]] = nested;
    console.log(i, j, k);

    // Default values
    const [p = 1, q = 1, r = 1] = [8, 9];
    console.log(p, q, r);
#+END_SRC

** The Spread Operator (...)
   :PROPERTIES:
   :CUSTOM_ID: the-spread-operator
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The Spread Operator (...)

    const arr = [7, 8, 9];
    const badNewArr = [1, 2, arr[0], arr[1], arr[2]];
    console.log(badNewArr); // output: [1,2,7,8,9]

    const newArr = [1, 2, ...arr];
    console.log(newArr); // output: [1,2,7,8,9]

    console.log(...newArr); // output: 1,2,7,8,9 
    console.log(1, 2, 7, 8, 9); // output: 1,2,7,8,9

    const newMenu = [...restaurant.mainMenu, 'Gnocci'];
    console.log(newMenu); // output: ['Pizza', 'Pasta', 'Risotto', 'Gnocci']

    // Copy array
    const mainMenuCopy = [...restaurant.mainMenu];

    // Join 2 arrays
    const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];
    console.log(menu);

    // Iterables: arrays, strings, maps, sets. NOT objects
    const str = 'Jonas';
    const letters = [...str, ' ', 'S.'];
    console.log(letters); // output: ['J', 'o', 'n', 'a', 's', ' ', 'S.']
    console.log(...str); // output: J o n a s
    // console.log(`${...str} Schmedtmann`); // error - this will not work

    // Real-world example
    const ingredients = [
      // prompt("Let's make pasta! Ingredient 1?"),
      // prompt('Ingredient 2?'),
      // prompt('Ingredient 3'),
    ];
    console.log(ingredients);

    restaurant.orderPasta(ingredients[0], ingredients[1], ingredients[2]);
    restaurant.orderPasta(...ingredients);

    // Objects
    const newRestaurant = { foundedIn: 1998, ...restaurant, founder: 'Guiseppe' };
    console.log(newRestaurant);

    const restaurantCopy = { ...restaurant };
    restaurantCopy.name = 'Ristorante Roma';
    console.log(restaurantCopy.name);
    console.log(restaurant.name);
#+END_SRC

- Spread operator takes all the elements from the array and it also
  doesn't create new variables. And as a consequence, we can only use it
  in places where we would otherwise write values separated by commas.
- two important use cases of the spread operator are which is to create
  shallow copies of arrays, and to merge two arrays together.
- So basically, most of the built-in data structures in JavaScript are
  now iterables, but except objects. ## Rest Pattern and Parameters

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Rest Pattern and Parameters
    // 1) Destructuring

    // SPREAD, because on RIGHT side of =
    const arr = [1, 2, ...[3, 4]];

    // REST, because on LEFT side of =
    const [a, b, ...others] = [1, 2, 3, 4, 5];
    console.log(a, b, others); // output: 1, 2, [3, 4, 5]

    const [pizza, , risotto, ...otherFood] = [
      ...restaurant.mainMenu,
      ...restaurant.starterMenu,
    ];
    console.log(pizza, risotto, otherFood); // does not include the skipped values

    // Objects
    const { sat, ...weekdays } = restaurant.openingHours;
    console.log(weekdays);

    // 2) Functions
    const add = function (...numbers) {
      let sum = 0;
      for (let i = 0; i < numbers.length; i++) sum += numbers[i];
      console.log(sum);
    };

    add(2, 3);
    add(5, 3, 7, 2);
    add(8, 2, 5, 3, 2, 1, 4);

    const x = [23, 5, 7];
    add(...x);

    restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');
    restaurant.orderPizza('mushrooms');
#+END_SRC

- So the spread operator is used where we would otherwise write values,
  separated by a comma. On the other hand the rest is pattern is
  basically used where we would otherwise write variable names separated
  by commas.

** Short Circuiting (&& and Il)
   :PROPERTIES:
   :CUSTOM_ID: short-circuiting-and-il
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Short Circuiting (&& and ||)

    console.log('---- OR ----');
    // Use ANY data type, return ANY data type, short-circuiting
    console.log(3 || 'Jonas'); // output: 3
    console.log('' || 'Jonas'); // output: Jonas
    console.log(true || 0); // output: true
    console.log(undefined || null); // output: null

    console.log(undefined || 0 || '' || 'Hello' || 23 || null); // output: Hello

    restaurant.numGuests = 0;
    const guests1 = restaurant.numGuests ? restaurant.numGuests : 10;
    console.log(guests1); // output: 10

    const guests2 = restaurant.numGuests || 10;
    console.log(guests2); // output: 

    console.log('---- AND ----'); 
    console.log(0 && 'Jonas'); // output: false
    console.log(7 && 'Jonas'); // output: true

        console.log('Hello' && 23 && null && 'jonas'); // output: null

    // Practical example
    if (restaurant.orderPizza) {
      restaurant.orderPizza('mushrooms', 'spinach');
    }

    // above if block can be written as
    restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach');
#+END_SRC

- So the OR operator will return the first truthy. value of all the
  operands, or simply the last value if all of them are falsy.
- On the other hand, the AND operator will return the first falsy value
  or the last value if all of them are truthy.
- And as for practical applications, we can use the OR operator to set
  default values, and we can use the AND operator to execute code in the
  second operand if the first one IS true. ## The Nullish Coalescing
  Operator (??)

#+BEGIN_SRC js
    // The Nullish Coalescing Operator
    restaurant.numGuests = 0;
    const guests = restaurant.numGuests || 10;
    console.log(guests);

    // Nullish: null and undefined (NOT 0 or '')
    const guestCorrect = restaurant.numGuests ?? 10;
    console.log(guestCorrect);
#+END_SRC

- The problem was that we wanted 'number of guests' to be zero but
  because of how OR operator || works the result will be 10 instead of
  0.
- In order to solve the problem ES20 introduced 'The Nullish Coalescing
  Operator (??)' ## Logical Assignment Operators

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Logical Assignment Operators
    const rest1 = {
      name: 'Capri',
      // numGuests: 20,
      numGuests: 0,
    };

    const rest2 = {
      name: 'La Piazza',
      owner: 'Giovanni Rossi',
    };

    // OR assignment operator
    // rest1.numGuests = rest1.numGuests || 10;
    // rest2.numGuests = rest2.numGuests || 10;
    // rest1.numGuests ||= 10;
    // rest2.numGuests ||= 10;

    // nullish assignment operator (null or undefined)
    rest1.numGuests ??= 10;
    rest2.numGuests ??= 10;

    // AND assignment operator
    // rest1.owner = rest1.owner && '<ANONYMOUS>';
    // rest2.owner = rest2.owner && '<ANONYMOUS>';
    rest1.owner &&= '<ANONYMOUS>';
    rest2.owner &&= '<ANONYMOUS>';

    console.log(rest1);
    console.log(rest2);
#+END_SRC

- Introduced in ES2021
- And so basically, what the logical and assignment operator does is to
  assign a value to a variable if it is currently truthy. ## Coding
  Challenge ##1 We're building a football betting app (soccer for my
  American friends 😅)!

Suppose we get data from a web service about a certain game (below). In
this challenge we're gonna work with the data. So here are your tasks:

1. Create one player array for each team (variables 'players1' and
   'players2')
2. The first player in any player array is the goalkeeper and the others
   are field players. For Bayern Munich (team 1) create one variable
   ('gk') with the goalkeeper's name, and one array ('fieldPlayers')
   with all the remaining 10 field players
3. Create an array 'allPlayers' containing all players of both teams (22
   players)
4. During the game, Bayern Munich (team 1) used 3 substitute players. So
   create a new array ('players1Final') containing all the original
   team1 players plus 'Thiago', 'Coutinho' and 'Perisic'
5. Based on the game.odds object, create one variable for each odd
   (called 'team1', 'draw' and 'team2')
6. Write a function ('printGoals') that receives an arbitrary number of
   player names (NOT an array) and prints each of them to the console,
   along with the number of goals that were scored in total (number of
   player names passed in)
7. The team with the lower odd is more likely to win. Print to the
   console which team is more likely to win, WITHOUT using an if/else
   statement or the ternary operator.

TEST DATA FOR 6: Use players 'Davies', 'Muller', 'Lewandowski' and
'Kimmich'. Then, call the function again with players from game.scored

#+BEGIN_SRC js
    // 1.
    const [players1, players2] = game.players;
    console.log(players1, players2);

    // 2.
    const [gk, ...fieldPlayers] = players1;
    console.log(gk, fieldPlayers);

    // 3.
    const allPlayers = [...players1, ...players2];
    console.log(allPlayers);

    // 4.
    const players1Final = [...players1, 'Thiago', 'Coutinho', 'Periscic'];

    // 5.
    const {
      odds: { team1, x: draw, team2 },
    } = game;
    console.log(team1, draw, team2);

    // 6.
    const printGoals = function (...players) {
      console.log(players);
      console.log(`${players.length} goals were scored`);
    };

    // printGoals('Davies', 'Muller', 'Lewandowski', 'Kimmich');
    // printGoals('Davies', 'Muller');
    printGoals(...game.scored);

    // 7.
    team1 < team2 && console.log('Team 1 is more likely to win');
    team1 > team2 && console.log('Team 2 is more likely to win');
#+END_SRC

** Looping Arrays: The for-of Loop
   :PROPERTIES:
   :CUSTOM_ID: looping-arrays-the-for-of-loop
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The for-of Loop
    const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];

    for (const item of menu) console.log(item);

    for (const [i, el] of menu.entries()) {
      console.log(`${i + 1}: ${el}`);
    }

    // console.log([...menu.entries()]);
#+END_SRC

** Enhanced Object Literals
   :PROPERTIES:
   :CUSTOM_ID: enhanced-object-literals
   :END:

#+BEGIN_SRC js
    const weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
    const openingHours = {
      [weekdays[3]]: {
        open: 12,
        close: 22,
      },
      [weekdays[4]]: {
        open: 11,
        close: 23,
      },
      [weekdays[5]]: {
        open: 0, // Open 24 hours
        close: 24,
      },
    };

    const restaurant = {
      name: 'Classico Italiano',
      location: 'Via Angelo Tavanti 23, Firenze, Italy',
      categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
      starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
      mainMenu: ['Pizza', 'Pasta', 'Risotto'],

      // ES6 enhanced object literals
      openingHours,

      order(starterIndex, mainIndex) {
        return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
      },

      orderDelivery({ starterIndex = 1, mainIndex = 0, time = '20:00', address }) {
        console.log(
          `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
        );
      },

      orderPasta(ing1, ing2, ing3) {
        console.log(
          `Here is your declicious pasta with ${ing1}, ${ing2} and ${ing3}`
        );
      },

      orderPizza(mainIngredient, ...otherIngredients) {
        console.log(mainIngredient);
        console.log(otherIngredients);
      },
    };
#+END_SRC

** Optional Chaining (?.)
   :PROPERTIES:
   :CUSTOM_ID: optional-chaining-.
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Optional Chaining
    if (restaurant.openingHours && restaurant.openingHours.mon)
      console.log(restaurant.openingHours.mon.open); // output: undefined

    // console.log(restaurant.openingHours.mon.open);

    // WITH optional chaining
    console.log(restaurant.openingHours.mon?.open);
    console.log(restaurant.openingHours?.mon?.open);

    // Example
    const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

    for (const day of days) {
      const open = restaurant.openingHours[day]?.open ?? 'closed';
      console.log(`On ${day}, we open at ${open}`);
    } 
    // output: 
    // On mon, we open at closed 
    // On Tue, open closed 
    // On wed, we open at closed 
    // On thu, we open at 12 
    // On fri, we open at 11
    // On sat, we open at 0 
    // On sun, we open at closed

    // Methods
    console.log(restaurant.order?.(0, 1) ?? 'Method does not exist'); // output: ['Focaccia', 'Pasta']

    console.log(restaurant.orderRisotto?.(0, 1) ?? 'Method does not exist'); // output: Method does not exist

    // Arrays
    const users = [{ name: 'Jonas', email: 'hello@jonas.io' }];
    // const users = [];

    console.log(users[0]?.name ?? 'User array empty'); // output: Jonas

    if (users.length > 0) console.log(users[0].name);
    else console.log('user array empty'); // output: Jonas
#+END_SRC

** Looping Objects: Object Keys, Values, and Entries
   :PROPERTIES:
   :CUSTOM_ID: looping-objects-object-keys-values-and-entries
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Looping Objects: Object Keys, Values, and Entries

    // Property NAMES
    const properties = Object.keys(openingHours);
    console.log(properties); // output:  ['thu', 'fri', 'sat']

    let openStr = `We are open on ${properties.length} days: `;
    for (const day of properties) {
      openStr += `${day}, `;
    }
    console.log(openStr); // output: We are open on 3 days: thu, fri, sat, 

    // Property VALUES
    const values = Object.values(openingHours);
    console.log(values);

    // output:
    // 0: {open: 12, close: 22}
    // 1: {open: 11, close: 23}
    // 2: {open: 0, close: 24}

    // Entire object
    const entries = Object.entries(openingHours);
    // console.log(entries);

    // [key, value]
    for (const [day, { open, close }] of entries) {
      console.log(`On ${day} we open at ${open} and close at ${close}`);
    }
    // output: 
    // On thu we open at 12 and close at 22
    // On fri we open at 11 and close at 23
    // On sat we open at 0 and close at 24
#+END_SRC

** Coding Challenge ##2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

Let's continue with our football betting app!

1. Loop over the game.scored array and print each player name to the
   console, along with the goal number (Example: "Goal 1: Lewandowski")
2. Use a loop to calculate the average odd and log it to the console (We
   already studied how to calculate averages, you can go check if you
   don't remember)
3. Print the 3 odds to the console, but in a nice formatted way, exaclty
   like this: Odd of victory Bayern Munich: 1.33 Odd of draw: 3.25 Odd
   of victory Borrussia Dortmund: 6.5

Get the team names directly from the game object, don't hardcode them
(except for "draw"). HINT: Note how the odds and the game objects have
the same property names

BONUS: Create an object called 'scorers' which contains the names of the
players who scored as properties, and the number of goals as the value.
In this game, it will look like this:
=js {     Gnarby: 1,     Hummels: 1,     Lewandowski: 2   }=

#+BEGIN_SRC js
    const game = {
      team1: 'Bayern Munich',
      team2: 'Borrussia Dortmund',
      players: [
        [
          'Neuer',
          'Pavard',
          'Martinez',
          'Alaba',
          'Davies',
          'Kimmich',
          'Goretzka',
          'Coman',
          'Muller',
          'Gnarby',
          'Lewandowski',
        ],
        [
          'Burki',
          'Schulz',
          'Hummels',
          'Akanji',
          'Hakimi',
          'Weigl',
          'Witsel',
          'Hazard',
          'Brandt',
          'Sancho',
          'Gotze',
        ],
      ],
      score: '4:0',
      scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
      date: 'Nov 9th, 2037',
      odds: {
        team1: 1.33,
        x: 3.25,
        team2: 6.5,
      },
    };
#+END_SRC

*Solution*

#+BEGIN_SRC js
    // 1.
    for (const [i, player] of game.scored.entries())
      console.log(`Goal ${i + 1}: ${player}`);

    // 2.
    const odds = Object.values(game.odds);
    let average = 0;
    for (const odd of odds) average += odd;
    average /= odds.length;
    console.log(average);

    // 3.
    for (const [team, odd] of Object.entries(game.odds)) {
      const teamStr = team === 'x' ? 'draw' : `victory ${game[team]}`;
      console.log(`Odd of ${teamStr} ${odd}`);
    }

    // Odd of victory Bayern Munich: 1.33
    // Odd of draw: 3.25
    // Odd of victory Borrussia Dortmund: 6.5

    // BONUS
    // So the solution is to loop over the array, and add the array elements as object properties, and then increase the count as we encounter a new occurence of a certain element
    const scorers = {};
    for (const player of game.scored) {
      scorers[player] ? scorers[player]++ : (scorers[player] = 1);
    }
#+END_SRC

** Sets
   :PROPERTIES:
   :CUSTOM_ID: sets
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Sets
    const ordersSet = new Set([
      'Pasta',
      'Pizza',
      'Pizza',
      'Risotto',
      'Pasta',
      'Pizza',
    ]);

    console.log(ordersSet); // output: Set(3) {'Pasta', 'Pizza', 'Risotto'}

    console.log(new Set('Jonas')); // output: Set(5) {'J', 'o', 'n', 'a', 's'}

    console.log(ordersSet.size); // output: 3
    console.log(ordersSet.has('Pizza')); // output: true
    console.log(ordersSet.has('Bread')); // output: false
    ordersSet.add('Garlic Bread'); // output: Set(4) {'Pasta', 'Pizza', 'Risotto', 'Garlic Bread'}
    ordersSet.add('Garlic Bread'); // output: // output: Set(4) {'Pasta', 'Pizza', 'Risotto', 'Garlic Bread'}
    ordersSet.delete('Risotto'); // output: Set(3) {'Pasta', 'Pizza', 'Garlic Bread'}
    // ordersSet.clear(); // output: deletes all elements of set
    console.log(ordersSet); 

    for (const order of ordersSet) console.log(order); // output: Pasta Pizza Garlic Bread

    // Example
    const staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];
    const staffUnique = [...new Set(staff)];
    console.log(staffUnique); // output: ['Waiter', 'Chef', 'Manager']

    console.log(
      new Set(['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter']).size
    ); // output: 3

    console.log(new Set('jonasschmedtmann').size); // output: 11
#+END_SRC

- And a set is basically just a collection of unique values. So that
  means that a set can never have any. duplicates. ## Maps: Fundamentals

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Maps: Fundamentals
    const rest = new Map();
    rest.set('name', 'Classico Italiano');
    rest.set(1, 'Firenze, Italy');
    console.log(rest.set(2, 'Lisbon, Portugal')); // output: Map(3) {'name' => 'Classico Italiano', 1 => 'Firenze, Italy', 2 => 'Lisbon, Portugal'}

    rest
      .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])
      .set('open', 11)
      .set('close', 23)
      .set(true, 'We are open :D')
      .set(false, 'We are closed :(');

    console.log(rest.get('name')); // output: Classico Italiano
    console.log(rest.get(true)); // output: We are open : D
    console.log(rest.get(1)); // output: Firenze, Italy

    const time = 8;
    console.log(rest.get(time > rest.get('open') && time < rest.get('close')));
    // output: We are closed :(

    console.log(rest.has('categories')); // output: true
    rest.delete(2); // output: it will delete - 2, 'Lisbon, Portugal'
    // rest.clear(); // output: deletes whole map

    const arr = [1, 2]; // it is important to decalre 'arr' here.
    rest.set(arr, 'Test');
    rest.set(document.querySelector('h1'), 'Heading');
    console.log(rest); 
    console.log(rest.size); // output: 9

    console.log(rest.get(arr)); // output: Test
#+END_SRC

** Maps: Iterataion
   :PROPERTIES:
   :CUSTOM_ID: maps-iterataion
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Maps: Iteration
    const question = new Map([
      ['question', 'What is the best programming language in the world?'],
      [1, 'C'],
      [2, 'Java'],
      [3, 'JavaScript'],
      ['correct', 3],
      [true, 'Correct 🎉'],
      [false, 'Try again!'],
    ]);
    console.log(question);

    // Convert object to map
    console.log(Object.entries(openingHours));
    const hoursMap = new Map(Object.entries(openingHours));
    console.log(hoursMap);

    // Quiz app
    console.log(question.get('question'));
    for (const [key, value] of question) {
      if (typeof key === 'number') console.log(`Answer ${key}: ${value}`);
    }
    // const answer = Number(prompt('Your answer'));
    const answer = 3;
    console.log(answer);

    console.log(question.get(question.get('correct') === answer));

    // Convert map to array
    console.log([...question]);
    // console.log(question.entries());
    console.log([...question.keys()]);
    console.log([...question.values()]);
#+END_SRC

** Summary: Which Data Structure to Use?
   :PROPERTIES:
   :CUSTOM_ID: summary-which-data-structure-to-use
   :END:

[[8. Data Structures, Modern Operators and Strings-1662144598166

*** Arrays vs. Sets
    :PROPERTIES:
    :CUSTOM_ID: arrays-vs.-sets
    :END:

[[8. Data Structures, Modern Operators and Strings-1662144680195

*** Objects vs. Maps
    :PROPERTIES:
    :CUSTOM_ID: objects-vs.-maps
    :END:

[[8. Data Structures, Modern Operators and Strings-1662144697583

** Coding Challenge ##3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

Let's continue with our football betting app! This time, we have a map
with a log of the events that happened during the game. The values are
the events themselves, and the keys are the minutes in which each event
happened (a football game has 90 minutes plus some extra time).

1. Create an array 'events' of the different game events that happened
   (no duplicates)
2. After the game has finished, is was found that the yellow card from
   minute 64 was unfair. So remove this event from the game events log.
3. Print the following string to the console: "An event happened, on
   average, every 9 minutes" (keep in mind that a game has 90 minutes)
4. Loop over the events and log them to the console, marking whether
   it's in the first half or second half (after 45 min) of the game,
   like this: [FIRST HALF] 17: ⚽️ GOAL

#+BEGIN_SRC js
    const gameEvents = new Map([
      [17, '⚽️ GOAL'],
      [36, '🔁 Substitution'],
      [47, '⚽️ GOAL'],
      [61, '🔁 Substitution'],
      [64, '🔶 Yellow card'],
      [69, '🔴 Red card'],
      [70, '🔁 Substitution'],
      [72, '🔁 Substitution'],
      [76, '⚽️ GOAL'],
      [80, '⚽️ GOAL'],
      [92, '🔶 Yellow card'],
    ]);
#+END_SRC

*Solution*

#+BEGIN_SRC js
    // 1.
    const events = [...new Set(gameEvents.values())];
    console.log(events);

    // 2.
    gameEvents.delete(64);

    // 3.
    console.log(
      `An event happened, on average, every ${90 / gameEvents.size} minutes`
    );
    const time = [...gameEvents.keys()].pop();
    console.log(time);
    console.log(
      `An event happened, on average, every ${time / gameEvents.size} minutes`
    );

    // 4.
    for (const [min, event] of gameEvents) {
      const half = min <= 45 ? 'FIRST' : 'SECOND';
      console.log(`[${half} HALF] ${min}: ${event}`);
    }
#+END_SRC

** Working With Strings Part 1
   :PROPERTIES:
   :CUSTOM_ID: working-with-strings-part-1
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Working With Strings - Part 1
    const airline = 'TAP Air Portugal';
    const plane = 'A320';

    console.log(plane[0]); // output: A
    console.log(plane[1]); // output: 3
    console.log(plane[2]); // output: 2
    console.log('B737'[0]); // output:  B

    console.log(airline.length); // output: 16
    console.log('B737'.length); // output: 4

    console.log(airline.indexOf('r')); // output: 6
    console.log(airline.lastIndexOf('r')); // output: 10
    console.log(airline.indexOf('portugal')); // output: -1

    console.log(airline.slice(4)); // output: Air Portugal
    console.log(airline.slice(4, 7)); // output: Air

    console.log(airline.slice(0, airline.indexOf(' '))); // output: TAP
    console.log(airline.slice(airline.lastIndexOf(' ') + 1)); // output: Portugal

    console.log(airline.slice(-2)); // output: al
    console.log(airline.slice(1, -1)); // output: AP Air Portuga 

    const checkMiddleSeat = function (seat) {
      // B and E are middle seats
      const s = seat.slice(-1);
      if (s === 'B' || s === 'E') console.log('You got the middle seat 😬');
      else console.log('You got lucky 😎');
    };

    checkMiddleSeat('11B'); // output: You got the middle seat 😬
    checkMiddleSeat('23C'); // output: You got lucky 😎
    checkMiddleSeat('3E');// output: You got the middle seat 😬

    console.log(new String('jonas')); // output: String {'jonas'}
    console.log(typeof new String('jonas')); // output: object

    console.log(typeof new String('jonas').slice(1)); // output: string
#+END_SRC

- Whenever we call a method on a string, JavaScript will automatically
  behind the scenes convert that string primitive to a string object
  with the same content. And then it's on that object where the methods
  are called. All right and this process is called boxing because it
  basically takes our string and puts it into a box which is the object.
  ## Working With Strings Part 2

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Working With Strings - Part 2

    const airline = 'TAP Air Portugal';

    console.log(airline.toLowerCase()); // output: tap air portugal
    console.log(airline.toUpperCase()); // output: TAP AIR PORTUGAL

    // Fix capitalization in name
    const passenger = 'jOnAS'; // Jonas
    const passengerLower = passenger.toLowerCase();
    const passengerCorrect =
      passengerLower[0].toUpperCase() + passengerLower.slice(1);
    console.log(passengerCorrect); // output: Jonas

    // Comparing emails
    const email = 'hello@jonas.io';
    const loginEmail = '  Hello@Jonas.Io \n';

    // const lowerEmail = loginEmail.toLowerCase();
    // const trimmedEmail = lowerEmail.trim();
    const normalizedEmail = loginEmail.toLowerCase().trim();
    console.log(normalizedEmail); // output: hello@jonas.io
    console.log(email === normalizedEmail); // output: true

    // replacing
    const priceGB = '288,97£';
    const priceUS = priceGB.replace('£', '$').replace(',', '.');
    console.log(priceUS); // output: 288.97$

    const announcement =
      'All passengers come to boarding door 23. Boarding door 23!';

    console.log(announcement.replace('door', 'gate')); // output: All passengers come to boarding gate 23. Boarding door 23!
    // console.log(announcement.replaceAll('door', 'gate'));
    console.log(announcement.replace(/door/g, 'gate')); // output: All passengers come to boarding gate 23. Boarding gate 23!

    // Booleans
    const plane = 'Airbus A320neo';
    console.log(plane.includes('A320')); // output: true
    console.log(plane.includes('Boeing')); // output: false
    console.log(plane.startsWith('Airb')); // output: true

    if (plane.startsWith('Airbus') && plane.endsWith('neo')) {
      console.log('Part of the NEW ARirbus family'); // output: Part of the NEW ARirbus family
    }

    // Practice exercise
    const checkBaggage = function (items) {
      const baggage = items.toLowerCase();

      if (baggage.includes('knife') || baggage.includes('gun')) {
        console.log('You are NOT allowed on board');
      } else {
        console.log('Welcome aboard!');
      }
    };

    checkBaggage('I have a laptop, some Food and a pocket Knife'); // output: You are NOT allowed on board
    checkBaggage('Socks and camera'); // output: Welcome aboard!
    checkBaggage('Got some snacks and a gun for protection'); // output: You are NOT allowed on board
#+END_SRC

** Working With Strings Part 3
   :PROPERTIES:
   :CUSTOM_ID: working-with-strings-part-3
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Working With Strings - Part 2

    // Split and join
    console.log('a+very+nice+string'.split('+')); // output: ['a', 'very', 'nice', 'string']
    console.log('Jonas Schmedtmann'.split(' ')); // output: ['Jonas', 'Schmedtmann']

    const [firstName, lastName] = 'Jonas Schmedtmann'.split(' ');

    const newName = ['Mr.', firstName, lastName.toUpperCase()].join(' ');
    console.log(newName); // output: Mr. Jonas SCHMEDTMANN

    const capitalizeName = function (name) {
      const names = name.split(' ');
      const namesUpper = [];

      for (const n of names) {
        // namesUpper.push(n[0].toUpperCase() + n.slice(1));
        namesUpper.push(n.replace(n[0], n[0].toUpperCase()));
      }
      console.log(namesUpper.join(' '));
    }; 

    capitalizeName('jessica ann smith davis'); // output: Jessica Ann Smith Davis
    capitalizeName('jonas schmedtmann'); // output: 

    // Padding
    const message = 'Go to gate 23!';
    console.log(message.padStart(20, '+').padEnd(30, '+')); // output: ++++++Go to gate 23!++++++++++
    console.log('Jonas'.padStart(20, '+').padEnd(30, '+')); // output:+++++++++++++++Jonas++++++++++


    const maskCreditCard = function (number) {
      const str = number + '';
      const last = str.slice(-4);
      return last.padStart(str.length, '*');
    };

    console.log(maskCreditCard(64637836)); // output: ****7836
    console.log(maskCreditCard(43378463864647384)); // output: *************7384
    console.log(maskCreditCard('334859493847755774747')); // output: *****************4747

    // Repeat
    const message2 = 'Bad waether... All Departues Delayed... ';
    console.log(message2.repeat(5)); // output: Bad waether... All Departues Delayed... Bad waether... All Departues Delayed... Bad waether... All Departues Delayed... Bad waether... All Departues Delayed... Bad waether... All Departues Delayed... 

    const planesInLine = function (n) {
      console.log(`There are ${n} planes in line ${'🛩'.repeat(n)}`);
    };
    planesInLine(5); // output: There are 5 planes in line 🛩🛩🛩🛩🛩
    planesInLine(3); // output: There are 3 planes in line 🛩🛩🛩
    planesInLine(12); // output: There are 12 planes in line 🛩🛩🛩🛩🛩🛩🛩🛩🛩🛩🛩🛩
#+END_SRC

** Coding Challenge ##4
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-4
   :END:

Write a program that receives a list of variable names written in
underscore_case and convert them to camelCase.

The input will come from a textarea inserted into the DOM (see code
below), and conversion will happen when the button is pressed.

THIS TEST DATA (pasted to textarea)

#+BEGIN_SRC js
    underscore_case
        first_name
    Some_Variable
        calculate_AGE
    delayed_departure
#+END_SRC

SHOULD PRODUCE THIS OUTPUT (5 separate console.log outputs)

#+BEGIN_SRC js
    underscoreCase      ✅
    firstName           ✅✅
    someVariable        ✅✅✅
    calculateAge        ✅✅✅✅
    delayedDeparture    ✅✅✅✅✅
#+END_SRC

HINT 1: Remember which character defines a new line in the textarea 😉
HINT 2: The solution only needs to work for a variable made out of 2
words, like a_b HINT 3: Start without worrying about the ✅. Tackle that
only after you have the variable name conversion working 😉 HINT 4: This
challenge is difficult on purpose, so start watching the solution in
case you're stuck. Then pause and continue!

Afterwards, test with your own test data!

*Solution*

#+BEGIN_SRC js
    document.body.append(document.createElement('textarea'));
    document.body.append(document.createElement('button'));

    document.querySelector('button').addEventListener('click', function () {
      const text = document.querySelector('textarea').value;
      const rows = text.split('\n');

      for (const [i, row] of rows.entries()) {
        const [first, second] = row.toLowerCase().trim().split('_');

        const output = `${first}${second.replace(
          second[0],
          second[0].toUpperCase()
        )}`;
        console.log(`${output.padEnd(20)}${'✅'.repeat(i + 1)}`);
      }
    });
#+END_SRC

** String Methods Practice
   :PROPERTIES:
   :CUSTOM_ID: string-methods-practice
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // String Methods Practice

    const flights = '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

    // 🔴 Delayed Departure from FAO to TXL (11h25)
    //              Arrival from BRU to FAO (11h45)
    //   🔴 Delayed Arrival from HEL to FAO (12h05)
    //            Departure from FAO to LIS (12h30)

    const getCode = str => str.slice(0, 3).toUpperCase();

    for (const flight of flights.split('+')) {
      const [type, from, to, time] = flight.split(';');
      const output = `${type.startsWith('_Delayed') ? '🔴' : ''}${type.replaceAll(
        '_',
        ' '
      )} ${getCode(from)} ${getCode(to)} (${time.replace(':', 'h')})`.padStart(36);
      console.log(output);
    }
#+END_SRC
* 11 Numbers, Dates, Intl and Timers
** Converting and Checking Numbers
   :PROPERTIES:
   :CUSTOM_ID: converting-and-checking-numbers
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Converting and Checking Numbers
    console.log(23 === 23.0);

    // Base 10 - 0 to 9. 1/10 = 0.1. 3/10 = 3.3333333
    // Binary base 2 - 0 1
    console.log(0.1 + 0.2);
    console.log(0.1 + 0.2 === 0.3);

    // Conversion
    console.log(Number('23'));
    console.log(+'23');

    // Parsing
    console.log(Number.parseInt('30px', 10));
    console.log(Number.parseInt('e23', 10));

    console.log(Number.parseInt('  2.5rem  '));
    console.log(Number.parseFloat('  2.5rem  '));

    // console.log(parseFloat('  2.5rem  '));

    // Check if value is NaN
    console.log(Number.isNaN(20));
    console.log(Number.isNaN('20'));
    console.log(Number.isNaN(+'20X'));
    console.log(Number.isNaN(23 / 0));

    // Checking if value is number
    console.log(Number.isFinite(20));
    console.log(Number.isFinite('20'));
    console.log(Number.isFinite(+'20X'));
    console.log(Number.isFinite(23 / 0));

    console.log(Number.isInteger(23));
    console.log(Number.isInteger(23.0));
    console.log(Number.isInteger(23 / 0));
#+END_SRC

- =Number.parseInt()= Number here provides something called "Namespace".

** Math and Rounding
   :PROPERTIES:
   :CUSTOM_ID: math-and-rounding
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Math and Rounding
    console.log(Math.sqrt(25));
    console.log(25 ** (1 / 2));
    console.log(8 ** (1 / 3));

    console.log(Math.max(5, 18, 23, 11, 2));
    console.log(Math.max(5, 18, '23', 11, 2));
    console.log(Math.max(5, 18, '23px', 11, 2));

    console.log(Math.min(5, 18, 23, 11, 2));

    console.log(Math.PI * Number.parseFloat('10px') ** 2);

    console.log(Math.trunc(Math.random() * 6) + 1);

    const randomInt = (min, max) =>
      Math.floor(Math.random() * (max - min) + 1) + min;
    // 0...1 -> 0...(max - min) -> min...max
    // console.log(randomInt(10, 20));

    // Rounding integers
    console.log(Math.round(23.3));
    console.log(Math.round(23.9));

    console.log(Math.ceil(23.3));
    console.log(Math.ceil(23.9));

    console.log(Math.floor(23.3));
    console.log(Math.floor('23.9'));

    console.log(Math.trunc(23.3));

    console.log(Math.trunc(-23.3)); // -23
    console.log(Math.floor(-23.3)); // -24

    // Rounding decimals
    console.log((2.7).toFixed(0));
    console.log((2.7).toFixed(3));
    console.log((2.345).toFixed(2));
    console.log(+(2.345).toFixed(2));
#+END_SRC

- max function here actually does type coercion.
- =floor()= is little bit better than =trunc()= because it works in all
  cases no matter if we are dealing with positive or negative numbers.
- Primitives actually don't have methods. And so behind the scenes,
  JavaScript will do boxing. Boxing is to basically transform this to a
  number object, then call the method on that object. And then once the
  operation is finished it will convert it back to a primitive.

** The Remainder Operator
   :PROPERTIES:
   :CUSTOM_ID: the-remainder-operator
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // The Remainder Operator
    console.log(5 % 2);
    console.log(5 / 2); // 5 = 2 * 2 + 1

    console.log(8 % 3);
    console.log(8 / 3); // 8 = 2 * 3 + 2

    console.log(6 % 2);
    console.log(6 / 2);

    console.log(7 % 2);
    console.log(7 / 2);

    const isEven = n => n % 2 === 0;
    console.log(isEven(8));
    console.log(isEven(23));
    console.log(isEven(514));

    labelBalance.addEventListener('click', function () {
      [...document.querySelectorAll('.movements__row')].forEach(function (row, i) {
        // 0, 2, 4, 6
        if (i % 2 === 0) row.style.backgroundColor = 'orangered';
        // 0, 3, 6, 9
        if (i % 3 === 0) row.style.backgroundColor = 'blue';
      });
    });
#+END_SRC

** Numeric Separators - ES2021
   :PROPERTIES:
   :CUSTOM_ID: numeric-separators---es2021
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Numeric Separators

    // 287,460,000,000
    const diameter = 287_460_000_000;
    console.log(diameter);

    const price = 345_99;
    console.log(price);

    const transferFee1 = 15_00;
    const transferFee2 = 1_500;

    const PI = 3.1415;
    console.log(PI);

    console.log(Number('230_000'));
    console.log(parseInt('230_000'));
#+END_SRC

** Working with BigInt - ES2020
   :PROPERTIES:
   :CUSTOM_ID: working-with-bigint---es2020
   :END:

- The =BigInt= is a new primitive type that can represent whole numbers
  bigger than =253 - 1=, which is the largest number Javascript can
  reliably represent with the =number= type.
- Append =n= to a literal integer or use =BigInt()= function to create
  a =bigint=.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Working with BigInt
    console.log(2 ** 53 - 1);
    console.log(Number.MAX_SAFE_INTEGER);
    console.log(2 ** 53 + 1);
    console.log(2 ** 53 + 2);
    console.log(2 ** 53 + 3);
    console.log(2 ** 53 + 4);

    console.log(4838430248342043823408394839483204n);
    console.log(BigInt(48384302));

    // Operations
    console.log(10000n + 10000n);
    console.log(36286372637263726376237263726372632n * 10000000n);
    // console.log(Math.sqrt(16n));

    const huge = 20289830237283728378237n;
    const num = 23;
    console.log(huge * BigInt(num));

    // Exceptions
    console.log(20n > 15);
    console.log(20n === 20);
    console.log(typeof 20n);
    console.log(20n == '20');

    console.log(huge + ' is REALLY big!!!');

    // Divisions
    console.log(11n / 3n);
    console.log(10 / 3);
#+END_SRC

** Creating Dates
   :PROPERTIES:
   :CUSTOM_ID: creating-dates
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Creating Dates

    // Create a date

    const now = new Date();
    console.log(now);

    console.log(new Date('Aug 02 2020 18:05:41'));
    console.log(new Date('December 24, 2015'));
    console.log(new Date(account1.movementsDates[0]));

    console.log(new Date(2037, 10, 19, 15, 23, 5));
    console.log(new Date(2037, 10, 31));

    console.log(new Date(0));
    console.log(new Date(3 * 24 * 60 * 60 * 1000));


    // Working with dates
    const future = new Date(2037, 10, 19, 15, 23);
    console.log(future);
    console.log(future.getFullYear());
    console.log(future.getMonth());
    console.log(future.getDate());
    console.log(future.getDay());
    console.log(future.getHours());
    console.log(future.getMinutes());
    console.log(future.getSeconds());
    console.log(future.toISOString());
    console.log(future.getTime());

    console.log(new Date(2142256980000));

    console.log(Date.now());

    future.setFullYear(2040);
    console.log(future);
#+END_SRC

** Operations With Dates
   :PROPERTIES:
   :CUSTOM_ID: operations-with-dates
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Operations With Dates
    const future = new Date(2037, 10, 19, 15, 23);
    console.log(+future);

    const calcDaysPassed = (date1, date2) =>
      Math.abs(date2 - date1) / (1000 * 60 * 60 * 24);

    const days1 = calcDaysPassed(new Date(2037, 3, 4), new Date(2037, 3, 14));
    console.log(days1);


    ///////////////////////////////////////
    // Internationalizing Numbers (Intl)
    const num = 3884764.23;

    const options = {
      style: 'currency',
      unit: 'celsius',
      currency: 'EUR',
      // useGrouping: false,
    };

    console.log('US:      ', new Intl.NumberFormat('en-US', options).format(num));
    console.log('Germany: ', new Intl.NumberFormat('de-DE', options).format(num));
    console.log('Syria:   ', new Intl.NumberFormat('ar-SY', options).format(num));
    console.log(
      navigator.language,
      new Intl.NumberFormat(navigator.language, options).format(num)
    );
#+END_SRC

** Internationalizing Numbers (Intl)
   :PROPERTIES:
   :CUSTOM_ID: internationalizing-numbers-intl
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Internationalizing Numbers (Intl)
    const num = 3884764.23;

    const options = {
      style: 'currency',
      unit: 'celsius',
      currency: 'EUR',
      // useGrouping: false,
    };

    console.log('US:      ', new Intl.NumberFormat('en-US', options).format(num));
    console.log('Germany: ', new Intl.NumberFormat('de-DE', options).format(num));
    console.log('Syria:   ', new Intl.NumberFormat('ar-SY', options).format(num));
    console.log(
      navigator.language,
      new Intl.NumberFormat(navigator.language, options).format(num)
    );
#+END_SRC

** Timers
   :PROPERTIES:
   :CUSTOM_ID: timers
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Timers

    // setTimeout
    const ingredients = ['olives', 'spinach'];
    const pizzaTimer = setTimeout(
      (ing1, ing2) => console.log(`Here is your pizza with ${ing1} and ${ing2} 🍕`),
      3000,
      ...ingredients
    );
    console.log('Waiting...');

    if (ingredients.includes('spinach')) clearTimeout(pizzaTimer);

    // setInterval
    setInterval(function () {
      const now = new Date();
      console.log(now);
    }, 1000);
#+END_SRC

** Project Bankist Code
   :PROPERTIES:
   :CUSTOM_ID: project-bankist-code
   :END:

#+BEGIN_SRC js
    'use strict';

    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    // BANKIST APP

    /////////////////////////////////////////////////
    // Data

    // DIFFERENT DATA! Contains movement dates, currency and locale

    const account1 = {
      owner: 'Jonas Schmedtmann',
      movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],
      interestRate: 1.2, // %
      pin: 1111,

      movementsDates: [
        '2019-11-18T21:31:17.178Z',
        '2019-12-23T07:42:02.383Z',
        '2020-01-28T09:15:04.904Z',
        '2020-04-01T10:17:24.185Z',
        '2020-05-08T14:11:59.604Z',
        '2020-07-26T17:01:17.194Z',
        '2020-07-28T23:36:17.929Z',
        '2020-08-01T10:51:36.790Z',
      ],
      currency: 'EUR',
      locale: 'pt-PT', // de-DE
    };

    const account2 = {
      owner: 'Jessica Davis',
      movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
      interestRate: 1.5,
      pin: 2222,

      movementsDates: [
        '2019-11-01T13:15:33.035Z',
        '2019-11-30T09:48:16.867Z',
        '2019-12-25T06:04:23.907Z',
        '2020-01-25T14:18:46.235Z',
        '2020-02-05T16:33:06.386Z',
        '2020-04-10T14:43:26.374Z',
        '2020-06-25T18:49:59.371Z',
        '2020-07-26T12:01:20.894Z',
      ],
      currency: 'USD',
      locale: 'en-US',
    };

    const accounts = [account1, account2];

    /////////////////////////////////////////////////
    // Elements
    const labelWelcome = document.querySelector('.welcome');
    const labelDate = document.querySelector('.date');
    const labelBalance = document.querySelector('.balance__value');
    const labelSumIn = document.querySelector('.summary__value--in');
    const labelSumOut = document.querySelector('.summary__value--out');
    const labelSumInterest = document.querySelector('.summary__value--interest');
    const labelTimer = document.querySelector('.timer');

    const containerApp = document.querySelector('.app');
    const containerMovements = document.querySelector('.movements');

    const btnLogin = document.querySelector('.login__btn');
    const btnTransfer = document.querySelector('.form__btn--transfer');
    const btnLoan = document.querySelector('.form__btn--loan');
    const btnClose = document.querySelector('.form__btn--close');
    const btnSort = document.querySelector('.btn--sort');

    const inputLoginUsername = document.querySelector('.login__input--user');
    const inputLoginPin = document.querySelector('.login__input--pin');
    const inputTransferTo = document.querySelector('.form__input--to');
    const inputTransferAmount = document.querySelector('.form__input--amount');
    const inputLoanAmount = document.querySelector('.form__input--loan-amount');
    const inputCloseUsername = document.querySelector('.form__input--user');
    const inputClosePin = document.querySelector('.form__input--pin');

    /////////////////////////////////////////////////
    // Functions

    const formatMovementDate = function (date, locale) {
      const calcDaysPassed = (date1, date2) =>
        Math.round(Math.abs(date2 - date1) / (1000 * 60 * 60 * 24));

      const daysPassed = calcDaysPassed(new Date(), date);
      console.log(daysPassed);

      if (daysPassed === 0) return 'Today';
      if (daysPassed === 1) return 'Yesterday';
      if (daysPassed <= 7) return `${daysPassed} days ago`;

      // const day = `${date.getDate()}`.padStart(2, 0);
      // const month = `${date.getMonth() + 1}`.padStart(2, 0);
      // const year = date.getFullYear();
      // return `${day}/${month}/${year}`;
      return new Intl.DateTimeFormat(locale).format(date);
    };

    const formatCur = function (value, locale, currency) {
      return new Intl.NumberFormat(locale, {
        style: 'currency',
        currency: currency,
      }).format(value);
    };

    const displayMovements = function (acc, sort = false) {
      containerMovements.innerHTML = '';

      const movs = sort
        ? acc.movements.slice().sort((a, b) => a - b)
        : acc.movements;

      movs.forEach(function (mov, i) {
        const type = mov > 0 ? 'deposit' : 'withdrawal';

        const date = new Date(acc.movementsDates[i]);
        const displayDate = formatMovementDate(date, acc.locale);

        const formattedMov = formatCur(mov, acc.locale, acc.currency);

        const html = `
          <div class="movements__row">
            <div class="movements__type movements__type--${type}">${
          i + 1
        } ${type}</div>
            <div class="movements__date">${displayDate}</div>
            <div class="movements__value">${formattedMov}</div>
          </div>
        `;

        containerMovements.insertAdjacentHTML('afterbegin', html);
      });
    };

    const calcDisplayBalance = function (acc) {
      acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);
      labelBalance.textContent = formatCur(acc.balance, acc.locale, acc.currency);
    };

    const calcDisplaySummary = function (acc) {
      const incomes = acc.movements
        .filter(mov => mov > 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumIn.textContent = formatCur(incomes, acc.locale, acc.currency);

      const out = acc.movements
        .filter(mov => mov < 0)
        .reduce((acc, mov) => acc + mov, 0);
      labelSumOut.textContent = formatCur(Math.abs(out), acc.locale, acc.currency);

      const interest = acc.movements
        .filter(mov => mov > 0)
        .map(deposit => (deposit * acc.interestRate) / 100)
        .filter((int, i, arr) => {
          // console.log(arr);
          return int >= 1;
        })
        .reduce((acc, int) => acc + int, 0);
      labelSumInterest.textContent = formatCur(interest, acc.locale, acc.currency);
    };

    const createUsernames = function (accs) {
      accs.forEach(function (acc) {
        acc.username = acc.owner
          .toLowerCase()
          .split(' ')
          .map(name => name[0])
          .join('');
      });
    };
    createUsernames(accounts);

    const updateUI = function (acc) {
      // Display movements
      displayMovements(acc);

      // Display balance
      calcDisplayBalance(acc);

      // Display summary
      calcDisplaySummary(acc);
    };

    const startLogOutTimer = function () {
      const tick = function () {
        const min = String(Math.trunc(time / 60)).padStart(2, 0);
        const sec = String(time % 60).padStart(2, 0);

        // In each call, print the remaining time to UI
        labelTimer.textContent = `${min}:${sec}`;

        // When 0 seconds, stop timer and log out user
        if (time === 0) {
          clearInterval(timer);
          labelWelcome.textContent = 'Log in to get started';
          containerApp.style.opacity = 0;
        }

        // Decrease 1s
        time--;
      };

      // Set time to 5 minutes
      let time = 120;

      // Call the timer every second
      tick();
      const timer = setInterval(tick, 1000);

      return timer;
    };

    ///////////////////////////////////////
    // Event handlers
    let currentAccount, timer;

    // FAKE ALWAYS LOGGED IN
    // currentAccount = account1;
    // updateUI(currentAccount);
    // containerApp.style.opacity = 100;

    btnLogin.addEventListener('click', function (e) {
      // Prevent form from submitting
      e.preventDefault();

      currentAccount = accounts.find(
        acc => acc.username === inputLoginUsername.value
      );
      console.log(currentAccount);

      if (currentAccount?.pin === +inputLoginPin.value) {
        // Display UI and message
        labelWelcome.textContent = `Welcome back, ${
          currentAccount.owner.split(' ')[0]
        }`;
        containerApp.style.opacity = 100;

        // Create current date and time
        const now = new Date();
        const options = {
          hour: 'numeric',
          minute: 'numeric',
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          // weekday: 'long',
        };
        // const locale = navigator.language;
        // console.log(locale);

        labelDate.textContent = new Intl.DateTimeFormat(
          currentAccount.locale,
          options
        ).format(now);

        // const day = `${now.getDate()}`.padStart(2, 0);
        // const month = `${now.getMonth() + 1}`.padStart(2, 0);
        // const year = now.getFullYear();
        // const hour = `${now.getHours()}`.padStart(2, 0);
        // const min = `${now.getMinutes()}`.padStart(2, 0);
        // labelDate.textContent = `${day}/${month}/${year}, ${hour}:${min}`;

        // Clear input fields
        inputLoginUsername.value = inputLoginPin.value = '';
        inputLoginPin.blur();

        // Timer
        if (timer) clearInterval(timer);
        timer = startLogOutTimer();

        // Update UI
        updateUI(currentAccount);
      }
    });

    btnTransfer.addEventListener('click', function (e) {
      e.preventDefault();
      const amount = +inputTransferAmount.value;
      const receiverAcc = accounts.find(
        acc => acc.username === inputTransferTo.value
      );
      inputTransferAmount.value = inputTransferTo.value = '';

      if (
        amount > 0 &&
        receiverAcc &&
        currentAccount.balance >= amount &&
        receiverAcc?.username !== currentAccount.username
      ) {
        // Doing the transfer
        currentAccount.movements.push(-amount);
        receiverAcc.movements.push(amount);

        // Add transfer date
        currentAccount.movementsDates.push(new Date().toISOString());
        receiverAcc.movementsDates.push(new Date().toISOString());

        // Update UI
        updateUI(currentAccount);

        // Reset timer
        clearInterval(timer);
        timer = startLogOutTimer();
      }
    });

    btnLoan.addEventListener('click', function (e) {
      e.preventDefault();

      const amount = Math.floor(inputLoanAmount.value);

      if (amount > 0 && currentAccount.movements.some(mov => mov >= amount * 0.1)) {
        setTimeout(function () {
          // Add movement
          currentAccount.movements.push(amount);

          // Add loan date
          currentAccount.movementsDates.push(new Date().toISOString());

          // Update UI
          updateUI(currentAccount);

          // Reset timer
          clearInterval(timer);
          timer = startLogOutTimer();
        }, 2500);
      }
      inputLoanAmount.value = '';
    });

    btnClose.addEventListener('click', function (e) {
      e.preventDefault();

      if (
        inputCloseUsername.value === currentAccount.username &&
        +inputClosePin.value === currentAccount.pin
      ) {
        const index = accounts.findIndex(
          acc => acc.username === currentAccount.username
        );
        console.log(index);
        // .indexOf(23)

        // Delete account
        accounts.splice(index, 1);

        // Hide UI
        containerApp.style.opacity = 0;
      }

      inputCloseUsername.value = inputClosePin.value = '';
    });

    let sorted = false;
    btnSort.addEventListener('click', function (e) {
      e.preventDefault();
      displayMovements(currentAccount.movements, !sorted);
      sorted = !sorted;
    });
#+END_SRC
* 13 Object-Oriented Programming (O0P) With JavaScript
** What is Object Oriented Programming?
   :PROPERTIES:
   :CUSTOM_ID: what-is-object-oriented-programming
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663898980491

*** Classes and Instances (Traditional OOP)
    :PROPERTIES:
    :CUSTOM_ID: classes-and-instances-traditional-oop
    :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899008964

*** The 4 Fundamental OOP Principle
    :PROPERTIES:
    :CUSTOM_ID: the-4-fundamental-oop-principle
    :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899032649

*** Abstraction
    :PROPERTIES:
    :CUSTOM_ID: abstraction
    :END:

- *Abstraction*: Ignoring or hiding details that /don't matter/,
  allowing us to get /an overview/ perspective of the thing we're
  implementing, instead of messing with details that don't really matter
  to our implementation. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899059332

*** Encapsulation Inheritance
    :PROPERTIES:
    :CUSTOM_ID: encapsulation-inheritance
    :END:

- *Encapsulation*: Keeping properties and methods /private/ inside the
  class, SO they are /not accessible from outside the class/. Some
  methods can be exposed as a public interface (API). [[13.
  Object-Oriented Programming (O0P) With JavaScript-1663899150174

*** Polymorphism
    :PROPERTIES:
    :CUSTOM_ID: polymorphism
    :END:

- *Inheritance*: Making all properties and methods of a certain class
  /available to a child class/, forming a hierarchical relationship
  between classes. This allows us to /reuse common logic/ and to model
  real-world relationships. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899193652

** 00P in JavaScript
   :PROPERTIES:
   :CUSTOM_ID: p-in-javascript
   :END:

- Polymorphism: A child class can /overwrite/ a method it inherited from
  a parent class [it's more complex that that, but enough for our
  purposes]. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899232684

** 00P in JavaScript
   :PROPERTIES:
   :CUSTOM_ID: p-in-javascript-1
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899253131

*3 Ways of Implementing Prototypical Inheritance* [[13. Object-Oriented
Programming (O0P) With JavaScript-1663899280934

** Constructor Functions and the new Operator
   :PROPERTIES:
   :CUSTOM_ID: constructor-functions-and-the-new-operator
   :END:

- The only difference between a regular function, and a function that we
  call constructor function, is that we call a constructor function with
  the new operator.
- An arrow function will actually not work as a function constructor.
  And that's because it doesn't have its own this keyword
- And constructor functions have been used since the beginning of
  JavaScript to kind of simulate classes.
- Just note that function constructors are not really a feature of the
  JavaScript language. Instead, they are simply a pattern that has been
  developed by other developers. And now everyone simply uses this.

#+BEGIN_SRC js
    /* all the objects that are created through this constructor function here will inherit, so they will get access to all the methods and properties that are defined on this prototype property. */
    const Person = function (firstName, birthYear) {
      // instance properties
      this.firstName = firstName;
      this.birthYear = birthYear;

      // You should never create a method inside of a constructor fucnction
      // this.calcAge = 2047 - this.birthYear;
    };

    new Person('Ahmed', 1997);

    // 1. New {} is created
    // 2. function is called, this = {}
    // 3. {} is linked to prototype
    // 4. fucntion automatically return {}

    const ahmed = new Person('Ahmed', 1997);
    const salaria = new Person('Salaria', 1998);

    console.log(ahmed);
    console.log(salaria);

    console.log(ahmed instanceof Person); // true
#+END_SRC

** Prototypes
   :PROPERTIES:
   :CUSTOM_ID: prototypes
   :END:

#+BEGIN_SRC js
    // Prototypes
    console.log(Person.prototype);

    Person.prototype.calcAge = function () {
      console.log(2047 - this.birthYear);
    };

    ahmed.calcAge();
    salaria.calcAge();

    console.log(ahmed.__proto__);

    // Where does this proto property comes from? From step number 3
    // 1. New {} is created
    // 2. function is called, this = {}
    // 3. {} is linked to prototype
    // 4. fucntion automatically return {}

    console.log(ahmed.__proto__ === Person.prototype);

    /* So person dot prototype here is actually not the prototype of person. But instead, it is what's gonna be used as the prototype of all the objects that are created with the person constructor function.
    So that's a subtle a but important difference that you need to keep in mind. And, in fact, what I just said that is confirmed by this comparison */

    console.log(Person.prototype.isPrototypeOf(ahmed)); // true
    console.log(Person.prototype.isPrototypeOf(salaria)); // true
    console.log(Person.prototype.isPrototypeOf(Person)); // false

    // Rather than calling it prototype is should have been called .prototypeOfLinkedObjects

    Person.prototype.species = 'Homo Sapiens';
    console.log(ahmed.species, salaria.species);

    console.log(ahmed.hasOwnPropery('firstName')); // true
    console.log(ahmed.hasOwnPropery('species')); // false
#+END_SRC

** Prototypal Inheritance and The Prototype Chain
   :PROPERTIES:
   :CUSTOM_ID: prototypal-inheritance-and-the-prototype-chain
   :END:

*How Prototypical Inheritance / Delegation works?* [[13. Object-Oriented
Programming (O0P) With JavaScript-1663906658628 *The Prototype
Chain* [[13. Object-Oriented Programming (O0P) With
JavaScript-1663906701353

** Prototypal Inheritance on Built-In Objects
   :PROPERTIES:
   :CUSTOM_ID: prototypal-inheritance-on-built-in-objects
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Prototypal Inheritance on Built-In Objects
    console.log(jonas.__proto__);
    // Object.prototype (top of prototype chain)
    console.log(jonas.__proto__.__proto__);
    console.log(jonas.__proto__.__proto__.__proto__);

    console.dir(Person.prototype.constructor);

    const arr = [3, 6, 6, 5, 6, 9, 9]; // new Array === []
    console.log(arr.__proto__);
    console.log(arr.__proto__ === Array.prototype);

    console.log(arr.__proto__.__proto__);

    Array.prototype.unique = function () {
      return [...new Set(this)];
    };

    console.log(arr.unique());

    const h1 = document.querySelector('h1');
    console.dir(x => x + 1);
#+END_SRC

** Coding Challenge #1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

1. Use a constructor function to implement a Car. A car has a make and a
   speed property. The speed property is the current speed of the car in
   km/h;
2. Implement an 'accelerate' method that will increase the car's speed
   by 10, and log the new speed to the console;
3. Implement a 'brake' method that will decrease the car's speed by 5,
   and log the new speed to the console;
4. Create 2 car objects and experiment with calling 'accelerate' and
   'brake' multiple times on each of them.

DATA CAR 1: 'BMW' going at 120 km/h DATA CAR 2: 'Mercedes' going at 95
km/h

#+BEGIN_SRC js
    const Car = function (make, speed) {
      this.make = make;
      this.speed = speed;
    };

    Car.prototype.accelerate = function () {
      this.speed += 10;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    Car.prototype.brake = function () {
      this.speed -= 5;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    const bmw = new Car('BMW', 120);
    const mercedes = new Car('Mercedes', 95);

    bmw.accelerate();
    bmw.accelerate();
    bmw.brake();
    bmw.accelerate();
#+END_SRC

** ES6 Classes
   :PROPERTIES:
   :CUSTOM_ID: es6-classes
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // ES6 Classes

    // Class expression
    // const PersonCl = class {}

    // Class declaration
    class PersonCl {
      constructor(fullName, birthYear) {
        this.fullName = fullName;
        this.birthYear = birthYear;
      }

      // Instance methods
      // Methods will be added to .prototype property
      calcAge() {
        console.log(2037 - this.birthYear);
      }

      greet() {
        console.log(`Hey ${this.fullName}`);
      }

      get age() {
        return 2037 - this.birthYear;
      }

      // Set a property that already exists
      set fullName(name) {
        if (name.includes(' ')) this._fullName = name;
        else alert(`${name} is not a full name!`);
      }

      get fullName() {
        return this._fullName;
      }
#+END_SRC

** Setters and Getters
   :PROPERTIES:
   :CUSTOM_ID: setters-and-getters
   :END:

- So every object in JavaScript can have setter and getter properties.
  And we call these special properties assessor properties, while the
  more normal properties are called data properties. So getters and
  setters are basically functions that get and set a value so just as
  the name says, but on the outside they still look like regular
  properties.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Setters and Getters
    const account = {
      owner: 'Jonas',
      movements: [200, 530, 120, 300],

      get latest() {
        return this.movements.slice(-1).pop();
      },

      set latest(mov) {
        this.movements.push(mov);
      },
    };

    console.log(account.latest);

    account.latest = 50;
    console.log(account.movements);
#+END_SRC

** Static Methods
   :PROPERTIES:
   :CUSTOM_ID: static-methods
   :END:

#+BEGIN_SRC js
      // Static method
      static hey() {
        console.log('Hey there 👋');
        console.log(this);
      }
    }

    const jessica = new PersonCl('Jessica Davis', 1996);
    console.log(jessica);
    jessica.calcAge();
    console.log(jessica.age);

    console.log(jessica.__proto__ === PersonCl.prototype);

    // PersonCl.prototype.greet = function () {
    //   console.log(`Hey ${this.firstName}`);
    // };
    jessica.greet();

    // 1. Classes are NOT hoisted
    // 2. Classes are first-class citizens
    // 3. Classes are executed in strict mode

    const walter = new PersonCl('Walter White', 1965);
    // PersonCl.hey();
#+END_SRC

** Object.create
   :PROPERTIES:
   :CUSTOM_ID: object.create
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Object.create
    const PersonProto = {
      calcAge() {
        console.log(2037 - this.birthYear);
      },

      init(firstName, birthYear) {
        this.firstName = firstName;
        this.birthYear = birthYear;
      },
    };

    const steven = Object.create(PersonProto);
    console.log(steven);
    steven.name = 'Steven';
    steven.birthYear = 2002;
    steven.calcAge();

    console.log(steven.__proto__ === PersonProto);

    const sarah = Object.create(PersonProto);
    sarah.init('Sarah', 1979);
    sarah.calcAge();
#+END_SRC

** Coding Challenge #2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

#+BEGIN_SRC js
    class CarCl {
      constructor(make, speed) {
        this.make = make;
        this.speed = speed;
      }

      accelerate() {
        this.speed += 10;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      brake() {
        this.speed -= 5;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      get speedUS() {
        return this.speed / 1.6;
      }

      set speedUS(speed) {
        this.speed = speed * 1.6;
      }
    }

    const ford = new CarCl('Ford', 120);
    console.log(ford.speedUS);
    ford.accelerate();
    ford.accelerate();
    ford.brake();
    ford.speedUS = 50;
    console.log(ford);
#+END_SRC

** Inheritance Between "Classes": Constructor Functions
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-constructor-functions
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": Constructor Functions

    const Person = function (firstName, birthYear) {
      this.firstName = firstName;
      this.birthYear = birthYear;
    };

    Person.prototype.calcAge = function () {
      console.log(2037 - this.birthYear);
    };

    const Student = function (firstName, birthYear, course) {
      Person.call(this, firstName, birthYear);
      this.course = course;
    };

    // Linking prototypes
    Student.prototype = Object.create(Person.prototype); // At this point, student.prototype is empty

    Student.prototype.introduce = function () {
      console.log(`My name is ${this.firstName} and I study ${this.course}`);
    };

    const mike = new Student('Mike', 2020, 'Computer Science');
    mike.introduce();
    mike.calcAge();

    console.log(mike.__proto__);
    console.log(mike.__proto__.__proto__);

    console.log(mike instanceof Student);
    console.log(mike instanceof Person);
    console.log(mike instanceof Object);

    Student.prototype.constructor = Student;
    console.dir(Student.prototype.constructor);
#+END_SRC

** Coding Challenge #3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

1. Use a constructor function to implement an Electric Car (called EV)
   as a CHILD "class" of Car. Besides a make and current speed, the EV
   also has the current battery charge in % ('charge' property);
2. Implement a 'chargeBattery' method which takes an argument 'chargeTo'
   and sets the battery charge to 'chargeTo';
3. Implement an 'accelerate' method that will increase the car's speed
   by 20, and decrease the charge by 1%. Then log a message like this:
   'Tesla going at 140 km/h, with a charge of 22%';
4. Create an electric car object and experiment with calling
   'accelerate', 'brake' and 'chargeBattery' (charge to 90%). Notice
   what happens when you 'accelerate'! HINT: Review the definiton of
   polymorphism 😉

DATA CAR 1: 'Tesla' going at 120 km/h, with a charge of 23%

#+BEGIN_SRC js
    const Car = function (make, speed) {
      this.make = make;
      this.speed = speed;
    };

    Car.prototype.accelerate = function () {
      this.speed += 10;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    Car.prototype.brake = function () {
      this.speed -= 5;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    const EV = function (make, speed, charge) {
      Car.call(this, make, speed);
      this.charge = charge;
    };

    // Link the prototypes
    EV.prototype = Object.create(Car.prototype);

    EV.prototype.chargeBattery = function (chargeTo) {
      this.charge = chargeTo;
    };

    EV.prototype.accelerate = function () {
      this.speed += 20;
      this.charge--;
      console.log(
        `${this.make} is going at ${this.speed} km/h, with a charge of ${this.charge}`
      );
    };

    const tesla = new EV('Tesla', 120, 23);
    tesla.chargeBattery(90);
    console.log(tesla);
    tesla.brake();
    tesla.accelerate();
#+END_SRC

** Inheritance Between "Classes": ES6 Classes
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-es6-classes
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994719743

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994740330

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994769380

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994814589

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": ES6 Classes

    class PersonCl {
      constructor(fullName, birthYear) {
        this.fullName = fullName;
        this.birthYear = birthYear;
      }

      // Instance methods
      calcAge() {
        console.log(2037 - this.birthYear);
      }

      greet() {
        console.log(`Hey ${this.fullName}`);
      }

      get age() {
        return 2037 - this.birthYear;
      }

      set fullName(name) {
        if (name.includes(' ')) this._fullName = name;
        else alert(`${name} is not a full name!`);
      }

      get fullName() {
        return this._fullName;
      }

      // Static method
      static hey() {
        console.log('Hey there 👋');
      }
    }

    class StudentCl extends PersonCl {
      constructor(fullName, birthYear, course) {
        // Always needs to happen first!
        super(fullName, birthYear);
        this.course = course;
      }

      introduce() {
        console.log(`My name is ${this.fullName} and I study ${this.course}`);
      }

      calcAge() {
        console.log(
          `I'm ${
            2037 - this.birthYear
          } years old, but as a student I feel more like ${
            2037 - this.birthYear + 10
          }`
        );
      }
    }

    const martha = new StudentCl('Martha Jones', 2012, 'Computer Science');
    martha.introduce();
    martha.calcAge();
#+END_SRC

** Inheritance Between "Classes": Object.create
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-object.create
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994609934

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": Object.create

    const PersonProto = {
      calcAge() {
        console.log(2037 - this.birthYear);
      },

      init(firstName, birthYear) {
        this.firstName = firstName;
        this.birthYear = birthYear;
      },
    };

    const steven = Object.create(PersonProto);

    const StudentProto = Object.create(PersonProto);
    StudentProto.init = function (firstName, birthYear, course) {
      PersonProto.init.call(this, firstName, birthYear);
      this.course = course;
    };

    StudentProto.introduce = function () {
      // BUG in video:
      // console.log(`My name is ${this.fullName} and I study ${this.course}`);

      // FIX:
      console.log(`My name is ${this.firstName} and I study ${this.course}`);
    };

    const jay = Object.create(StudentProto);
    jay.init('Jay', 2010, 'Computer Science');
    jay.introduce();
    jay.calcAge();
#+END_SRC

** Another Class Example
   :PROPERTIES:
   :CUSTOM_ID: another-class-example
   :END:

#+BEGIN_SRC js
    class Account {
      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;
        this.pin = pin;
        this.movements = [];
        this.locale = navigator.language;
        console.log(`Thanks for opening an account ${this.name}`);
      }

      // Public Interface

      deposit(val) {
        this.movements.push(val);
      }
      withdraw(val) {
        this.deposit(-val);
      }
      approveLoan(val) {
        return true;
      }
      requestLoan(val) {
        if (this.approveLoan(val)) {
          this.deposit(val);
          console.log('Loan Approved');
        }
      }
    }

    const acc1 = new Account('xoraus', 'RUP', 1111);

    acc1.deposit(250);
    acc1.deposit(140);
    acc1.requestLoan(1000);
    // acc1.approveLoan(1000); This method should only be available to the requestLoan method
    // Therefore we need data encapsulation and data privacy

    console.log(acc1);
    // console.log(acc1.pin); - This should not be accessible
#+END_SRC

** Encapsulation: Protected Properties and Methods
   :PROPERTIES:
   :CUSTOM_ID: encapsulation-protected-properties-and-methods
   :END:

- Now first, remember that encapsulation basically means to keep some
  properties and methods private inside the class so that they are not
  accessible from outside of the class. Then the rest of the methods are
  basically exposed as a public interface, which we can also call API.
- Now, there are two big reasons why we need encapsulation and data
  privacy.

  - So first it is to prevent code from outside of a class to
    accidentally manipulate or data inside the class.
  - Now, the second reason is that when we expose only a small interface
    so a small API consisting only of a few public methods then we can
    change all the other internal methods with more confidence. Because
    in this case, we can be sure that external code does not rely on
    these private methods.

- Encapsulation means information hiding. It's about hiding as much as
  possible of the object's internal parts and exposing a minimal public
  interface. The simplest and most elegant way to create encapsulation
  in JavaScript is using closures. A closure can be created as a
  function with private state.

#+BEGIN_SRC js
    'use strict';

    class Account {
      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;

        // Protected Property
        this._pin = pin;
        this._movements = [];
        this.locale = navigator.language;
        console.log(`Thanks for opening an account ${this.name}`);
      }

      // Public Interface

      getMovements() {
        return this._movements;
      }

      deposit(val) {
        this._movements.push(val);
      }
      withdraw(val) {
        this.deposit(-val);
      }
      _approveLoan(val) {
        return true;
      }
      requestLoan(val) {
        if (this._approveLoan(val)) {
          this.deposit(val);
          console.log('Loan Approved');
        }
      }
    }

    const acc1 = new Account('xoraus', 'RUP', 1111);

    // acc1._movements.push(250);
    // acc1._movements.push(-140);

    acc1.deposit(250);
    acc1.deposit(140);

    acc1.requestLoan(1000);
    // acc1.approveLoan(1000); This method should only be available to the requestLoan method
    // Therefore we need data encapsulation and data privacy

    console.log(acc1.getMovements());

    console.log(acc1);
    // console.log(acc1.pin); - This should not be accessible
#+END_SRC

** Encapsulation: Private Class Fields and Methods
   :PROPERTIES:
   :CUSTOM_ID: encapsulation-private-class-fields-and-methods
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Encapsulation: Protected Properties and Methods
    // Encapsulation: Private Class Fields and Methods

    // 1) Public fields
    // 2) Private fields
    // 3) Public methods
    // 4) Private methods
    // (there is also the static version)

    class Account {
      // 1) Public fields (instances)
      locale = navigator.language;

      // 2) Private fields (instances)
      #movements = [];
      #pin;

      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;
        this.#pin = pin;

        // Protected property
        // this._movements = [];
        // this.locale = navigator.language;

        console.log(`Thanks for opening an account, ${owner}`);
      }

      // 3) Public methods

      // Public interface
      getMovements() {
        return this.#movements;
      }

      deposit(val) {
        this.#movements.push(val);
        return this;
      }

      withdraw(val) {
        this.deposit(-val);
        return this;
      }

      requestLoan(val) {
        // if (this.#approveLoan(val)) {
        if (this._approveLoan(val)) {
          this.deposit(val);
          console.log(`Loan approved`);
          return this;
        }
      }

      static helper() {
        console.log('Helper');
      }

      // 4) Private methods
      // #approveLoan(val) {
      _approveLoan(val) {
        return true;
      }
    }

    const acc1 = new Account('Jonas', 'EUR', 1111);

    // acc1._movements.push(250);
    // acc1._movements.push(-140);
    // acc1.approveLoan(1000);

    acc1.deposit(250);
    acc1.withdraw(140);
    acc1.requestLoan(1000);
    console.log(acc1.getMovements());
    console.log(acc1);
    Account.helper();

    // console.log(acc1.#movements);
    // console.log(acc1.#pin);
    // console.log(acc1.#approveLoan(100));
#+END_SRC

** Chaining Methods
   :PROPERTIES:
   :CUSTOM_ID: chaining-methods
   :END:

#+BEGIN_SRC js
    // Chaining
    acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(4000);
    console.log(acc1.getMovements());
#+END_SRC

** ES6 Classes Summary
   :PROPERTIES:
   :CUSTOM_ID: es6-classes-summary
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663995283090

** Coding Challenge #4
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-4
   :END:

1. Re-create challenge #3, but this time using ES6 classes: create an
   'EVCl' child class of the 'CarCl' class
2. Make the 'charge' property private;
3. Implement the ability to chain the 'accelerate' and 'chargeBattery'
   methods of this class, and also update the 'brake' method in the
   'CarCl' class. They experiment with chining!

DATA CAR 1: 'Rivian' going at 120 km/h, with a charge of 23%

#+BEGIN_SRC js
    class CarCl {
      constructor(make, speed) {
        this.make = make;
        this.speed = speed;
      }

      accelerate() {
        this.speed += 10;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      brake() {
        this.speed -= 5;
        console.log(`${this.make} is going at ${this.speed} km/h`);
        return this;
      }

      get speedUS() {
        return this.speed / 1.6;
      }

      set speedUS(speed) {
        this.speed = speed * 1.6;
      }
    }

    class EVCl extends CarCl {
      #charge;

      constructor(make, speed, charge) {
        super(make, speed);
        this.#charge = charge;
      }

      chargeBattery(chargeTo) {
        this.#charge = chargeTo;
        return this;
      }

      accelerate() {
        this.speed += 20;
        this.#charge--;
        console.log(
          `${this.make} is going at ${this.speed} km/h, with a charge of ${
            this.#charge
          }`
        );
        return this;
      }
    }

    const rivian = new EVCl('Rivian', 120, 23);
    console.log(rivian);
    // console.log(rivian.#charge);
    rivian
      .accelerate()
      .accelerate()
      .accelerate()
      .brake()
      .chargeBattery(50)
      .accelerate();

    console.log(rivian.speedUS);
#+END_SRC
* 13 Object-Oriented Programming (O0P) With JavaScript
** What is Object Oriented Programming?
   :PROPERTIES:
   :CUSTOM_ID: what-is-object-oriented-programming
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663898980491

*** Classes and Instances (Traditional OOP)
    :PROPERTIES:
    :CUSTOM_ID: classes-and-instances-traditional-oop
    :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899008964

*** The 4 Fundamental OOP Principle
    :PROPERTIES:
    :CUSTOM_ID: the-4-fundamental-oop-principle
    :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899032649

*** Abstraction
    :PROPERTIES:
    :CUSTOM_ID: abstraction
    :END:

- *Abstraction*: Ignoring or hiding details that /don't matter/,
  allowing us to get /an overview/ perspective of the thing we're
  implementing, instead of messing with details that don't really matter
  to our implementation. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899059332

*** Encapsulation Inheritance
    :PROPERTIES:
    :CUSTOM_ID: encapsulation-inheritance
    :END:

- *Encapsulation*: Keeping properties and methods /private/ inside the
  class, SO they are /not accessible from outside the class/. Some
  methods can be exposed as a public interface (API). [[13.
  Object-Oriented Programming (O0P) With JavaScript-1663899150174

*** Polymorphism
    :PROPERTIES:
    :CUSTOM_ID: polymorphism
    :END:

- *Inheritance*: Making all properties and methods of a certain class
  /available to a child class/, forming a hierarchical relationship
  between classes. This allows us to /reuse common logic/ and to model
  real-world relationships. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899193652

** 00P in JavaScript
   :PROPERTIES:
   :CUSTOM_ID: p-in-javascript
   :END:

- Polymorphism: A child class can /overwrite/ a method it inherited from
  a parent class [it's more complex that that, but enough for our
  purposes]. [[13. Object-Oriented Programming (O0P) With
  JavaScript-1663899232684

** 00P in JavaScript
   :PROPERTIES:
   :CUSTOM_ID: p-in-javascript-1
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663899253131

*3 Ways of Implementing Prototypical Inheritance* [[13. Object-Oriented
Programming (O0P) With JavaScript-1663899280934

** Constructor Functions and the new Operator
   :PROPERTIES:
   :CUSTOM_ID: constructor-functions-and-the-new-operator
   :END:

- The only difference between a regular function, and a function that we
  call constructor function, is that we call a constructor function with
  the new operator.
- An arrow function will actually not work as a function constructor.
  And that's because it doesn't have its own this keyword
- And constructor functions have been used since the beginning of
  JavaScript to kind of simulate classes.
- Just note that function constructors are not really a feature of the
  JavaScript language. Instead, they are simply a pattern that has been
  developed by other developers. And now everyone simply uses this.

#+BEGIN_SRC js
    /* all the objects that are created through this constructor function here will inherit, so they will get access to all the methods and properties that are defined on this prototype property. */
    const Person = function (firstName, birthYear) {
      // instance properties
      this.firstName = firstName;
      this.birthYear = birthYear;

      // You should never create a method inside of a constructor fucnction
      // this.calcAge = 2047 - this.birthYear;
    };

    new Person('Ahmed', 1997);

    // 1. New {} is created
    // 2. function is called, this = {}
    // 3. {} is linked to prototype
    // 4. fucntion automatically return {}

    const ahmed = new Person('Ahmed', 1997);
    const salaria = new Person('Salaria', 1998);

    console.log(ahmed);
    console.log(salaria);

    console.log(ahmed instanceof Person); // true
#+END_SRC

** Prototypes
   :PROPERTIES:
   :CUSTOM_ID: prototypes
   :END:

#+BEGIN_SRC js
    // Prototypes
    console.log(Person.prototype);

    Person.prototype.calcAge = function () {
      console.log(2047 - this.birthYear);
    };

    ahmed.calcAge();
    salaria.calcAge();

    console.log(ahmed.__proto__);

    // Where does this proto property comes from? From step number 3
    // 1. New {} is created
    // 2. function is called, this = {}
    // 3. {} is linked to prototype
    // 4. fucntion automatically return {}

    console.log(ahmed.__proto__ === Person.prototype);

    /* So person dot prototype here is actually not the prototype of person. But instead, it is what's gonna be used as the prototype of all the objects that are created with the person constructor function.
    So that's a subtle a but important difference that you need to keep in mind. And, in fact, what I just said that is confirmed by this comparison */

    console.log(Person.prototype.isPrototypeOf(ahmed)); // true
    console.log(Person.prototype.isPrototypeOf(salaria)); // true
    console.log(Person.prototype.isPrototypeOf(Person)); // false

    // Rather than calling it prototype is should have been called .prototypeOfLinkedObjects

    Person.prototype.species = 'Homo Sapiens';
    console.log(ahmed.species, salaria.species);

    console.log(ahmed.hasOwnPropery('firstName')); // true
    console.log(ahmed.hasOwnPropery('species')); // false
#+END_SRC

** Prototypal Inheritance and The Prototype Chain
   :PROPERTIES:
   :CUSTOM_ID: prototypal-inheritance-and-the-prototype-chain
   :END:

*How Prototypical Inheritance / Delegation works?* [[13. Object-Oriented
Programming (O0P) With JavaScript-1663906658628 *The Prototype
Chain* [[13. Object-Oriented Programming (O0P) With
JavaScript-1663906701353

** Prototypal Inheritance on Built-In Objects
   :PROPERTIES:
   :CUSTOM_ID: prototypal-inheritance-on-built-in-objects
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Prototypal Inheritance on Built-In Objects
    console.log(jonas.__proto__);
    // Object.prototype (top of prototype chain)
    console.log(jonas.__proto__.__proto__);
    console.log(jonas.__proto__.__proto__.__proto__);

    console.dir(Person.prototype.constructor);

    const arr = [3, 6, 6, 5, 6, 9, 9]; // new Array === []
    console.log(arr.__proto__);
    console.log(arr.__proto__ === Array.prototype);

    console.log(arr.__proto__.__proto__);

    Array.prototype.unique = function () {
      return [...new Set(this)];
    };

    console.log(arr.unique());

    const h1 = document.querySelector('h1');
    console.dir(x => x + 1);
#+END_SRC

** Coding Challenge #1
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-1
   :END:

1. Use a constructor function to implement a Car. A car has a make and a
   speed property. The speed property is the current speed of the car in
   km/h;
2. Implement an 'accelerate' method that will increase the car's speed
   by 10, and log the new speed to the console;
3. Implement a 'brake' method that will decrease the car's speed by 5,
   and log the new speed to the console;
4. Create 2 car objects and experiment with calling 'accelerate' and
   'brake' multiple times on each of them.

DATA CAR 1: 'BMW' going at 120 km/h DATA CAR 2: 'Mercedes' going at 95
km/h

#+BEGIN_SRC js
    const Car = function (make, speed) {
      this.make = make;
      this.speed = speed;
    };

    Car.prototype.accelerate = function () {
      this.speed += 10;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    Car.prototype.brake = function () {
      this.speed -= 5;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    const bmw = new Car('BMW', 120);
    const mercedes = new Car('Mercedes', 95);

    bmw.accelerate();
    bmw.accelerate();
    bmw.brake();
    bmw.accelerate();
#+END_SRC

** ES6 Classes
   :PROPERTIES:
   :CUSTOM_ID: es6-classes
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // ES6 Classes

    // Class expression
    // const PersonCl = class {}

    // Class declaration
    class PersonCl {
      constructor(fullName, birthYear) {
        this.fullName = fullName;
        this.birthYear = birthYear;
      }

      // Instance methods
      // Methods will be added to .prototype property
      calcAge() {
        console.log(2037 - this.birthYear);
      }

      greet() {
        console.log(`Hey ${this.fullName}`);
      }

      get age() {
        return 2037 - this.birthYear;
      }

      // Set a property that already exists
      set fullName(name) {
        if (name.includes(' ')) this._fullName = name;
        else alert(`${name} is not a full name!`);
      }

      get fullName() {
        return this._fullName;
      }
#+END_SRC

** Setters and Getters
   :PROPERTIES:
   :CUSTOM_ID: setters-and-getters
   :END:

- So every object in JavaScript can have setter and getter properties.
  And we call these special properties assessor properties, while the
  more normal properties are called data properties. So getters and
  setters are basically functions that get and set a value so just as
  the name says, but on the outside they still look like regular
  properties.

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Setters and Getters
    const account = {
      owner: 'Jonas',
      movements: [200, 530, 120, 300],

      get latest() {
        return this.movements.slice(-1).pop();
      },

      set latest(mov) {
        this.movements.push(mov);
      },
    };

    console.log(account.latest);

    account.latest = 50;
    console.log(account.movements);
#+END_SRC

** Static Methods
   :PROPERTIES:
   :CUSTOM_ID: static-methods
   :END:

#+BEGIN_SRC js
      // Static method
      static hey() {
        console.log('Hey there 👋');
        console.log(this);
      }
    }

    const jessica = new PersonCl('Jessica Davis', 1996);
    console.log(jessica);
    jessica.calcAge();
    console.log(jessica.age);

    console.log(jessica.__proto__ === PersonCl.prototype);

    // PersonCl.prototype.greet = function () {
    //   console.log(`Hey ${this.firstName}`);
    // };
    jessica.greet();

    // 1. Classes are NOT hoisted
    // 2. Classes are first-class citizens
    // 3. Classes are executed in strict mode

    const walter = new PersonCl('Walter White', 1965);
    // PersonCl.hey();
#+END_SRC

** Object.create
   :PROPERTIES:
   :CUSTOM_ID: object.create
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Object.create
    const PersonProto = {
      calcAge() {
        console.log(2037 - this.birthYear);
      },

      init(firstName, birthYear) {
        this.firstName = firstName;
        this.birthYear = birthYear;
      },
    };

    const steven = Object.create(PersonProto);
    console.log(steven);
    steven.name = 'Steven';
    steven.birthYear = 2002;
    steven.calcAge();

    console.log(steven.__proto__ === PersonProto);

    const sarah = Object.create(PersonProto);
    sarah.init('Sarah', 1979);
    sarah.calcAge();
#+END_SRC

** Coding Challenge #2
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-2
   :END:

#+BEGIN_SRC js
    class CarCl {
      constructor(make, speed) {
        this.make = make;
        this.speed = speed;
      }

      accelerate() {
        this.speed += 10;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      brake() {
        this.speed -= 5;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      get speedUS() {
        return this.speed / 1.6;
      }

      set speedUS(speed) {
        this.speed = speed * 1.6;
      }
    }

    const ford = new CarCl('Ford', 120);
    console.log(ford.speedUS);
    ford.accelerate();
    ford.accelerate();
    ford.brake();
    ford.speedUS = 50;
    console.log(ford);
#+END_SRC

** Inheritance Between "Classes": Constructor Functions
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-constructor-functions
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": Constructor Functions

    const Person = function (firstName, birthYear) {
      this.firstName = firstName;
      this.birthYear = birthYear;
    };

    Person.prototype.calcAge = function () {
      console.log(2037 - this.birthYear);
    };

    const Student = function (firstName, birthYear, course) {
      Person.call(this, firstName, birthYear);
      this.course = course;
    };

    // Linking prototypes
    Student.prototype = Object.create(Person.prototype); // At this point, student.prototype is empty

    Student.prototype.introduce = function () {
      console.log(`My name is ${this.firstName} and I study ${this.course}`);
    };

    const mike = new Student('Mike', 2020, 'Computer Science');
    mike.introduce();
    mike.calcAge();

    console.log(mike.__proto__);
    console.log(mike.__proto__.__proto__);

    console.log(mike instanceof Student);
    console.log(mike instanceof Person);
    console.log(mike instanceof Object);

    Student.prototype.constructor = Student;
    console.dir(Student.prototype.constructor);
#+END_SRC

** Coding Challenge #3
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-3
   :END:

1. Use a constructor function to implement an Electric Car (called EV)
   as a CHILD "class" of Car. Besides a make and current speed, the EV
   also has the current battery charge in % ('charge' property);
2. Implement a 'chargeBattery' method which takes an argument 'chargeTo'
   and sets the battery charge to 'chargeTo';
3. Implement an 'accelerate' method that will increase the car's speed
   by 20, and decrease the charge by 1%. Then log a message like this:
   'Tesla going at 140 km/h, with a charge of 22%';
4. Create an electric car object and experiment with calling
   'accelerate', 'brake' and 'chargeBattery' (charge to 90%). Notice
   what happens when you 'accelerate'! HINT: Review the definiton of
   polymorphism 😉

DATA CAR 1: 'Tesla' going at 120 km/h, with a charge of 23%

#+BEGIN_SRC js
    const Car = function (make, speed) {
      this.make = make;
      this.speed = speed;
    };

    Car.prototype.accelerate = function () {
      this.speed += 10;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    Car.prototype.brake = function () {
      this.speed -= 5;
      console.log(`${this.make} is going at ${this.speed} km/h`);
    };

    const EV = function (make, speed, charge) {
      Car.call(this, make, speed);
      this.charge = charge;
    };

    // Link the prototypes
    EV.prototype = Object.create(Car.prototype);

    EV.prototype.chargeBattery = function (chargeTo) {
      this.charge = chargeTo;
    };

    EV.prototype.accelerate = function () {
      this.speed += 20;
      this.charge--;
      console.log(
        `${this.make} is going at ${this.speed} km/h, with a charge of ${this.charge}`
      );
    };

    const tesla = new EV('Tesla', 120, 23);
    tesla.chargeBattery(90);
    console.log(tesla);
    tesla.brake();
    tesla.accelerate();
#+END_SRC

** Inheritance Between "Classes": ES6 Classes
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-es6-classes
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994719743

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994740330

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994769380

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994814589

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": ES6 Classes

    class PersonCl {
      constructor(fullName, birthYear) {
        this.fullName = fullName;
        this.birthYear = birthYear;
      }

      // Instance methods
      calcAge() {
        console.log(2037 - this.birthYear);
      }

      greet() {
        console.log(`Hey ${this.fullName}`);
      }

      get age() {
        return 2037 - this.birthYear;
      }

      set fullName(name) {
        if (name.includes(' ')) this._fullName = name;
        else alert(`${name} is not a full name!`);
      }

      get fullName() {
        return this._fullName;
      }

      // Static method
      static hey() {
        console.log('Hey there 👋');
      }
    }

    class StudentCl extends PersonCl {
      constructor(fullName, birthYear, course) {
        // Always needs to happen first!
        super(fullName, birthYear);
        this.course = course;
      }

      introduce() {
        console.log(`My name is ${this.fullName} and I study ${this.course}`);
      }

      calcAge() {
        console.log(
          `I'm ${
            2037 - this.birthYear
          } years old, but as a student I feel more like ${
            2037 - this.birthYear + 10
          }`
        );
      }
    }

    const martha = new StudentCl('Martha Jones', 2012, 'Computer Science');
    martha.introduce();
    martha.calcAge();
#+END_SRC

** Inheritance Between "Classes": Object.create
   :PROPERTIES:
   :CUSTOM_ID: inheritance-between-classes-object.create
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663994609934

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Inheritance Between "Classes": Object.create

    const PersonProto = {
      calcAge() {
        console.log(2037 - this.birthYear);
      },

      init(firstName, birthYear) {
        this.firstName = firstName;
        this.birthYear = birthYear;
      },
    };

    const steven = Object.create(PersonProto);

    const StudentProto = Object.create(PersonProto);
    StudentProto.init = function (firstName, birthYear, course) {
      PersonProto.init.call(this, firstName, birthYear);
      this.course = course;
    };

    StudentProto.introduce = function () {
      // BUG in video:
      // console.log(`My name is ${this.fullName} and I study ${this.course}`);

      // FIX:
      console.log(`My name is ${this.firstName} and I study ${this.course}`);
    };

    const jay = Object.create(StudentProto);
    jay.init('Jay', 2010, 'Computer Science');
    jay.introduce();
    jay.calcAge();
#+END_SRC

** Another Class Example
   :PROPERTIES:
   :CUSTOM_ID: another-class-example
   :END:

#+BEGIN_SRC js
    class Account {
      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;
        this.pin = pin;
        this.movements = [];
        this.locale = navigator.language;
        console.log(`Thanks for opening an account ${this.name}`);
      }

      // Public Interface

      deposit(val) {
        this.movements.push(val);
      }
      withdraw(val) {
        this.deposit(-val);
      }
      approveLoan(val) {
        return true;
      }
      requestLoan(val) {
        if (this.approveLoan(val)) {
          this.deposit(val);
          console.log('Loan Approved');
        }
      }
    }

    const acc1 = new Account('xoraus', 'RUP', 1111);

    acc1.deposit(250);
    acc1.deposit(140);
    acc1.requestLoan(1000);
    // acc1.approveLoan(1000); This method should only be available to the requestLoan method
    // Therefore we need data encapsulation and data privacy

    console.log(acc1);
    // console.log(acc1.pin); - This should not be accessible
#+END_SRC

** Encapsulation: Protected Properties and Methods
   :PROPERTIES:
   :CUSTOM_ID: encapsulation-protected-properties-and-methods
   :END:

- Now first, remember that encapsulation basically means to keep some
  properties and methods private inside the class so that they are not
  accessible from outside of the class. Then the rest of the methods are
  basically exposed as a public interface, which we can also call API.
- Now, there are two big reasons why we need encapsulation and data
  privacy.

  - So first it is to prevent code from outside of a class to
    accidentally manipulate or data inside the class.
  - Now, the second reason is that when we expose only a small interface
    so a small API consisting only of a few public methods then we can
    change all the other internal methods with more confidence. Because
    in this case, we can be sure that external code does not rely on
    these private methods.

- Encapsulation means information hiding. It's about hiding as much as
  possible of the object's internal parts and exposing a minimal public
  interface. The simplest and most elegant way to create encapsulation
  in JavaScript is using closures. A closure can be created as a
  function with private state.

#+BEGIN_SRC js
    'use strict';

    class Account {
      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;

        // Protected Property
        this._pin = pin;
        this._movements = [];
        this.locale = navigator.language;
        console.log(`Thanks for opening an account ${this.name}`);
      }

      // Public Interface

      getMovements() {
        return this._movements;
      }

      deposit(val) {
        this._movements.push(val);
      }
      withdraw(val) {
        this.deposit(-val);
      }
      _approveLoan(val) {
        return true;
      }
      requestLoan(val) {
        if (this._approveLoan(val)) {
          this.deposit(val);
          console.log('Loan Approved');
        }
      }
    }

    const acc1 = new Account('xoraus', 'RUP', 1111);

    // acc1._movements.push(250);
    // acc1._movements.push(-140);

    acc1.deposit(250);
    acc1.deposit(140);

    acc1.requestLoan(1000);
    // acc1.approveLoan(1000); This method should only be available to the requestLoan method
    // Therefore we need data encapsulation and data privacy

    console.log(acc1.getMovements());

    console.log(acc1);
    // console.log(acc1.pin); - This should not be accessible
#+END_SRC

** Encapsulation: Private Class Fields and Methods
   :PROPERTIES:
   :CUSTOM_ID: encapsulation-private-class-fields-and-methods
   :END:

#+BEGIN_SRC js
    ///////////////////////////////////////
    // Encapsulation: Protected Properties and Methods
    // Encapsulation: Private Class Fields and Methods

    // 1) Public fields
    // 2) Private fields
    // 3) Public methods
    // 4) Private methods
    // (there is also the static version)

    class Account {
      // 1) Public fields (instances)
      locale = navigator.language;

      // 2) Private fields (instances)
      #movements = [];
      #pin;

      constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;
        this.#pin = pin;

        // Protected property
        // this._movements = [];
        // this.locale = navigator.language;

        console.log(`Thanks for opening an account, ${owner}`);
      }

      // 3) Public methods

      // Public interface
      getMovements() {
        return this.#movements;
      }

      deposit(val) {
        this.#movements.push(val);
        return this;
      }

      withdraw(val) {
        this.deposit(-val);
        return this;
      }

      requestLoan(val) {
        // if (this.#approveLoan(val)) {
        if (this._approveLoan(val)) {
          this.deposit(val);
          console.log(`Loan approved`);
          return this;
        }
      }

      static helper() {
        console.log('Helper');
      }

      // 4) Private methods
      // #approveLoan(val) {
      _approveLoan(val) {
        return true;
      }
    }

    const acc1 = new Account('Jonas', 'EUR', 1111);

    // acc1._movements.push(250);
    // acc1._movements.push(-140);
    // acc1.approveLoan(1000);

    acc1.deposit(250);
    acc1.withdraw(140);
    acc1.requestLoan(1000);
    console.log(acc1.getMovements());
    console.log(acc1);
    Account.helper();

    // console.log(acc1.#movements);
    // console.log(acc1.#pin);
    // console.log(acc1.#approveLoan(100));
#+END_SRC

** Chaining Methods
   :PROPERTIES:
   :CUSTOM_ID: chaining-methods
   :END:

#+BEGIN_SRC js
    // Chaining
    acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(4000);
    console.log(acc1.getMovements());
#+END_SRC

** ES6 Classes Summary
   :PROPERTIES:
   :CUSTOM_ID: es6-classes-summary
   :END:

[[13. Object-Oriented Programming (O0P) With
JavaScript-1663995283090

** Coding Challenge #4
   :PROPERTIES:
   :CUSTOM_ID: coding-challenge-4
   :END:

1. Re-create challenge #3, but this time using ES6 classes: create an
   'EVCl' child class of the 'CarCl' class
2. Make the 'charge' property private;
3. Implement the ability to chain the 'accelerate' and 'chargeBattery'
   methods of this class, and also update the 'brake' method in the
   'CarCl' class. They experiment with chining!

DATA CAR 1: 'Rivian' going at 120 km/h, with a charge of 23%

#+BEGIN_SRC js
    class CarCl {
      constructor(make, speed) {
        this.make = make;
        this.speed = speed;
      }

      accelerate() {
        this.speed += 10;
        console.log(`${this.make} is going at ${this.speed} km/h`);
      }

      brake() {
        this.speed -= 5;
        console.log(`${this.make} is going at ${this.speed} km/h`);
        return this;
      }

      get speedUS() {
        return this.speed / 1.6;
      }

      set speedUS(speed) {
        this.speed = speed * 1.6;
      }
    }

    class EVCl extends CarCl {
      #charge;

      constructor(make, speed, charge) {
        super(make, speed);
        this.#charge = charge;
      }

      chargeBattery(chargeTo) {
        this.#charge = chargeTo;
        return this;
      }

      accelerate() {
        this.speed += 20;
        this.#charge--;
        console.log(
          `${this.make} is going at ${this.speed} km/h, with a charge of ${
            this.#charge
          }`
        );
        return this;
      }
    }

    const rivian = new EVCl('Rivian', 120, 23);
    console.log(rivian);
    // console.log(rivian.#charge);
    rivian
      .accelerate()
      .accelerate()
      .accelerate()
      .brake()
      .chargeBattery(50)
      .accelerate();

    console.log(rivian.speedUS);
#+END_SRC
* 14 Mapty App - OOP, Geolocation, External Libraries, and More!
** Project Overview
   :PROPERTIES:
   :CUSTOM_ID: project-overview
   :END:

** How to Plan a Web Project
   :PROPERTIES:
   :CUSTOM_ID: how-to-plan-a-web-project
   :END:

*** Project Planning
    :PROPERTIES:
    :CUSTOM_ID: project-planning
    :END:

[[14. Mapty App - OOP, Geolocation, External Libraries, and
More!-1664033048247

*** User Stories
    :PROPERTIES:
    :CUSTOM_ID: user-stories
    :END:

[[14. Mapty App - OOP, Geolocation, External Libraries, and
More!-1664033068404

*** Features
    :PROPERTIES:
    :CUSTOM_ID: features
    :END:

[[14. Mapty App - OOP, Geolocation, External Libraries, and
More!-1664033088216

*** Flowchart
    :PROPERTIES:
    :CUSTOM_ID: flowchart
    :END:

[[14. Mapty App - OOP, Geolocation, External Libraries, and
More!-1664019394459

** Using the Geolocation API min
   :PROPERTIES:
   :CUSTOM_ID: using-the-geolocation-api-min
   :END:

** Displaying a Map Using Leaflet Library
   :PROPERTIES:
   :CUSTOM_ID: displaying-a-map-using-leaflet-library
   :END:

#+BEGIN_SRC js
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        function (position) {
          const { latitude } = position.coords;
          const { longitude } = position.coords;

          const coords = [latitude, longitude];
          const map = L.map('map').setView(coords, 15);

          L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
            attribution:
              '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          }).addTo(map);

          L.marker(coords)
            .addTo(map)
            .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
            .openPopup();
        },
        function () {
          alert(`Couldn't get the Location`);
        }
      );
#+END_SRC

** Displaying a Map Marker
   :PROPERTIES:
   :CUSTOM_ID: displaying-a-map-marker
   :END:

#+BEGIN_SRC js
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        function (position) {
          const { latitude } = position.coords;
          const { longitude } = position.coords;

          const coords = [latitude, longitude];
          const map = L.map('map').setView(coords, 15);

          L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
            attribution:
              '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          }).addTo(map);

          map.on('click', function (mapEvent) {
            const { lat, lng } = mapEvent.latlng;
            L.marker([lat, lng])
              .addTo(map)
              .bindPopup(
                L.popup({
                  maxWidth: 250,
                  minWidth: 100,
                  autoClose: false,
                  closeOnClick: false,
                  className: 'running-popup',
                })
              )
              .setPopupContent('Workout')
              .openPopup();
          });
        },
        function () {
          alert(`Couldn't get the Location`);
        }
      );
#+END_SRC

** Rendering Workout Input Form
   :PROPERTIES:
   :CUSTOM_ID: rendering-workout-input-form
   :END:

#+BEGIN_SRC js
    let map, mapEvent;

    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        function (position) {
          const { latitude } = position.coords;
          const { longitude } = position.coords;

          const coords = [latitude, longitude];
          map = L.map('map').setView(coords, 15);

          L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
            attribution:
              '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          }).addTo(map);

          // Handling click on map
          map.on('click', function (mapE) {
            mapEvent = mapE;
            form.classList.remove('hidden');
            inputDistance.focus();
          });
        },
        function () {
          alert(`Couldn't get the Location`);
        }
      );

    form.addEventListener('submit', function (e) {
      e.preventDefault();

      // clear input fields
      inputDistance.value =
        inputDuration.value =
        inputCadence.value =
        inputElevation.value =
          '';

      // Display Marker
      const { lat, lng } = mapEvent.latlng;
      L.marker([lat, lng])
        .addTo(map)
        .bindPopup(
          L.popup({
            maxWidth: 250,
            minWidth: 100,
            autoClose: false,
            closeOnClick: false,
            className: 'running-popup',
          })
        )
        .setPopupContent('Workout')
        .openPopup();
    });

    inputType.addEventListener('change', function () {
      inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
      inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
    });
#+END_SRC

** Project Architecture
   :PROPERTIES:
   :CUSTOM_ID: project-architecture
   :END:

[[14. Mapty App - OOP, Geolocation, External Libraries, and
More!-1664166813408

** Refactoring for Project Architecture
   :PROPERTIES:
   :CUSTOM_ID: refactoring-for-project-architecture
   :END:

#+BEGIN_SRC js
    class App {
      #map;
      #mapEvent;

      constructor() {
        this._getPosition();
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert(`Couldn't get the Location`);
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        const coords = [latitude, longitude];
        this.#map = L.map('map').setView(coords, 15);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling click on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        e.preventDefault();
        // clear input fields
        inputDistance.value =
          inputDuration.value =
          inputCadence.value =
          inputElevation.value =
            '';

        // Display Marker
        const { lat, lng } = this.#mapEvent.latlng;
        L.marker([lat, lng])
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: 'running-popup',
            })
          )
          .setPopupContent('Workout')
          .openPopup();
      }
    }

    const app = new App();
#+END_SRC

** Managing Workout Data: Creating Classes
   :PROPERTIES:
   :CUSTOM_ID: managing-workout-data-creating-classes
   :END:

#+BEGIN_SRC js
    class Workout {
      date = new Date();
      id = (Date.now() + '').slice(-10);

      constructor(coords, distance, duration) {
        this.coords = coords; // [lat, lng]
        this.distance = distance; // in Km
        this.duration = duration; // in min
      }
    }

    class Running extends Workout {
      constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.clacPace();
      }

      clacPace() {
        // min/km
        this.pace = this.duration / this.distance;
        return this.pace;
      }
    }

    class Cycling extends Workout {
      constructor(coords, distance, duration, elevationGain) {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        this.calcSpeed();
      }

      calcSpeed() {
        // km/hr
        this.speed = this.distance / this.duration / 60;
        return this.speed;
      }
    }

    console.log(run1, cycling1);

    class App {
      #map;
      #mapEvent;

      constructor() {
        this._getPosition();
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert(`Couldn't get the Location`);
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        const coords = [latitude, longitude];
        this.#map = L.map('map').setView(coords, 15);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling click on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        e.preventDefault();
        // clear input fields
        inputDistance.value =
          inputDuration.value =
          inputCadence.value =
          inputElevation.value =
            '';

        // Display Marker
        const { lat, lng } = this.#mapEvent.latlng;
        L.marker([lat, lng])
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: 'running-popup',
            })
          )
          .setPopupContent('Workout')
          .openPopup();
      }
    }

    const app = new App();
#+END_SRC

** Creating a New Workout
   :PROPERTIES:
   :CUSTOM_ID: creating-a-new-workout
   :END:

#+BEGIN_SRC js
    class Workout {
      date = new Date();
      id = (Date.now() + '').slice(-10);

      constructor(coords, distance, duration) {
        this.coords = coords; // [lat, lng]
        this.distance = distance; // in Km
        this.duration = duration; // in min
      }
    }

    class Running extends Workout {
      type = 'running';
      constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.clacPace();
      }

      clacPace() {
        // min/km
        this.pace = this.duration / this.distance;
        return this.pace;
      }
    }

    class Cycling extends Workout {
      type = 'cycling';
      constructor(coords, distance, duration, elevationGain) {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        this.calcSpeed();
      }

      calcSpeed() {
        // km/hr
        this.speed = this.distance / this.duration / 60;
        return this.speed;
      }
    }

    ///////////////////////////////////////
    // APPLICATION ARCHITECTURE
    const form = document.querySelector('.form');
    const containerWorkouts = document.querySelector('.workouts');
    const inputType = document.querySelector('.form__input--type');
    const inputDistance = document.querySelector('.form__input--distance');
    const inputDuration = document.querySelector('.form__input--duration');
    const inputCadence = document.querySelector('.form__input--cadence');
    const inputElevation = document.querySelector('.form__input--elevation');

    class App {
      #map;
      #mapEvent;
      #workouts = [];
      constructor() {
        this._getPosition();
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert(`Couldn't get the Location`);
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        const coords = [latitude, longitude];
        this.#map = L.map('map').setView(coords, 15);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling click on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        e.preventDefault();

        const validInputs = (...inputs) =>
          inputs.every(inp => Number.isFinite(inp));

        const allPositives = (...inputs) => inputs.every(inp => inp > 0);
        // Get the data from the form

        const type = inputType.value;
        // + sign is to convert string into Number
        const distance = +inputDistance.value;
        const duration = +inputDuration.value;
        const { lat, lng } = this.#mapEvent.latlng;
        let workout;

        // If workout running, creacte running object

        if (type == 'running') {
          const cadence = +inputCadence.value;
          console.log(cadence, distance, duration);
          // Check if the data is valid
          if (
            // !Number.isFinite(distance) ||
            // !Number.isFinite(duration) ||
            // !Number.isFinite(cadence)
            !validInputs(distance, duration, cadence) ||
            !allPositives(distance, duration, cadence)
          )
            return alert('Input have to be positive numbers');

          workout = new Running([lat, lng], distance, duration, cadence);
        }

        // If workout cycling, creacte cycling object
        if (type == 'cycling') {
          const elevation = +inputElevation.value;
          if (
            !validInputs(distance, duration, elevation) ||
            !allPositives(distance, duration)
          )
            return alert('Input have to be positive numbers');

          workout = new Cycling([lat, lng], distance, duration, elevation);
        }
        // Add new object to workout array
        this.#workouts.push(workout);
        console.log(workout);

        // Render workout on map as marker
        this.renderWorkoutMarker(workout);
        // clear input fields

        inputDistance.value =
          inputDuration.value =
          inputCadence.value =
          inputElevation.value =
            '';
      }
      renderWorkoutMarker(workout) {
        L.marker(workout.coords)
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: `${workout.type}-popup`,
            })
          )
          .setPopupContent('workout')
          .openPopup();
      }
    }

    const app = new App();
#+END_SRC

** Rendering Workouts
   :PROPERTIES:
   :CUSTOM_ID: rendering-workouts
   :END:

#+BEGIN_SRC js
    'use strict';

    class Workout {
      date = new Date();
      id = (new Date() + '').slice(-10);

      constructor(coords, distance, duration) {
        this.coords = coords; // [lat, lng]
        this.distance = distance; // in Km
        this.duration = duration; // in min
      }

      _setDescription() {
        // prettier-ignore
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
          months[this.date.getMonth()]
        } ${this.date.getDate()}`;
      }
    }

    class Running extends Workout {
      type = 'running';
      constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.clacPace();
        this._setDescription();
      }

      clacPace() {
        // min/km
        this.pace = this.duration / this.distance;
        return this.pace;
      }
    }

    class Cycling extends Workout {
      type = 'cycling';
      constructor(coords, distance, duration, elevationGain) {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        this.calcSpeed();
        this._setDescription();
      }

      calcSpeed() {
        // km/hr
        this.speed = this.distance / this.duration / 60;
        return this.speed;
      }
    }

    ///////////////////////////////////////
    // APPLICATION ARCHITECTURE
    const form = document.querySelector('.form');
    const containerWorkouts = document.querySelector('.workouts');
    const inputType = document.querySelector('.form__input--type');
    const inputDistance = document.querySelector('.form__input--distance');
    const inputDuration = document.querySelector('.form__input--duration');
    const inputCadence = document.querySelector('.form__input--cadence');
    const inputElevation = document.querySelector('.form__input--elevation');

    class App {
      #map;
      #mapEvent;
      #workouts = [];
      constructor() {
        this._getPosition();
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert(`Couldn't get the Location`);
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        const coords = [latitude, longitude];
        this.#map = L.map('map').setView(coords, 15);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling click on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _hideForm() {
        // Empty inputs
        inputDistance.value =
          inputDuration.value =
          inputCadence.value =
          inputElevation.value =
            '';
        form.style.display = 'none';
        form.classList.add('hidden');
        setTimeout(() => (form.style.display = 'grid'), 1000);
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        e.preventDefault();

        const validInputs = (...inputs) =>
          inputs.every(inp => Number.isFinite(inp));

        const allPositives = (...inputs) => inputs.every(inp => inp > 0);
        // Get the data from the form

        const type = inputType.value;
        // + sign is to convert string into Number
        const distance = +inputDistance.value;
        const duration = +inputDuration.value;
        const { lat, lng } = this.#mapEvent.latlng;
        let workout;

        // If workout running, creacte running object

        if (type == 'running') {
          const cadence = +inputCadence.value;
          console.log(cadence, distance, duration);
          // Check if the data is valid
          if (
            // !Number.isFinite(distance) ||
            // !Number.isFinite(duration) ||
            // !Number.isFinite(cadence)
            !validInputs(distance, duration, cadence) ||
            !allPositives(distance, duration, cadence)
          )
            return alert('Input have to be positive numbers');

          workout = new Running([lat, lng], distance, duration, cadence);
        }

        // If workout cycling, creacte cycling object
        if (type == 'cycling') {
          const elevation = +inputElevation.value;
          if (
            !validInputs(distance, duration, elevation) ||
            !allPositives(distance, duration)
          )
            return alert('Input have to be positive numbers');

          workout = new Cycling([lat, lng], distance, duration, elevation);
        }
        // Add new object to workout array
        this.#workouts.push(workout);
        console.log(workout);

        // Render workout on map as marker
        this._renderWorkoutMarker(workout);

        // Render workout on list
        this._renderWorkout(workout);

        // clear input fields
        this._hideForm();
      }
      _renderWorkoutMarker(workout) {
        L.marker(workout.coords)
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: `${workout.type}-popup`,
            })
          )
          .setPopupContent(
            `${workout.type === 'running' ? '🏃‍♂️' : '🚴🏻‍♀️'} ${workout.description}`
          )
          .openPopup();
      }

      _renderWorkout(workout) {
        let html = `
        <li class="workout workout--${workout.type}" data-id="${workout.id}">
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                workout.type === 'running' ? '🏃‍♂️' : '🚴🏻‍♀️'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">⏱</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">min</span>
            </div>`;
        if (workout.type === 'running')
          html += `
          <div class="workout__details">
            <span class="workout__icon">⚡️</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">🦶🏼</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>`;

        if (workout.type === 'cycling')
          html += `
          <div class="workout__details">
          <span class="workout__icon">⚡️</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">⛰</span>
          <span class="workout__value">${workout.elevationGain}</span>
          <span class="workout__unit">m</span>
        </div>
        `;

        form.insertAdjacentHTML('afterend', html);
      }
    }

    const app = new App();
#+END_SRC

** Move to Marker On Click
   :PROPERTIES:
   :CUSTOM_ID: move-to-marker-on-click
   :END:

#+BEGIN_SRC js
    'use strict';

    class Workout {
      date = new Date();
      id = (Date.now() + '').slice(-10);
      clicks = 0;

      constructor(coords, distance, duration) {
        this.coords = coords; // [lat, lng]
        this.distance = distance; // in Km
        this.duration = duration; // in min
      }

      _setDescription() {
        // prettier-ignore
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
          months[this.date.getMonth()]
        } ${this.date.getDate()}`;
      }

      click() {
        this.clicks++;
      }
    }

    class Running extends Workout {
      type = 'running';
      constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.clacPace();
        this._setDescription();
      }

      clacPace() {
        // min/km
        this.pace = this.duration / this.distance;
        return this.pace;
      }
    }

    class Cycling extends Workout {
      type = 'cycling';
      constructor(coords, distance, duration, elevationGain) {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        this.calcSpeed();
        this._setDescription();
      }

      calcSpeed() {
        // km/hr
        this.speed = this.distance / this.duration / 60;
        return this.speed;
      }
    }

    ///////////////////////////////////////
    // APPLICATION ARCHITECTURE
    const form = document.querySelector('.form');
    const containerWorkouts = document.querySelector('.workouts');
    const inputType = document.querySelector('.form__input--type');
    const inputDistance = document.querySelector('.form__input--distance');
    const inputDuration = document.querySelector('.form__input--duration');
    const inputCadence = document.querySelector('.form__input--cadence');
    const inputElevation = document.querySelector('.form__input--elevation');

    class App {
      #map;
      #mapZoomLevel = 13;
      #mapEvent;
      #workouts = [];
      constructor() {
        this._getPosition();
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert(`Couldn't get the Location`);
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        const coords = [latitude, longitude];
        this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling click on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _hideForm() {
        // Empty inputs
        inputDistance.value =
          inputDuration.value =
          inputCadence.value =
          inputElevation.value =
            '';
        form.style.display = 'none';
        form.classList.add('hidden');
        setTimeout(() => (form.style.display = 'grid'), 1000);
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        e.preventDefault();

        const validInputs = (...inputs) =>
          inputs.every(inp => Number.isFinite(inp));

        const allPositives = (...inputs) => inputs.every(inp => inp > 0);
        // Get the data from the form

        const type = inputType.value;
        // + sign is to convert string into Number
        const distance = +inputDistance.value;
        const duration = +inputDuration.value;
        const { lat, lng } = this.#mapEvent.latlng;
        let workout;

        // If workout running, creacte running object

        if (type == 'running') {
          const cadence = +inputCadence.value;
          console.log(cadence, distance, duration);
          // Check if the data is valid
          if (
            // !Number.isFinite(distance) ||
            // !Number.isFinite(duration) ||
            // !Number.isFinite(cadence)
            !validInputs(distance, duration, cadence) ||
            !allPositives(distance, duration, cadence)
          )
            return alert('Input have to be positive numbers');

          workout = new Running([lat, lng], distance, duration, cadence);
        }

        // If workout cycling, creacte cycling object
        if (type == 'cycling') {
          const elevation = +inputElevation.value;
          if (
            !validInputs(distance, duration, elevation) ||
            !allPositives(distance, duration)
          )
            return alert('Input have to be positive numbers');

          workout = new Cycling([lat, lng], distance, duration, elevation);
        }
        // Add new object to workout array
        this.#workouts.push(workout);
        console.log(workout);

        // Render workout on map as marker
        this._renderWorkoutMarker(workout);

        // Render workout on list
        this._renderWorkout(workout);

        // clear input fields
        this._hideForm();
      }
      _renderWorkoutMarker(workout) {
        L.marker(workout.coords)
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: `${workout.type}-popup`,
            })
          )
          .setPopupContent(
            `${workout.type === 'running' ? '🏃‍♂️' : '🚴🏻‍♀️'} ${workout.description}`
          )
          .openPopup();
      }

      _renderWorkout(workout) {
        let html = `
        <li class="workout workout--${workout.type}" data-id="${workout.id}">
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                workout.type === 'running' ? '🏃‍♂️' : '🚴🏻‍♀️'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">⏱</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">min</span>
            </div>`;
        if (workout.type === 'running')
          html += `
          <div class="workout__details">
            <span class="workout__icon">⚡️</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">🦶🏼</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>`;

        if (workout.type === 'cycling')
          html += `
          <div class="workout__details">
          <span class="workout__icon">⚡️</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">⛰</span>
          <span class="workout__value">${workout.elevationGain}</span>
          <span class="workout__unit">m</span>
        </div>
        `;

        form.insertAdjacentHTML('afterend', html);
      }

      _moveToPopup(e) {
        const workoutEl = e.target.closest('.workout');

        if (!workoutEl) return;

        const workout = this.#workouts.find(
          work => work.id === workoutEl.dataset.id
        );

        this.#map.setView(workout.coords, this.#mapZoomLevel, {
          animate: true,
          pan: {
            duration: 1,
          },
        });

        // using the public interface
        workout.click();
      }
    }

    const app = new App();
#+END_SRC

** Working with local Storage
   :PROPERTIES:
   :CUSTOM_ID: working-with-local-storage
   :END:

#+BEGIN_SRC js
    'use strict';

    class Workout {
      date = new Date();
      id = (Date.now() + '').slice(-10);
      clicks = 0;

      constructor(coords, distance, duration) {
        // this.date = ...
        // this.id = ...
        this.coords = coords; // [lat, lng]
        this.distance = distance; // in km
        this.duration = duration; // in min
      }

      _setDescription() {
        // prettier-ignore
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
          months[this.date.getMonth()]
        } ${this.date.getDate()}`;
      }

      click() {
        this.clicks++;
      }
    }

    class Running extends Workout {
      type = 'running';

      constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.calcPace();
        this._setDescription();
      }

      calcPace() {
        // min/km
        this.pace = this.duration / this.distance;
        return this.pace;
      }
    }

    class Cycling extends Workout {
      type = 'cycling';

      constructor(coords, distance, duration, elevationGain) {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        // this.type = 'cycling';
        this.calcSpeed();
        this._setDescription();
      }

      calcSpeed() {
        // km/h
        this.speed = this.distance / (this.duration / 60);
        return this.speed;
      }
    }

    // const run1 = new Running([39, -12], 5.2, 24, 178);
    // const cycling1 = new Cycling([39, -12], 27, 95, 523);
    // console.log(run1, cycling1);

    ///////////////////////////////////////
    // APPLICATION ARCHITECTURE
    const form = document.querySelector('.form');
    const containerWorkouts = document.querySelector('.workouts');
    const inputType = document.querySelector('.form__input--type');
    const inputDistance = document.querySelector('.form__input--distance');
    const inputDuration = document.querySelector('.form__input--duration');
    const inputCadence = document.querySelector('.form__input--cadence');
    const inputElevation = document.querySelector('.form__input--elevation');

    class App {
      #map;
      #mapZoomLevel = 13;
      #mapEvent;
      #workouts = [];

      constructor() {
        // Get user's position
        this._getPosition();

        // Get data from local storage
        this._getLocalStorage();

        // Attach event handlers
        form.addEventListener('submit', this._newWorkout.bind(this));
        inputType.addEventListener('change', this._toggleElevationField);
        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
      }

      _getPosition() {
        if (navigator.geolocation)
          navigator.geolocation.getCurrentPosition(
            this._loadMap.bind(this),
            function () {
              alert('Could not get your position');
            }
          );
      }

      _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;
        // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);

        const coords = [latitude, longitude];

        this.#map = L.map('map').setView(coords, this.#mapZoomLevel);

        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this.#map);

        // Handling clicks on map
        this.#map.on('click', this._showForm.bind(this));
      }

      _showForm(mapE) {
        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
      }

      _hideForm() {
        // Empty inputs
        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =
          '';

        form.style.display = 'none';
        form.classList.add('hidden');
        setTimeout(() => (form.style.display = 'grid'), 1000);
      }

      _toggleElevationField() {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      }

      _newWorkout(e) {
        const validInputs = (...inputs) =>
          inputs.every(inp => Number.isFinite(inp));
        const allPositive = (...inputs) => inputs.every(inp => inp > 0);

        e.preventDefault();

        // Get data from form
        const type = inputType.value;
        const distance = +inputDistance.value;
        const duration = +inputDuration.value;
        const { lat, lng } = this.#mapEvent.latlng;
        let workout;

        // If workout running, create running object
        if (type === 'running') {
          const cadence = +inputCadence.value;

          // Check if data is valid
          if (
            // !Number.isFinite(distance) ||
            // !Number.isFinite(duration) ||
            // !Number.isFinite(cadence)
            !validInputs(distance, duration, cadence) ||
            !allPositive(distance, duration, cadence)
          )
            return alert('Inputs have to be positive numbers!');

          workout = new Running([lat, lng], distance, duration, cadence);
        }

        // If workout cycling, create cycling object
        if (type === 'cycling') {
          const elevation = +inputElevation.value;

          if (
            !validInputs(distance, duration, elevation) ||
            !allPositive(distance, duration)
          )
            return alert('Inputs have to be positive numbers!');

          workout = new Cycling([lat, lng], distance, duration, elevation);
        }

        // Add new object to workout array
        this.#workouts.push(workout);

        // Render workout on map as marker
        this._renderWorkoutMarker(workout);

        // Render workout on list
        this._renderWorkout(workout);

        // Hide form + clear input fields
        this._hideForm();

        // Set local storage to all workouts
        this._setLocalStorage();
      }

      _renderWorkoutMarker(workout) {
        L.marker(workout.coords)
          .addTo(this.#map)
          .bindPopup(
            L.popup({
              maxWidth: 250,
              minWidth: 100,
              autoClose: false,
              closeOnClick: false,
              className: `${workout.type}-popup`,
            })
          )
          .setPopupContent(
            `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`
          )
          .openPopup();
      }

      _renderWorkout(workout) {
        let html = `
          <li class="workout workout--${workout.type}" data-id="${workout.id}">
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">⏱</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">min</span>
            </div>
        `;

        if (workout.type === 'running')
          html += `
            <div class="workout__details">
              <span class="workout__icon">⚡️</span>
              <span class="workout__value">${workout.pace.toFixed(1)}</span>
              <span class="workout__unit">min/km</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">🦶🏼</span>
              <span class="workout__value">${workout.cadence}</span>
              <span class="workout__unit">spm</span>
            </div>
          </li>
          `;

        if (workout.type === 'cycling')
          html += `
            <div class="workout__details">
              <span class="workout__icon">⚡️</span>
              <span class="workout__value">${workout.speed.toFixed(1)}</span>
              <span class="workout__unit">km/h</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">⛰</span>
              <span class="workout__value">${workout.elevationGain}</span>
              <span class="workout__unit">m</span>
            </div>
          </li>
          `;

        form.insertAdjacentHTML('afterend', html);
      }

      _moveToPopup(e) {
        // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:
        if (!this.#map) return;

        const workoutEl = e.target.closest('.workout');

        if (!workoutEl) return;

        const workout = this.#workouts.find(
          work => work.id === workoutEl.dataset.id
        );

        this.#map.setView(workout.coords, this.#mapZoomLevel, {
          animate: true,
          pan: {
            duration: 1,
          },
        });

        // using the public interface
        // workout.click();
      }

      _setLocalStorage() {
        localStorage.setItem('workouts', JSON.stringify(this.#workouts));
      }

      _getLocalStorage() {
        const data = JSON.parse(localStorage.getItem('workouts'));

        if (!data) return;

        this.#workouts = data;

        this.#workouts.forEach(work => {
          this._renderWorkout(work);
        });
      }

      reset() {
        localStorage.removeItem('workouts');
        location.reload();
      }
    }

    const app = new App();
#+END_SRC

** Final Considerations
   :PROPERTIES:
   :CUSTOM_ID: final-considerations
   :END:

- *10 Additional Features Ideas: Challenges*
- Ability to edit a workout;
- Ability to delete a workout;
- Ability to delete all workouts;
- Ability to sort workouts by a certain field (e.g. distance);
- Re-build Running and Cycling objects coming from Local Storage; More
  realistic error and confirmation messages;
- Ability to position the map to show all workouts [very hard];
- Ability to draw lines and shapes instead of just points [very hard];
- Geocode location from coordinates ("Run in Faro, Portugal") [only
  after asynchronous JavaScript section];
- Display weather data for workout time and place [only after
  asynchronous JavaScript section].

